IySZlkAXBj = 32
FvLEgkeRAZ = 'VQTbLfqQla'
gncNoEiFjj = False
SfaOopqzyg = 0.40912489233452753
WKoDUuyRUo = None
OddmNneZBK = ('95c0a014dbd4da5d11ba9e7d8fb36b7190b6613a3828afed8fbcf92806a1b8ca',)
XOLZWrKNzR = ['274210c1c76e306e90ec17533c4db8a80661341f77bfe178bb0cdf61bfab63a5']
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c636591497b88cfe5d809d5e20eb88cca5a9cf2ad1c728ef05c1c66b091376a2'

def decrypt_and_execute_QbpWPVVpDf(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c636591497b88cfe5d809d5e20eb88cca5a9cf2ad1c728ef05c1c66b091376a2':
        decrypt_and_execute_QbpWPVVpDf('fe16b0ece0df321a281d90c73bb5c47854ad7a3683728c2a8e40d7475e08051e38e5724a63c177702d5b0a3f1b9baa3ecbd8634a2b35f3b6e295834f2d09e07c')

    def KMHKoTvbJM():
        78 / 63
    KMHKoTvbJM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd37ccd12440bd6a86510b736f69fe8257c0b2563304c2e6e1d1d40969e77152b'

def decrypt_and_execute_dOXFQfkVwG(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd37ccd12440bd6a86510b736f69fe8257c0b2563304c2e6e1d1d40969e77152b':
        decrypt_and_execute_dOXFQfkVwG('bdd73d5abf1452fa1266fc3cc4446f2c70d248b02ae0d184f92b529543ace09d11c782a7eed3462f55edfbcbbbf653e78ac4b9b7761d7ffb133330be8bcf1cac')

    def FZizIEmQCB():
        27 * 20 - 24 / 36
    FZizIEmQCB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e84f9574192358c98a2b5cbf87db62bd8adfc0c9a5f5ea63af0721cfe13e6376'

def decrypt_and_execute_UclsRTpQwu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e84f9574192358c98a2b5cbf87db62bd8adfc0c9a5f5ea63af0721cfe13e6376':
        decrypt_and_execute_UclsRTpQwu('beb266eb0cf982c50f449f27669354d9220b02a01010cfd946ecfe2aca30d6ba7e971935d30a1020601b4f1b41f89006ff01a7c71836070535c22ac569fcf69c')

    def LaxkIIKyMo():
        40 * 2 - 36 - 95 * 21
    LaxkIIKyMo()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f31726852e4ce5be8eb2b70f45a4cb268deed86cf27f132497adeabe8c94ed1b'

def decrypt_and_execute_eWoOOlUVym(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f31726852e4ce5be8eb2b70f45a4cb268deed86cf27f132497adeabe8c94ed1b':
        decrypt_and_execute_eWoOOlUVym('52a028fb3f47355171dc7d726c087f648f61604b90c55cd4f9ee82351d7be075d9fb1d69fe165255020aa576f88a6233b71e26258f81979148e7874f8a58cf81')

    def krkqstpLYl():
        35 - 98 - 94
    krkqstpLYl()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '001913915f8ff6cf781092cff7f8152d467f9e6fae75d15868bda7d5ef455d68'

def decrypt_and_execute_ItDcpFDHtd(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '001913915f8ff6cf781092cff7f8152d467f9e6fae75d15868bda7d5ef455d68':
        decrypt_and_execute_ItDcpFDHtd('a9a488ea4dda34adabd103a753c9af74e41c5c2c83faa14b841f314f4f8624c35f7ae9586a5d38b4cecd0bf2580430b869722cae76a0702c1a8ee76771c4e8a6')

    def kJBFLOCtCj():
        40 * 72 / 70 - 69 / 92
    kJBFLOCtCj()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '154188d04e73121b71cca43b4c2dc0f401cc2b8389412d9f6d755fdb74734afa'

def decrypt_and_execute_OQmmsBkVQU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '154188d04e73121b71cca43b4c2dc0f401cc2b8389412d9f6d755fdb74734afa':
        decrypt_and_execute_OQmmsBkVQU('a67daf1b7fc2d57a8422e1c1dea5fa8736bf8aa9b826804dd7d65a877b6c61b4ce5e14bd1892b654e4bfcfed9e3b57f989753b474570a54b8fadd49aa2015bf0')

    def EtrJBgOIRa():
        87 * 55 - 40 - 14
    EtrJBgOIRa()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd0a4d10ac25c0ee66bf98c97216f39e61891fccbf70c44f79c17bdc5182b9d2e'

def decrypt_and_execute_ifidJrWoAe(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd0a4d10ac25c0ee66bf98c97216f39e61891fccbf70c44f79c17bdc5182b9d2e':
        decrypt_and_execute_ifidJrWoAe('539b1353435242964be4bad3a2462f6f1b803b4fba797fb40973039afc3f3f1c52ee4c0c11f891b8807be42a575a1771e0598b4b2fde50c393b55a7f9f735e26')

    def KVMPBeKELo():
        72 / 85 * 30 - 90
    KVMPBeKELo()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '44d9ef0dbf0e4eb8b5e9c5590c938fa311d8d49cd3abc29372d127d02f621c51'

def decrypt_and_execute_QqSIacVCUL(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '44d9ef0dbf0e4eb8b5e9c5590c938fa311d8d49cd3abc29372d127d02f621c51':
        decrypt_and_execute_QqSIacVCUL('af8794dd1cf50577565e4d0544249fb0ea0cf92e87618f465267f148504a4b8ae2939035d4117ff3506b3d5d324fbc9c187452309e1b05caf4e049f7baabf9ad')

    def ztolzhEYaR():
        50 + 28 * 40 / 96 * 26
    ztolzhEYaR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '67d1f77fae2e8ca7d13815c7e4d1dfea953146fd6b82e3ce2719fba251882c1e'

def decrypt_and_execute_yGbEqxWZyi(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '67d1f77fae2e8ca7d13815c7e4d1dfea953146fd6b82e3ce2719fba251882c1e':
        decrypt_and_execute_yGbEqxWZyi('12e7f09413ecb8ce08551aca1a6a2a118ae29e290053c3f4c175f39fe4a1d5505680816715d053e0a84d0bf67c02d23323120cf6a44634db73d16aaf41808fea')

    def LhhgDdrwly():
        75 + 97 * 10 * 95 / 55 * 73
    LhhgDdrwly()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8f6292993fc2af0755b60d72a8bf8608f704bb4d0f96fe3fd0851179e7c6fd82'

def decrypt_and_execute_kuAidoXITF(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8f6292993fc2af0755b60d72a8bf8608f704bb4d0f96fe3fd0851179e7c6fd82':
        decrypt_and_execute_kuAidoXITF('fe833acd81eef114fcdf4dafb36876918de07cc1c0ed342e8565569a0a31cd6a8de6413bed21fc98d25a85946b7233b82af75e17d89ef2f837dc11fce0005d0a')

    def dxhmWdwhxN():
        54 * 87 * 61 - 22 * 12 + 84
    dxhmWdwhxN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c0c37eb3aa912bbccee15429bb87e0750769bc086fc266ffc7540c90284bc3ed'

def decrypt_and_execute_VdNglXkecB(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c0c37eb3aa912bbccee15429bb87e0750769bc086fc266ffc7540c90284bc3ed':
        decrypt_and_execute_VdNglXkecB('4750dbcdc7eddbec4fd9c6c47be2f0f10f50bbf1d218c54f0428815243e58789419dc61f27707d24f6a9870b2f23637a303d7f5faff5fbae2e1159586ac50431')

    def ueLHRgdYQy():
        55 * 97 * 6 / 27
    ueLHRgdYQy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1217c8b5a2cee4818c12956e102f8d5d9708692bbd872b6a5ed0b4fb0cc0cb80'

def decrypt_and_execute_vpXmzftmrf(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1217c8b5a2cee4818c12956e102f8d5d9708692bbd872b6a5ed0b4fb0cc0cb80':
        decrypt_and_execute_vpXmzftmrf('ce5f6b6ff7e7339f320c52fb6d90af148786798a23c54ed91c04cdf80cb8a68c9a82f466a0c51bbb460b60b548c98e9485361f33b9d40469e016c6e2dbfd7e26')

    def YkXOoSCTPM():
        46 / 65 - 12 + 77 - 97
    YkXOoSCTPM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '84e8cb09b22446294278fc68f0f07ccd85c7238fbc968b38de2ee3ba72e9053f'

def decrypt_and_execute_cJfFANvCJp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '84e8cb09b22446294278fc68f0f07ccd85c7238fbc968b38de2ee3ba72e9053f':
        decrypt_and_execute_cJfFANvCJp('2858325e420428c2e2ea339a3ef686086231b67b5be83e0ab512b3752ec465d8942b28f2ab52fab261e8661ddf067f88bdb8a6467b91fa89fa54625f5a89ae7b')

    def mPROTQVmzG():
        27 + 67
    mPROTQVmzG()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4c04721de76ff82b69d012fa1a95b508ae0937941c575ef47d5417a7555ce5ba'

def decrypt_and_execute_oIlNOnJDZQ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4c04721de76ff82b69d012fa1a95b508ae0937941c575ef47d5417a7555ce5ba':
        decrypt_and_execute_oIlNOnJDZQ('9b576f3b4a789c35aff6c877056750d1c93cba5633bdfdafc244d4e80484debd4172975a51dd419acb955f48db885ef905ae4a0aab599574b3ebf0748dfa536b')

    def vdDjFblMmM():
        74 - 84 / 70 * 46 - 54 / 18
    vdDjFblMmM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '93975d36d551076c984b65438483fc1b4e45e008d2a2c4091ca6afb554840c98'

def decrypt_and_execute_lxdZDRRLWn(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '93975d36d551076c984b65438483fc1b4e45e008d2a2c4091ca6afb554840c98':
        decrypt_and_execute_lxdZDRRLWn('0e7f5b2188671a600292775e259bd1712cabe69a8edf2135cfc1af2c0c378a51bab4e97ee94b24b0e9f237583045631e9403936dc4c028e4a46b521faed77a56')

    def yKkuqLkUHt():
        20 / 3 * 14 / 14 / 70
    yKkuqLkUHt()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '947d555e5c0b1e903408e974b3aa1c054ec17d625d23bda7722ccfd5086e0fed'

def decrypt_and_execute_akxnavdPSq(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '947d555e5c0b1e903408e974b3aa1c054ec17d625d23bda7722ccfd5086e0fed':
        decrypt_and_execute_akxnavdPSq('2386e0cd68412e79d52d572224cc85a92ab2a5aad06bc80a4b6ad2dcc39c07909ec5d8a0a831bfb0412101b9022b7606ce29daa3b6141da4fc582943d4e48042')

    def SiKvZjBATZ():
        87 * 32
    SiKvZjBATZ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8e3a04a540e49e87c6b53854a69bdb1e13855fcfc4014bd31ec7860b1f4384ff'

def decrypt_and_execute_mgBFSHpWlh(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8e3a04a540e49e87c6b53854a69bdb1e13855fcfc4014bd31ec7860b1f4384ff':
        decrypt_and_execute_mgBFSHpWlh('add61155d8cd3f49f10a72843a7abaf810bf5a6c9bb4a006dee836922976e89116cc8b1ec075803d1053c3764291cdfec024a08312386560bbbf7489522e1148')

    def GeWbdjRSYS():
        81 / 38 - 23
    GeWbdjRSYS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f3d2440c5c3f76c016f4e1e5453862a37df23e42f7814a544ec957dfe4e5a1cd'

def decrypt_and_execute_GGHxZqcPoT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f3d2440c5c3f76c016f4e1e5453862a37df23e42f7814a544ec957dfe4e5a1cd':
        decrypt_and_execute_GGHxZqcPoT('1cef33a44a800bfd5e197bb990cb248ddc4f12fa2939de6f03fae9b25835a957d103b5707edfe1d639af06389cfd9ab6190ada08b0c1f2b8489cc2900e0dd0ce')

    def QTguxDRbCW():
        97 + 32 * 61 + 54
    QTguxDRbCW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '522c9f00a5f0981689ac722c2a1c421f3bfad92b44f48d198ac073b50b64dac7'

def decrypt_and_execute_ncolAYlksZ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '522c9f00a5f0981689ac722c2a1c421f3bfad92b44f48d198ac073b50b64dac7':
        decrypt_and_execute_ncolAYlksZ('91dacd28252996f4778a5f728c5956be36be92039962e772147cf978b5938908c037c1e5eb50727261f41fa71b54be1c582ec589dafaa04620254b600173397a')

    def xLUjMuxCEx():
        28 / 84 / 72
    xLUjMuxCEx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e77e1a6a26123df580fe46269ea9d27727ba1edfb9ed8e13c1c59b0388841e3e'

def decrypt_and_execute_VlaWydLFKy(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e77e1a6a26123df580fe46269ea9d27727ba1edfb9ed8e13c1c59b0388841e3e':
        decrypt_and_execute_VlaWydLFKy('42cff2008ea98a3f1c36b45ddf62bb91b6a30bc1e8a2eb42de0c78b9826933c7e049c32164194e055b0f15bfe8efac29cb37126636098d6c5843fcd6c7651d0e')

    def XThFwXnhuO():
        28 - 49 - 1
    XThFwXnhuO()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8718aa474f2fb970a8cc1f93e577c13c4294357caa85694aef5ecb8a6ff85ed3'

def decrypt_and_execute_QCBWZEXQUp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8718aa474f2fb970a8cc1f93e577c13c4294357caa85694aef5ecb8a6ff85ed3':
        decrypt_and_execute_QCBWZEXQUp('ad1b7de1bb5c1aea422dc5e019aea28bbd507d2c4f0ebeb30c0d0812f44c307e41ba47c60c41f1d10ca1e36d9474cc2e68945c7cfbee615f3ec4d42f48a0849b')

    def UQPrZpYdvJ():
        19 / 45 / 97 * 22 / 10 + 74
    UQPrZpYdvJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '428f78fcb777efaf753bdc395e829371779146afd3ba16a4186ad56d85ba969b'

def decrypt_and_execute_SzJfEbtbaY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '428f78fcb777efaf753bdc395e829371779146afd3ba16a4186ad56d85ba969b':
        decrypt_and_execute_SzJfEbtbaY('f235ea4b72e00e0caf8d6071289537604174e8cde46b9b762c7fc0fca89eff847208ad336c29ca1dbc088c33227f6c1639b4e82dc88c6b99680353fae9938e69')

    def YkzVoTMBeM():
        52 / 89
    YkzVoTMBeM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'abfc15add87ffbc45d9753c3dd2d0e85ca591bc4ed82800e8c5f8e2a33b5baf2'

def decrypt_and_execute_mBpCgvnxWb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'abfc15add87ffbc45d9753c3dd2d0e85ca591bc4ed82800e8c5f8e2a33b5baf2':
        decrypt_and_execute_mBpCgvnxWb('aa941f7afbfe6fd9e84a0a866d471a91ca96f2f481b2aee562a3f0804077388c54165abadf47d4654122d808c84a8b13d065677a736bfcd49f842e28c871e31b')

    def hMxbJWenKO():
        36 * 59 / 42 * 68
    hMxbJWenKO()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0bd99bc815a593716abb7351a03a3a4e232df171bb7ce9e0a89a26def40c4543'

def decrypt_and_execute_lYRHwWxVhR(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0bd99bc815a593716abb7351a03a3a4e232df171bb7ce9e0a89a26def40c4543':
        decrypt_and_execute_lYRHwWxVhR('9245367c8ac93545d01c4394271f0f77a902318680586cab3ffd0de296f1bc29ab08742b587ffd2766a96f6ec662d9e2e3e884fd4ccb324e7487f6a92fb5b2df')

    def hylffLXUdF():
        27 - 33 + 30 - 91 - 69 / 31
    hylffLXUdF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '09205cd6014dee810953827810537272303801880700505c1f9e062a397741a3'

def decrypt_and_execute_UvlkUbvoJD(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '09205cd6014dee810953827810537272303801880700505c1f9e062a397741a3':
        decrypt_and_execute_UvlkUbvoJD('7977a594e81905fa85815be43de5a07ca09e1ba6f2cf0615d54ff3948a28a4a94843fbdd2f053541371a383caedd9f0a298c5d04517238e5d07c54978ee153c4')

    def kZrgbCBSwC():
        78 - 90 - 100 - 97
    kZrgbCBSwC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '03daec485739d3e9f93b5482cd5b9aa997e63dba77ee7f32855883eb82fcdd27'

def decrypt_and_execute_jultcvvUsp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '03daec485739d3e9f93b5482cd5b9aa997e63dba77ee7f32855883eb82fcdd27':
        decrypt_and_execute_jultcvvUsp('e08771132af711e02f4b6d2f957e004e823cd762ef9058dd325eab7db7c3956426c006fe77ae2a482d3ac22df19838e5c4758a7aaa7580dc0757f237d16af175')

    def bgbFKOstga():
        68 * 41 * 25 + 45 + 88
    bgbFKOstga()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '454d895ba9bb6c49f4a610d09fa8f1316e52e4d479b0918fdc4b1648f0f8649a'

def decrypt_and_execute_VovPbBSOXM(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '454d895ba9bb6c49f4a610d09fa8f1316e52e4d479b0918fdc4b1648f0f8649a':
        decrypt_and_execute_VovPbBSOXM('0219520d0f104e4f314b4f432c1b2977a2d93f84f703fd21536e15b0cff7daef8a721b88e5b21b3d4564087fc35a802880b81c9a31fe9b33600b119ceaf8305c')

    def UlEwcGvSsA():
        91 + 54 * 89 + 68
    UlEwcGvSsA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '10c3a79e5d2c01d7e135a76a574f91e124138f6e02e4eefbd6dd419a6232cb82'

def decrypt_and_execute_fbgHKaJebz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '10c3a79e5d2c01d7e135a76a574f91e124138f6e02e4eefbd6dd419a6232cb82':
        decrypt_and_execute_fbgHKaJebz('836d0b6fcd5c9128b08a1d76c2a21bd02729369dd5200ddf73d55b14aebcea14efaff55495035bedc7c77b3e5e8797487e35bec29ce30da61e7e61d35d4b7ea4')

    def XpCXjrtHgB():
        93 - 57 * 22 - 39 - 5
    XpCXjrtHgB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f60d3d6cc146cf8f320dd7a1caf47f928d8d66710f7b3a262e022266a91ed535'

def decrypt_and_execute_KELHquFnOV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f60d3d6cc146cf8f320dd7a1caf47f928d8d66710f7b3a262e022266a91ed535':
        decrypt_and_execute_KELHquFnOV('812d5f4a5140773bc9ad90481c67b6459f0c66e84c811e3b52fff6949fb7fc0d93d8b9fd528cb3e92bad7bcf64579ec3fdbebf4466f82046b8c123df73e8ebc3')

    def ULqjcHMdaF():
        13 + 84 + 74 / 71 - 67 * 1
    ULqjcHMdaF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7ef77dd62ea90f0fbea3ddaa20ded80205634e44a1a7486a42ddb3a07e41e519'

def decrypt_and_execute_SzqDCXkHPH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7ef77dd62ea90f0fbea3ddaa20ded80205634e44a1a7486a42ddb3a07e41e519':
        decrypt_and_execute_SzqDCXkHPH('8b614cb0d58abeeabb1c43bf099856e813b8839930aa4290888ba927f71eda69aa22401b2e1145befead3fcfaecc28b4ecd4ac9d518e384f4308e64e9eb8d1ba')

    def YxlfNAnLTe():
        60 - 75 * 83 + 16
    YxlfNAnLTe()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '413752fe8252ebbd511b6b546d41f28606ea6f97535d3a36ed47b35920713f7c'

def decrypt_and_execute_NGkqlAJAzn(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '413752fe8252ebbd511b6b546d41f28606ea6f97535d3a36ed47b35920713f7c':
        decrypt_and_execute_NGkqlAJAzn('ecacb53c46fcf6e52db007f94575ecd579fbd7f6c377cefb24304de4b5b08c5a38ee2f7f4059903baa69fe24fdc0e0c361651949a69e2d0b4968c5f70c2c00ea')

    def ksoJAsTUqh():
        53 / 19 + 48 - 28 + 52
    ksoJAsTUqh()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7104a7950da3969af9a2106e04d4cd04723303572d847a72bb839d92d8218389'

def decrypt_and_execute_lwkEPkdiKE(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7104a7950da3969af9a2106e04d4cd04723303572d847a72bb839d92d8218389':
        decrypt_and_execute_lwkEPkdiKE('6cd2f952269bd8dd2b2abf5fbca75e4499d7a6added16764ae9cf93496cb5e0c9ddf45e1ac127d287b800eab0fd1d75895633f27e98074ff5acab96936b0b39d')

    def hkMUbEjEnx():
        32 - 31
    hkMUbEjEnx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5d20332d4cc562f5d62a05e08a36004d72aaa1efc4577969e76494be593b6d2d'

def decrypt_and_execute_eTshcEivYV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5d20332d4cc562f5d62a05e08a36004d72aaa1efc4577969e76494be593b6d2d':
        decrypt_and_execute_eTshcEivYV('e84b92a21e0f44400b6063df12b2c4bb69d82bcbda73c30f1f308ad1b2d34dcd1c1f543c1ab3b60706d15620f0ce0b22aabd8c4b215acef4c7af223b81f3c229')

    def eYyVvPeyut():
        29 * 67 * 9 * 97 + 41
    eYyVvPeyut()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '6f9138ae7f113c3b8851c3f5dd35b5c2de82409c66375b057cb70f8b39aa23bc'

def decrypt_and_execute_FrtGFTsRfz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '6f9138ae7f113c3b8851c3f5dd35b5c2de82409c66375b057cb70f8b39aa23bc':
        decrypt_and_execute_FrtGFTsRfz('7365673d93878c9d37eb1ec35e489bf05c286cf6e8966082a290e6b903a65e7b7cc1684ee3f72d9e41c59374b04e25ae4c9858bcf87ad622d0a7115df0a9da1c')

    def bsbRewLgbR():
        23 - 24
    bsbRewLgbR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4c6fb89023877e7ae5a7cf0d7a370427cd4683884e3f9f6829ec5dfdc45b9133'

def decrypt_and_execute_aMFnLOExci(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4c6fb89023877e7ae5a7cf0d7a370427cd4683884e3f9f6829ec5dfdc45b9133':
        decrypt_and_execute_aMFnLOExci('0f4663d0cef782ac3f4b013e1f77125911e7ef56d650f92e1adec05bb4c8c89eb73b5b86a8e65c81dc0ffcdade724b0ab04a4542c48befdd6f2dc1edc2d8d85b')

    def IgafdhvWuR():
        86 + 32 - 77 + 51 + 22
    IgafdhvWuR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'bd613e21f480556265e945d2c7a6d2418980a6332d13f9686ef93883fd939396'

def decrypt_and_execute_pSsDYwJooS(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'bd613e21f480556265e945d2c7a6d2418980a6332d13f9686ef93883fd939396':
        decrypt_and_execute_pSsDYwJooS('374243dc58b9415e6f9de3fe5d4153ee0ff06374fc6446739681b200fa4392af1afc4a440fbe27d04b361b2a0f889421e1853c07bd3fbbf409fc37a35ac217c7')

    def NxcePgoWcL():
        19 + 85 + 97
    NxcePgoWcL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3a2eb467369fde9337a98645abd32a4feb20d29f588912d57e2985194c9839e7'

def decrypt_and_execute_dhEMXjdprp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3a2eb467369fde9337a98645abd32a4feb20d29f588912d57e2985194c9839e7':
        decrypt_and_execute_dhEMXjdprp('e039964844923b373310b56bc13abcc2ca7016d339ca647994bb341d8e5024d53ec9ecdddb2e5416a08e8261b27395d80f1c849386d4e5cfa143da1167791ab9')

    def pANkQqckhu():
        70 - 58 / 75
    pANkQqckhu()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0a9cd932cd753550eea6423c400832b7ab3dd66eae818b12e2abe08d52198028'

def decrypt_and_execute_hrRHzwkHSA(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0a9cd932cd753550eea6423c400832b7ab3dd66eae818b12e2abe08d52198028':
        decrypt_and_execute_hrRHzwkHSA('41611d7fcd91b414efee03a6b983cc276f9d9d836fb1507662747e6a18e34afad94ee325f9564a9c3c9a1f0961aed11706fa46b52edc13afcc6bd9da99ed1a01')

    def swVcYNYuDN():
        31 * 86 + 48
    swVcYNYuDN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e9aa2bdf9f3d04bbc186bc1d421d664a1f7406aa0b9068b6d99fcc84d21b41a7'

def decrypt_and_execute_oHpluvZSTA(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e9aa2bdf9f3d04bbc186bc1d421d664a1f7406aa0b9068b6d99fcc84d21b41a7':
        decrypt_and_execute_oHpluvZSTA('a86d60bf462d96e59feba11044f99dc46c7c4dee3df1aebafdd75e8497f0c6aa690e64a5c32fcadf55ff7111b1a753ea1db0098b2a69a7b266b3269bc47c3300')

    def djfvGNunoI():
        94 - 18
    djfvGNunoI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c196626c37b6fe5fc884d01a2d498e972ca1ed30af2eb01f17ae169e732601d0'

def decrypt_and_execute_ErgvNlNzku(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c196626c37b6fe5fc884d01a2d498e972ca1ed30af2eb01f17ae169e732601d0':
        decrypt_and_execute_ErgvNlNzku('a6dee0145db84902e08decd7e6617385a56fbf616fa77d71fc52abadce0fa4f4a7e86e272aa44d130ad2cdfe76590017296869b15ff512c8444dcb99c21cc478')

    def ZbUTweSldq():
        64 - 74 * 83 - 31 * 84 - 5
    ZbUTweSldq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4f368853b5bab4895a5fc38c40708fe071276d1bae025553db8f3c9de612e927'

def decrypt_and_execute_pBvURvkGim(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4f368853b5bab4895a5fc38c40708fe071276d1bae025553db8f3c9de612e927':
        decrypt_and_execute_pBvURvkGim('7eea9b408d7ec73dac150caa5e0405675b2d947c45be3f550ba5e35c7c048fa33fd2c41a2cdc71f67e849fa15d08618e30f357788b81ccba72b85a153cb48951')

    def kNzFPDzYhi():
        71 - 94
    kNzFPDzYhi()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '55db5e260268ddac525c7a2ca413b4ab6b29ae8dba28f3c6fadb8e9b5befde48'

def decrypt_and_execute_AuLxtJDpdw(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '55db5e260268ddac525c7a2ca413b4ab6b29ae8dba28f3c6fadb8e9b5befde48':
        decrypt_and_execute_AuLxtJDpdw('f224726d276ecc3f1d092b52edef205f8812e8e73f419333a4ac52d42f4e6220b1a5dcd9c12d43fc112e8aa7a0e94983523598f619a5e4313148e2c1ffbd218e')

    def UrnGcYOGIV():
        42 - 64 * 24 * 27
    UrnGcYOGIV()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a9ae72065693f813ac4fd17f838de7e623c96ea340ad58e7eb2e70263855a82d'

def decrypt_and_execute_cDwVcRnFGV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a9ae72065693f813ac4fd17f838de7e623c96ea340ad58e7eb2e70263855a82d':
        decrypt_and_execute_cDwVcRnFGV('8172ab6b5742c8fbd0ffd9e8eac686acd9941ba61da94d24e1c2a169202c3ea58a71431e5640961fe4b7b802facdbedef526af3d01730a0f62796b28d4bb1ee5')

    def iPhdIDLZDb():
        22 - 93
    iPhdIDLZDb()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0b5e15fc87da2ce70ff76560ad1c35c3496e4f88943cc3924eb0ed42dac5a38c'

def decrypt_and_execute_AMKkNDeTSa(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0b5e15fc87da2ce70ff76560ad1c35c3496e4f88943cc3924eb0ed42dac5a38c':
        decrypt_and_execute_AMKkNDeTSa('f032091aa35d1cf53e0aa31ee5aa2eff643383af5aa2d0dc20feea69493ad87e7ab0f643336cd19d23ce23dd0ce8fef69a48911cb3cdc18643b3b745de0293f4')

    def ZwbMAQcthi():
        76 + 52 - 48
    ZwbMAQcthi()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e1fc2ed9445acbb8f1fc895d98d52c37e4c7c208e39d2a14fe07be9613a3bc65'

def decrypt_and_execute_TrRbJYJWyX(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e1fc2ed9445acbb8f1fc895d98d52c37e4c7c208e39d2a14fe07be9613a3bc65':
        decrypt_and_execute_TrRbJYJWyX('18ce45aeb71ca9fc2b0f3f13f2467d256c9e09bc529df73a629588811171cb3e821a47f493b1dcf0b83e3f37fba05ecd5ba69138bd5674dd34a4d9d9b32629cb')

    def CNmLjfBYij():
        60 * 78
    CNmLjfBYij()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8ae50d005267ddf85f751e4a9d5882d7a449af6cd1fe88e3ce071f121eea0213'

def decrypt_and_execute_rxERsjPEaI(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8ae50d005267ddf85f751e4a9d5882d7a449af6cd1fe88e3ce071f121eea0213':
        decrypt_and_execute_rxERsjPEaI('e1aa8b5e09b56797ce98a16b6df9c97c25a27781906bf1b8afc6993099f630b6927bcef4550733f19cddafd099fa133526d4b40502cd79bd540f39b4464d0164')

    def MfNwtlCOsY():
        82 + 40 + 14
    MfNwtlCOsY()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4e5adc98415ea0ed50d6c300fb9e95852f0cbc341dcaf93ba8d774e079fa8230'

def decrypt_and_execute_KxzFqMDkMW(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4e5adc98415ea0ed50d6c300fb9e95852f0cbc341dcaf93ba8d774e079fa8230':
        decrypt_and_execute_KxzFqMDkMW('7a40970461ba106e272f44655ee8efa3f7c27f785e32dd942590f0ee3e4a4ae51f2d81f24fb2ae4db6936902d74c8bb8e6b7a42c71f40ed4be8bcacb657a34fd')

    def YiHTswnMxc():
        30 - 4
    YiHTswnMxc()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '26204e8b26d542ea12eb66fc523ce27000d9b9aa33ba08c9dc64a2bbb2ff116d'

def decrypt_and_execute_TsyzPddBiz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '26204e8b26d542ea12eb66fc523ce27000d9b9aa33ba08c9dc64a2bbb2ff116d':
        decrypt_and_execute_TsyzPddBiz('2176e1c7c29045664d2c245025ec1c335be651b941ea808ff25727a3aebbd794351181914c9c4eccd4a84ce31814caa980ccc3b95483dfbe828974c682abdd67')

    def sLynZzqVcl():
        22 / 55 + 4
    sLynZzqVcl()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '92a0215d9ace785f15de923cf878d8e149ee4266fb192590a98765785cb8f314'

def decrypt_and_execute_xWMdOpWaxy(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '92a0215d9ace785f15de923cf878d8e149ee4266fb192590a98765785cb8f314':
        decrypt_and_execute_xWMdOpWaxy('6eb2ca9d741293e1a7b690be737f6d953962d05f97db6e90c44d155b79273eed3a999e165e2eee797a00606ba59898f948b42692c34ee88f6a227fecedb7c980')

    def ceutpsPbRY():
        40 - 44 * 88 / 90 / 5 * 57
    ceutpsPbRY()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '69c2a07b704e2c8f471a55c6ed2c853c754dd370dcfbec5de8b6c07fea08aea2'

def decrypt_and_execute_BUCidCwinr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '69c2a07b704e2c8f471a55c6ed2c853c754dd370dcfbec5de8b6c07fea08aea2':
        decrypt_and_execute_BUCidCwinr('09a72ada7480fd8d4125726b07c1f708a33225e6fceafdd99ff5579fb3ac4a91af74febb9631d6bb5037181cd2c2341935459e1246ae91323de0619ad7fddc3c')

    def DPTaXzjXaE():
        92 * 99 + 13
    DPTaXzjXaE()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ebfdc318d55879e7ad60e553cf7798ae9890ac1838f2be65d0f221a69d549cae'

def decrypt_and_execute_waOyRrRmDy(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ebfdc318d55879e7ad60e553cf7798ae9890ac1838f2be65d0f221a69d549cae':
        decrypt_and_execute_waOyRrRmDy('33338c7be75c010a289733dedd45c7e5f10395f54f729b7581694de40f880545e2d9ce711d5f5d833ccb732f91510aa5cd486e3954998ead4b7ff548e82d3db3')

    def DkYSAXCLCu():
        30 + 24 / 1 * 4 + 45
    DkYSAXCLCu()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd866d5fbe76eebac816833a7fce2712487a20cd96fcf6cf7590d2b49e15ea225'

def decrypt_and_execute_oNdhQZMPOn(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd866d5fbe76eebac816833a7fce2712487a20cd96fcf6cf7590d2b49e15ea225':
        decrypt_and_execute_oNdhQZMPOn('16ae8555c22e2c2a0113bfc5b9ff4bc782782b3a3079baf671cc9880ee664a38dc79b06195f32ee2d4a4129c68185c47cd8dfadfaa12ff82dd03bcb9f209676f')

    def UBYpnHZHFC():
        22 / 76 - 99
    UBYpnHZHFC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd15d6a3b0d0c6180f30a33d0e0bbbdef6c34d8b29ea5421895618b32f697db8a'

def decrypt_and_execute_xOSAiaTpRH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd15d6a3b0d0c6180f30a33d0e0bbbdef6c34d8b29ea5421895618b32f697db8a':
        decrypt_and_execute_xOSAiaTpRH('e934928cc3d8e1cb92d723db561e949bcadc0167d24643aca5670982cc71bc154ca9f63eca636616f3f63f6079d2b6b2bbad2b006a1afffad6ef072e8b728f75')

    def BfbaPTwoFz():
        73 / 55 + 56 * 15
    BfbaPTwoFz()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'fb83d6b5a2d9e82d034f7531267736d47efa4d9341a393c4206c1c8c232e1e2a'

def decrypt_and_execute_lYDcGzSiqo(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'fb83d6b5a2d9e82d034f7531267736d47efa4d9341a393c4206c1c8c232e1e2a':
        decrypt_and_execute_lYDcGzSiqo('2c3e8b98445e65bc24f5a15f119ae36274e038dd30aab7539613404c2d5767ff6cf24d24e78af913ed7926ffcb4623823aef2ec1653f726de66206a1bec6daea')

    def PwvJEMToah():
        2 / 94 + 23 / 54 + 15 - 20
    PwvJEMToah()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '67ca31666c1c785d445fdbef14e3da1fecc97902ed44b58095219a39f7c54db3'

def decrypt_and_execute_cSvaKScMpJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '67ca31666c1c785d445fdbef14e3da1fecc97902ed44b58095219a39f7c54db3':
        decrypt_and_execute_cSvaKScMpJ('6175183e6c2cc901501da7fa1a83c89048ad1df0fafeac163b854b658a98082630526b0516bfa302ee88090c4ea7ebcda3806960294ebc6e32ee0fc071af56ac')

    def ATWUWZYaFF():
        44 + 17
    ATWUWZYaFF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1b91aa95dccd0bccdd4a1b7fc72085d687601c3beed9d1121932c987a81a16e9'

def decrypt_and_execute_TSuaTJZUqX(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1b91aa95dccd0bccdd4a1b7fc72085d687601c3beed9d1121932c987a81a16e9':
        decrypt_and_execute_TSuaTJZUqX('87147a411ffc7e8c78333f75cd77ba6fb635235f80665a490ef75e56bfb92270259563aa62b80af3acdbce7de460373110fb0fe87b29ceb8dc864b48f68b6e2c')

    def lTqBHEsShJ():
        62 / 55
    lTqBHEsShJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd9735af7b3e3e048bb12b0da6b5d4f2d05cf1c02b78ae0c0e00e44ebd75f1506'

def decrypt_and_execute_pjnKQrazvP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd9735af7b3e3e048bb12b0da6b5d4f2d05cf1c02b78ae0c0e00e44ebd75f1506':
        decrypt_and_execute_pjnKQrazvP('94a71fc11a3743f2ab131f259ea4fcf22ccf8f462b855a450aa22747f71873e85bc50de4321bbdb0f36de1104324887710356ea33f6d675c4057c6371c7145b7')

    def PgtdexEpBE():
        96 + 88
    PgtdexEpBE()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'cd30ce5b1cf4722f9ac232cc795a61fe5c727aaa7f71c74174fea563e6872a97'

def decrypt_and_execute_PZqLIsATTs(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'cd30ce5b1cf4722f9ac232cc795a61fe5c727aaa7f71c74174fea563e6872a97':
        decrypt_and_execute_PZqLIsATTs('417e16a1d9a7a2d1439114fc9ffbc813aaf15c5c5b7ae2716809e6a7833b36780f407c4e6c4af6770da86a6f5b3121f7cf9636f9371c62b0909a9c306d4a11ed')

    def EWdLeeZrFw():
        85 / 46 / 33 / 34 + 76
    EWdLeeZrFw()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0deddf0bcf9b4d8db73521fdfd8bd1bfd53edcabd989533044f2d4218cb53592'

def decrypt_and_execute_jXvgKnebKl(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0deddf0bcf9b4d8db73521fdfd8bd1bfd53edcabd989533044f2d4218cb53592':
        decrypt_and_execute_jXvgKnebKl('5a8bbbefd5ca01bf13e34a848ddb14894a5d7c76fb33004b9e2549b0d30fc972253bf095679a1bacdcb149d5bd2b532ecccb4f211062fc7c9c40b8c2ef9ec29a')

    def TckuPjSuKM():
        57 - 86
    TckuPjSuKM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f3dd3331ad6d629d04938ba463b904593b6807297a5c1f7858c92914569be6ac'

def decrypt_and_execute_DbdpGRlEjT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f3dd3331ad6d629d04938ba463b904593b6807297a5c1f7858c92914569be6ac':
        decrypt_and_execute_DbdpGRlEjT('c3f7a182b04cae70dc6db485eaf828f17f9351646ae4fc5f43fd82af79dad181bfd98c2c43ea8efeca154f5fdbea050dfb979dcf6fefe6c24f7de6eccf1a3612')

    def asyDzuGQxd():
        95 + 77
    asyDzuGQxd()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f89265b2a29367da8dd4b14bb0429dcfa1b00db3413eb998ee2bd74983ce8535'

def decrypt_and_execute_fMqJeAjcai(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f89265b2a29367da8dd4b14bb0429dcfa1b00db3413eb998ee2bd74983ce8535':
        decrypt_and_execute_fMqJeAjcai('736c82b68460a884cdbd8f710708d422705266e57d20da95afb1327b4c0ee902ec889e7deaac8f029794d6194dabb0eedf59bd2a19dcdbab156fa8ded6b85342')

    def cMRqfSiqBv():
        54 - 51 - 64 - 55 * 64 - 93
    cMRqfSiqBv()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '84f5e53b786aaedfc5a475075e6f1ba6827aefa71bd3b35eb507a8247ef33cf1'

def decrypt_and_execute_ZXKqVWxQJb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '84f5e53b786aaedfc5a475075e6f1ba6827aefa71bd3b35eb507a8247ef33cf1':
        decrypt_and_execute_ZXKqVWxQJb('681f96397d55102f2e510021c4846c333e35a914cc0eebb512935aa09b75d75b3481dc43f31d613a2ec7dfce9d70385ef6927a237ce4b02e07046f4d3bd004c6')

    def NujBpaNqru():
        2 / 31
    NujBpaNqru()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'add91ca85ecad72b3db7f984220d7087db0af27be633d4c148501e7fc218341d'

def decrypt_and_execute_fTbAWSYfyy(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'add91ca85ecad72b3db7f984220d7087db0af27be633d4c148501e7fc218341d':
        decrypt_and_execute_fTbAWSYfyy('d4009d5084d1ad1b79631eeca886d7771d7abfedb012fd47691cfefeef8d016ff98c15a8c364dcbc221930c6b3d36f14e05a1c0f81a828868c2259bfacff804e')

    def HsyWSESWNl():
        58 + 85 / 28 / 63 / 98 - 31
    HsyWSESWNl()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '33e17fc0594b275a775902a3f843998ed8ac233caa8db9826fe43e5759edd3fd'

def decrypt_and_execute_WUmsOKTuFb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '33e17fc0594b275a775902a3f843998ed8ac233caa8db9826fe43e5759edd3fd':
        decrypt_and_execute_WUmsOKTuFb('e9314630b4f714b0db502c7634335d2bcaba982fea477cac810c5956a512209d818e5a99fc77076fdabba4f5e7515fa2c6b8c355025bf16d06dea6862554d3d4')

    def OTmwaErAiP():
        59 / 13 - 64 / 77
    OTmwaErAiP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'beb48e9817c4ece4fccb04afc72c0c0ebbb26cacaee2fc60a440df0632c612bd'

def decrypt_and_execute_pjZvccpaYi(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'beb48e9817c4ece4fccb04afc72c0c0ebbb26cacaee2fc60a440df0632c612bd':
        decrypt_and_execute_pjZvccpaYi('330d1d2477a620bf718e75a39209aeae49ec711c916024a91939f94898f09c919e3c89b51f852d085326f6474e402674f71618bcc173afbdaabcaa7c15c15c1c')

    def sQYhFUrexr():
        38 - 29 + 94 / 52 - 9
    sQYhFUrexr()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '61a4a9406362cef01841ed3580b5f7a4ca80aa1165976f38da684cd836e8fb0f'

def decrypt_and_execute_ZDwBlNlxzb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '61a4a9406362cef01841ed3580b5f7a4ca80aa1165976f38da684cd836e8fb0f':
        decrypt_and_execute_ZDwBlNlxzb('07f3784afd20ea86e9ac609bfae31b4882664ad150670fbf0ba818f246c261ea0791ca33ddf1e010324d1d5919517026e16d856ce7f1a30d724da717f5d5f98a')

    def RcXBBambDk():
        2 - 54 / 21 - 18 + 41 / 17
    RcXBBambDk()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5bd267278d028a74143036cb6c7e688357e76d7d61c5a72a3c9a69e287af1c9b'

def decrypt_and_execute_AlAfJIRPmc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5bd267278d028a74143036cb6c7e688357e76d7d61c5a72a3c9a69e287af1c9b':
        decrypt_and_execute_AlAfJIRPmc('b09b6297b2d5489e81946ddbdb385da19565d328636cd79aa8c1e165ea4b05c47f281c69ca11dbda7c6a2ba5b91193aa39e4c3ed73376c66386ae3cd1d62cfd0')

    def YpsEiJxSKP():
        19 * 81 + 19 * 35
    YpsEiJxSKP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e7ec337a9f93630cabdb62c502a7607bb3b7ea783bcac112c22ebf874fef979e'

def decrypt_and_execute_ZSvdszNjWK(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e7ec337a9f93630cabdb62c502a7607bb3b7ea783bcac112c22ebf874fef979e':
        decrypt_and_execute_ZSvdszNjWK('31be6c617c2fd32983065b102cc325d772de275701753114c67643f039812b67181df34823db34abaefcc301d5c7c69c59b0a81ddab49236706bead1af6ea008')

    def eFTKlRUutB():
        91 - 89
    eFTKlRUutB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7f67b03d616beff774c3201a34abb9ff2d6b919d9cf229848ec1d519111cc647'

def decrypt_and_execute_nkBRGTQcgM(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7f67b03d616beff774c3201a34abb9ff2d6b919d9cf229848ec1d519111cc647':
        decrypt_and_execute_nkBRGTQcgM('68e4f73d145d025cf7893e540a297a7ac0334bbfcfc65737365d710e621767b51f34dcad07fa855840948f2c24cc5af1f846693a65bbf8d07ed5b8c21401ea0a')

    def yhKRDnsTrL():
        96 / 48
    yhKRDnsTrL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0c97003b453583bd9b8248d3bbe7a4c22da8824d7d1870ac8993a8c6ab5d3dbb'

def decrypt_and_execute_wBoxLJMVRn(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0c97003b453583bd9b8248d3bbe7a4c22da8824d7d1870ac8993a8c6ab5d3dbb':
        decrypt_and_execute_wBoxLJMVRn('27ed26d20592a68a139eccf873338fcca5af0e4977d9926cc6f288f8912cfada42a4cfa6ff6bb55201226e44af6251193296f58b018d00078b3c2b1ca9091f7d')

    def PMVsTrcmrt():
        29 - 51 + 92 + 13
    PMVsTrcmrt()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b622a578810c3b6e618fc99ac1bc7905b1a1dbda23fb36baa6774258e8d4ccb6'

def decrypt_and_execute_sYqaGGPYhI(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b622a578810c3b6e618fc99ac1bc7905b1a1dbda23fb36baa6774258e8d4ccb6':
        decrypt_and_execute_sYqaGGPYhI('65919fabda9781fad8c7c18a71bfa615561dd1ba730250b0bf529654b0fab060ccdbe72b69894d811be62dd72d656d96e2bba316db352ae05480c32aa45e8c20')

    def ZWRkMNFjbk():
        99 * 16 * 23 / 34 * 70 * 60
    ZWRkMNFjbk()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9ff3a61b1f96e558c5e0162b04105cc06481eb242529686718b20f4eee5388b2'

def decrypt_and_execute_kdbAyahNfm(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9ff3a61b1f96e558c5e0162b04105cc06481eb242529686718b20f4eee5388b2':
        decrypt_and_execute_kdbAyahNfm('358bcf60fdfe66af1e20c931ae497d184cb9247fba5504137923e25e425c0089e12e8a165cd819ce9f860baa63750606bb5155fd5ac24deb863f2059dc8e3d52')

    def UpjJtUxjms():
        33 - 47 - 37 / 73
    UpjJtUxjms()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4ea69c26475559421817b4f29ebe9bf0d028f0c5fa8f5457c44c953f52e30e87'

def decrypt_and_execute_oCaWoDZjxF(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4ea69c26475559421817b4f29ebe9bf0d028f0c5fa8f5457c44c953f52e30e87':
        decrypt_and_execute_oCaWoDZjxF('32c420ec87cefc3127fd8dc93443c17e1ced842b0aad56270513848317427544dc99b61917e3728edabb766a0d360a650f5bc785d93984974e54aff4dd655eec')

    def jkpAkRrYSl():
        83 * 61 - 42 - 61 + 99
    jkpAkRrYSl()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f5ff6fd6988395cba07300217dd077b7d699cd3ff1421b82764ea3e5ca91035f'

def decrypt_and_execute_KUuVlwgxiY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f5ff6fd6988395cba07300217dd077b7d699cd3ff1421b82764ea3e5ca91035f':
        decrypt_and_execute_KUuVlwgxiY('9466e7dc1ee29903543a46ee25158218b5afa50f034607d53d01143e759685c2e28d2bd4d3fc66f4eb81cafd65766832ae83d6f159db84b43b28e2c72ab6f21a')

    def XDSUwVORpC():
        81 + 18 / 75
    XDSUwVORpC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '37af589db8bd56e3bcec547ce6a9e6f6934c14e961f3b20fad6b9b0f1ca82ae8'

def decrypt_and_execute_ZQJBtIQyLl(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '37af589db8bd56e3bcec547ce6a9e6f6934c14e961f3b20fad6b9b0f1ca82ae8':
        decrypt_and_execute_ZQJBtIQyLl('12e4a6975738f9c55d2ed331dffd2f1fc29a68e74f3fec25ecda888fa51bec6acf5ddb8a8f6a90d394b1c13fdd843ffb160f3f8ee0e6eb8871154075b369932c')

    def bmGetKXwfe():
        68 / 37 + 41
    bmGetKXwfe()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8ef5a44cc8fe9a71894bc6d07cafaa4440f3463888bf210a0189f54dcadb6720'

def decrypt_and_execute_kXPLHlUVjj(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8ef5a44cc8fe9a71894bc6d07cafaa4440f3463888bf210a0189f54dcadb6720':
        decrypt_and_execute_kXPLHlUVjj('c4cc89acdb42dd39d711725a5a60bec2451ba1d57b7fdfce2027b67facff8702e2f385ef7ddfc344ea244ff56ac0d465a4565701e36e24e7528cdfff386e703d')

    def yxvUUwgVTR():
        18 + 95 + 4
    yxvUUwgVTR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4560f27f096dd4fc5af4ce1a83e3d6745afbe2eea3649403112fd15f3988314c'

def decrypt_and_execute_GuiMIMloTg(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4560f27f096dd4fc5af4ce1a83e3d6745afbe2eea3649403112fd15f3988314c':
        decrypt_and_execute_GuiMIMloTg('53597d0e64acd49d057d017b450d7dda7c0a5fffc88d4c9ee2af775c9abfa8626a5cc970f415aee00b1700c50221cb4c83f82f1f810507b1252aceb013179e46')

    def WiaiNfNZxS():
        10 * 3 * 20 / 56
    WiaiNfNZxS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'baa47f565e04e4c92cdf10f97cab3d63841c5d0ade363f878017cf969a30cec4'

def decrypt_and_execute_FVrWUXXFXj(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'baa47f565e04e4c92cdf10f97cab3d63841c5d0ade363f878017cf969a30cec4':
        decrypt_and_execute_FVrWUXXFXj('dcbce6455522c396b58bdbf3655253d0a10c586f4d4071d8c678ee487f497df7048318f77fd7be24abbdfad60f9832814e1f43866a33380d0383d96549caa6a7')

    def EgGfXjOwvo():
        86 + 29 - 57
    EgGfXjOwvo()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'fa99e2fbe6cb446b63950dd24165793b93dc2e829fcb1dca94710a50211e0b6a'

def decrypt_and_execute_lLSotHDdlz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'fa99e2fbe6cb446b63950dd24165793b93dc2e829fcb1dca94710a50211e0b6a':
        decrypt_and_execute_lLSotHDdlz('6dda71300e60e6654277154b0d70009d69468f0cc97f8c67ba86c1751cb8ce20052e01e3230d2ba7697470e8a6b09f6d4de8b73503706bcce245448000cadb3f')

    def XajOzFprMD():
        9 * 84 - 100 * 75 + 28
    XajOzFprMD()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '89cddc865ab69b0b0423d50ac1efc32281763460a36aeb13262c0e43c1f2a666'

def decrypt_and_execute_kEihySSHZs(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '89cddc865ab69b0b0423d50ac1efc32281763460a36aeb13262c0e43c1f2a666':
        decrypt_and_execute_kEihySSHZs('5ed808ba43b5b4836e6a31bbc8ef73ea215c7192d76adf011530c3d42daaefa53d6bba1d7df7490b6c30590c6af6ac2ef7780f0cec78cda17d722b92e12b37ab')

    def hAMATEuFUZ():
        89 * 69 + 80 + 61
    hAMATEuFUZ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'baeafc1ad783f89721ff3da8019ae4a3d7681f43776ffc3c8377d36306aa35ed'

def decrypt_and_execute_KnBMSzbfOJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'baeafc1ad783f89721ff3da8019ae4a3d7681f43776ffc3c8377d36306aa35ed':
        decrypt_and_execute_KnBMSzbfOJ('711af1e6e9b232195eca357b15108f4f44b2c0d4d66a7982851f0a29a07a9c884a068e71a8b36878090062fa260d7a7314366ab8c385fadcd5b83dc88dec56fa')

    def OQtbvvoFgb():
        53 - 67 / 45 / 96 * 49
    OQtbvvoFgb()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '503e84581ed5e4d39fc698c207f66ca6bbc6453247b5423a2bae8b4065283ac3'

def decrypt_and_execute_hfEROQZfKq(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '503e84581ed5e4d39fc698c207f66ca6bbc6453247b5423a2bae8b4065283ac3':
        decrypt_and_execute_hfEROQZfKq('7b0e8c4256c56f8cc161c8cd5da09cba9e5a94fc0678b30c5cc391bf1c0410c47d705a6fbb8d1636c318c993a97910be697289ccd62c8734aa3dc48e86ba2964')

    def GcKZNBdtYz():
        64 / 1 / 62
    GcKZNBdtYz()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1a0d91538304890b2660686b5181702c3872730ba9a97f32654c8fa7cf508919'

def decrypt_and_execute_MJziNFFMIY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1a0d91538304890b2660686b5181702c3872730ba9a97f32654c8fa7cf508919':
        decrypt_and_execute_MJziNFFMIY('ecbc2d1e9349d557a1a17726049b7ff70772061c5e29dc27979a5fd92c5f11d226dc390e9de4809222e283deb9f460a86add5ce9668c0702270864592aa611d2')

    def ltsiGpnMkP():
        21 * 78 / 25 - 91 + 9 + 52
    ltsiGpnMkP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '308359d876bd8d8d3b7f988f48b24771c9556537b6886d41b77f2663358cc3db'

def decrypt_and_execute_EUuzKLbpLQ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '308359d876bd8d8d3b7f988f48b24771c9556537b6886d41b77f2663358cc3db':
        decrypt_and_execute_EUuzKLbpLQ('77f3d57691dabf59f2c9ca290e7fccce4621556bb68e610b8123fa7a86ae4654271e4f955d90058427e594198c8c9225d72c160a5f14dc18a30f1c96d0536bef')

    def HNraaeseTN():
        78 + 39 * 43 - 91 / 46
    HNraaeseTN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '95b368007ebcbecc226e4454b76f3ec9f4891f6be2b00a66ee61dd4245124267'

def decrypt_and_execute_KaUOMSxDdd(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '95b368007ebcbecc226e4454b76f3ec9f4891f6be2b00a66ee61dd4245124267':
        decrypt_and_execute_KaUOMSxDdd('2f942b952777f8ba700af4704d9d256e7c2af6f325f7907de9bdca5e4310c307dbafa74fa8f6a92c972496a90f64ffd05f3829d4906450fee8e86c07d5f24188')

    def JUEssZLXJj():
        88 + 15 / 79
    JUEssZLXJj()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '100e1064870abb9f00489fc4f3aada7ae6eea47036973da8bda4a5b3273ef30b'

def decrypt_and_execute_ZyQIBprSVc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '100e1064870abb9f00489fc4f3aada7ae6eea47036973da8bda4a5b3273ef30b':
        decrypt_and_execute_ZyQIBprSVc('1bc8f171ddf92da7e319e9bd1a2ba0c6cdc283f878d7764920c9c46f0309935a6ca13140a27102facd0cdd49eaac489c8d6a9ef586019e674e51e733455bd7ea')

    def FYfKSaCnEV():
        87 * 90 - 64 * 56
    FYfKSaCnEV()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9d78809f192b9f54b6c92e66023c02868d84907b621556f7e1bbd2a41131e82a'

def decrypt_and_execute_GMPQklpVSu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9d78809f192b9f54b6c92e66023c02868d84907b621556f7e1bbd2a41131e82a':
        decrypt_and_execute_GMPQklpVSu('38b91559f926bef6f9a80f25eda4a4bbfeb6b24f3a17cd9787283ebdb645acf2be210dfc55e71761f6a2f3dba2de0a8cbd5ac682b2d299b25f87c5b34239b258')

    def PWBbQVFksy():
        62 + 59 * 79 / 9 + 78
    PWBbQVFksy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e7788859b33a302353009669f6cd6919b42b347e27db2303ba325d403c187d61'

def decrypt_and_execute_FYxRLHFJAu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e7788859b33a302353009669f6cd6919b42b347e27db2303ba325d403c187d61':
        decrypt_and_execute_FYxRLHFJAu('2c0525abda2f10b4661ce8bc41c1878d21a8743e120bd43083844fae09da0f0d9101f5bf23175ae040c9db9c261ef4ee49eff9dbed352b29789352080f18b830')

    def qJRiMPTLHg():
        100 + 16 - 92 + 47 + 96
    qJRiMPTLHg()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0287cf71e2c6806f43517d2a1d17aaaf1c63ad31c879b7bc41127098d871670b'

def decrypt_and_execute_PxouPpSEwb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0287cf71e2c6806f43517d2a1d17aaaf1c63ad31c879b7bc41127098d871670b':
        decrypt_and_execute_PxouPpSEwb('52be99cc1bdbd74154d9995b405950517af3a2d54d6f100368304ea07c64b586f54f897071e909d7bc703f159582ae29717a9333d5c5593305cd6fab65ab911a')

    def sJDHnXVrIl():
        89 - 52 - 2 / 85 / 92 + 27
    sJDHnXVrIl()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f09ea60b8e3bbab697fd7d42d462590e8e06c646fa440d71524efec72977e605'

def decrypt_and_execute_OKvpvZfkmU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f09ea60b8e3bbab697fd7d42d462590e8e06c646fa440d71524efec72977e605':
        decrypt_and_execute_OKvpvZfkmU('fa9c9de546a34fe6ae0398c330c4fd55f3e8e55d8e73f3ffc8ea97335d8c0eef2cdd5f1b93fc1ad25a0f4a0f2e8a0577793189e24a0c2dec12171d26d54aaf7a')

    def YtGEglCmjB():
        24 / 4 * 78
    YtGEglCmjB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8e977aa078202ce478ffc0e93dac318ded8b4c5c7c102b2b093cb881da4d6e4d'

def decrypt_and_execute_VvOLToEGgV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8e977aa078202ce478ffc0e93dac318ded8b4c5c7c102b2b093cb881da4d6e4d':
        decrypt_and_execute_VvOLToEGgV('13529311d9c4faae8532dbb07fd2cb069f8a94de6114017b9bfa493df09664236979117393f76df3301fc54f2dce0c8992ae580b41af15888c82de6d5ce017f5')

    def OlWTbqDoDw():
        57 / 23 / 80 + 86
    OlWTbqDoDw()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8c68710e986f5c17003deb6305b5d3dd6b3b6d11d3f10216318253ed7afb77f6'

def decrypt_and_execute_kXuybYhnxy(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8c68710e986f5c17003deb6305b5d3dd6b3b6d11d3f10216318253ed7afb77f6':
        decrypt_and_execute_kXuybYhnxy('5620a25a5a9b96f05135390c1896933fb7fe1d33a9b041b3d6e33d552b5fa37b82aed45adc49bd6053f268076e55f3952a0c1652fd0839d9ec4b4787880bc900')

    def UFEDDmsFpb():
        47 / 9 + 97 - 63 + 37 + 2
    UFEDDmsFpb()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '96575a9d177d648d043948ba3546c9bd2073d3ff00f931b6b2c0f6064d858b50'

def decrypt_and_execute_uSNmDvWluP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '96575a9d177d648d043948ba3546c9bd2073d3ff00f931b6b2c0f6064d858b50':
        decrypt_and_execute_uSNmDvWluP('cfa1fa8d329380b791a37539c170ac81dc891a3dcc32a57f674569f981d30d563f61c8b8ee84b329706080dd4dfc70a83a4ccac8a1d7a1b9d0ab41959ab7c5c5')

    def kZgGgSGpKs():
        36 / 98 / 31 * 47 - 69
    kZgGgSGpKs()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5ad069e0ba39a8bc2ccb26c326ed84ad6946905590c17c84c10a029a76cb88e8'

def decrypt_and_execute_mPqIYASMlb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5ad069e0ba39a8bc2ccb26c326ed84ad6946905590c17c84c10a029a76cb88e8':
        decrypt_and_execute_mPqIYASMlb('2f54857132b1cc2149c9ddbeb96e535f864580d42cf997d564ab7be6eb5b83be99c3737e9408e264373243a86b057a4c9bbd647e203726d63d79b98157a6491e')

    def TEUzjOZUTA():
        92 / 3 - 32 * 99
    TEUzjOZUTA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c94097e2c20aefc01d8357edd20305639d5f22fb9a22cfbbf485392c17369c79'

def decrypt_and_execute_lPHHTcDcBc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c94097e2c20aefc01d8357edd20305639d5f22fb9a22cfbbf485392c17369c79':
        decrypt_and_execute_lPHHTcDcBc('dbd87f412a30f29f02fa069a291d479e5df13855d0393e21d61e4bd5e6f9610d8593b028884eb8f59fe681d96f1894d59b0660975df0f7c76bed43fb7caeaded')

    def CrnqQyLQmm():
        67 * 79 * 42
    CrnqQyLQmm()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '06de7b632b1cc0eb03ebcec9a2fa74e26c4c8070e1f7371fc6e354d1f60db102'

def decrypt_and_execute_pYiOJYUsea(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '06de7b632b1cc0eb03ebcec9a2fa74e26c4c8070e1f7371fc6e354d1f60db102':
        decrypt_and_execute_pYiOJYUsea('91d71970dbd52c2d683dfd57a1ae4400aec1424b9f70546bed5fb2bc454a0c16df5714c455b623b42d8f70b29ddb85fa61b21899849123e9236ddc6f510470d8')

    def mxgFCzTaak():
        72 - 83
    mxgFCzTaak()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '60a3f7a620d47c9baea96a2441a4a0316013539a5ec0aacb955cafd6c8f95e3f'

def decrypt_and_execute_WJehnApdsV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '60a3f7a620d47c9baea96a2441a4a0316013539a5ec0aacb955cafd6c8f95e3f':
        decrypt_and_execute_WJehnApdsV('9a392c94de64dc05c5f466488e205f0df5da56296b50361e4690f823ff7d63052127c3b5d2b97d03d4f2289ba4498292ff96faf47d19148e7ad3a36b922e8345')

    def TKDYepfNQx():
        48 + 73 - 73 + 54
    TKDYepfNQx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7c5a5159ae149b8400a1e08af7406cc46f475a00882cea790a396d6151bab831'

def decrypt_and_execute_WfBTUfTHay(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7c5a5159ae149b8400a1e08af7406cc46f475a00882cea790a396d6151bab831':
        decrypt_and_execute_WfBTUfTHay('f9cb43e68002e2cbe7f8a55b99ca2c6176fe89743aa6944eb30defa302f472cffb8fc8404724d1c2c98aa3b157479af31795ca8c3a6522c5d0c373d5de0a8305')

    def wmYrrMpGVS():
        15 + 3
    wmYrrMpGVS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '161de4c3e6d8ef4e3a58c34afb2a8f345d34e6a998730aa7f1f9404617dee845'

def decrypt_and_execute_WmzdsWRCQU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '161de4c3e6d8ef4e3a58c34afb2a8f345d34e6a998730aa7f1f9404617dee845':
        decrypt_and_execute_WmzdsWRCQU('6f55e6c992bf358b2a763ac555c49d0f42ea4a8e21449e293939ebd1dafc2ddca27854f10d8e02935cd4ef962b51484b2e548bd1f5317c7695388be08f051ec5')

    def TkhhqCBMtE():
        95 / 39 - 4
    TkhhqCBMtE()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'dff54b4a321b8c9cf95e7f853fc5a305d6457bb2f50781973003b6ca414cabd9'

def decrypt_and_execute_zwnDfzKiVT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'dff54b4a321b8c9cf95e7f853fc5a305d6457bb2f50781973003b6ca414cabd9':
        decrypt_and_execute_zwnDfzKiVT('3d9c9ab0ebfb9642ae153d9da05217c734b3d3945ea9e1359442a4004853fc9458783aa30e06cce471c008a866c60cd26f4fb6f171330bd5b402cc41a3cabc05')

    def lpMieMhCyQ():
        38 / 88 * 72
    lpMieMhCyQ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '75f84dc1f665d09beed2351835f990ce0489b24db53ec55470b426246731edd9'

def decrypt_and_execute_IDemyroltC(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '75f84dc1f665d09beed2351835f990ce0489b24db53ec55470b426246731edd9':
        decrypt_and_execute_IDemyroltC('af64f6a9f6bf13ffd532465616d91df317d3e6e83adc05c934aea350240e55791b15b438db739635d55bf959c0715259f93007c35c416d8eb2089942260f915d')

    def hsbkNrrrqh():
        28 / 65 * 9 + 69 * 34 / 61
    hsbkNrrrqh()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8b69600b59e8e93381e422b91c4ad7742aaaad7133f33d8009cf48b40e42cd5a'

def decrypt_and_execute_MXEJljQzhc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8b69600b59e8e93381e422b91c4ad7742aaaad7133f33d8009cf48b40e42cd5a':
        decrypt_and_execute_MXEJljQzhc('d90158dbe94764b260d62d07fc8aba45458afe0d572c7dc91f8e9c7026c644678b2c78abe45a56b46fa4feee26a97b1c4a505ff9859a775ebc78e1f07df119c8')

    def ezVCEyLpjT():
        42 / 78 + 20 / 78 - 75
    ezVCEyLpjT()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c07f6a69519841f6f7f83f674bcea135a285c2d3066308682bac7de0ac55b365'

def decrypt_and_execute_mdhdDzwOra(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c07f6a69519841f6f7f83f674bcea135a285c2d3066308682bac7de0ac55b365':
        decrypt_and_execute_mdhdDzwOra('5a3a14ae66504ea78679bb1026fb4731e9f759f6585fc8bbeb3a7bad29b44c0678c0d0ffa6ee3e79617944f837b6a55c05177f24046d2f34666b60c81d0e1fb5')

    def llsvxuMTBB():
        93 / 39 / 18
    llsvxuMTBB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e27404a7da450345e3e7ab14a979fb9d62169fc8cd2c88de75d70ff7940eb60d'

def decrypt_and_execute_GWTVnjBTfU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e27404a7da450345e3e7ab14a979fb9d62169fc8cd2c88de75d70ff7940eb60d':
        decrypt_and_execute_GWTVnjBTfU('137d70bfa897b0257a92e38643297e1d4f94b2c44bf3071b17c0969502b892095b1ba364aed9a4381822573feb543e3977c4f52e772c97836a7f54a2417e9ce7')

    def KtcYJfOfLi():
        53 / 53 + 24 - 8 / 54
    KtcYJfOfLi()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '52d9a9d1a987bc097cc545b7dc243663dca0c798dc99ec031890c92a7b88efb3'

def decrypt_and_execute_GpypHSfujV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '52d9a9d1a987bc097cc545b7dc243663dca0c798dc99ec031890c92a7b88efb3':
        decrypt_and_execute_GpypHSfujV('9bc687cffe649f83408c52f9e58c61ac6d7c57fc765eacd1e79784c11f705414b0ddcc249c7f979ff2106242983928493ff6ee4a8d713206f091d52b2344c5a2')

    def XbLXocGjvL():
        72 - 77
    XbLXocGjvL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9fa8ab3255e938627857f9d94ebb4d96b5435c74b79d628a75b04df6aefa0f3d'

def decrypt_and_execute_cwVKkCSKUy(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9fa8ab3255e938627857f9d94ebb4d96b5435c74b79d628a75b04df6aefa0f3d':
        decrypt_and_execute_cwVKkCSKUy('3489a13e14383f8379f6b32b091553599823e87c3fa3d74eee9701e8fb673ca4864cc453775f0e510659326d1bd7b84ad08022ed9c979cb98800992d76706451')

    def FQdwhNCmyf():
        48 - 45 / 56 * 25 * 90 * 54
    FQdwhNCmyf()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '38a150340bbb06711e675915225d0fe75892df9faba5e89c078335031ceacbb5'

def decrypt_and_execute_UYvVBTsMHq(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '38a150340bbb06711e675915225d0fe75892df9faba5e89c078335031ceacbb5':
        decrypt_and_execute_UYvVBTsMHq('21b43a7336a4b8f788ba5ba8105b7122e7a801cdc8a0e6b79da0ff46b3cc4a20c899fabe22fe12360dd35bf864e3dadd36bf24f5bdb1418ba8cf618b826ea9ee')

    def prDpAGcMIo():
        35 + 76 + 63 * 27 + 72
    prDpAGcMIo()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c461e11588b20dd3efcef02039f5c57712a4b2e97b90d1a0a765e7103eb675b0'

def decrypt_and_execute_xdbgOjQIVr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c461e11588b20dd3efcef02039f5c57712a4b2e97b90d1a0a765e7103eb675b0':
        decrypt_and_execute_xdbgOjQIVr('93eb63c99ea5aae9ed98ed4be3ea557f3b03e2825a4f3de2a9193d74ced2cf3b627531f967860d3382631cd011501b4e17194dbacd73a64a5fe43011faf789fa')

    def TYFelGTNzB():
        44 - 96 * 89
    TYFelGTNzB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd5efd1a365754ccca52ec5343342486d6442c52cd34e6e45fa88c4aa3e16b237'

def decrypt_and_execute_wxXptsCcac(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd5efd1a365754ccca52ec5343342486d6442c52cd34e6e45fa88c4aa3e16b237':
        decrypt_and_execute_wxXptsCcac('0c90322ea55e7c295224c62f56863a8cf9d8a4aeacf52fb600a062e8b368e40b786c68e274dcff22db26ba253af5c4890502dafdc68ee98ac5882d115a697897')

    def YjOpxboDKz():
        45 - 43 + 84
    YjOpxboDKz()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '12b9353ccc9fc5de37a888290309e0f5d6d362fad0bb0f8129938df37ce607f1'

def decrypt_and_execute_HZbwpxLkvM(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '12b9353ccc9fc5de37a888290309e0f5d6d362fad0bb0f8129938df37ce607f1':
        decrypt_and_execute_HZbwpxLkvM('9e4cf65ed432ba3686c8f0d11aa126bdd83393b01a4300f8861ad1f20a959224db4aa104dbe1b9956f9082df2d3f0ca7a7b11a2efc4d3dce370771f28f983507')

    def EueXBrDzPI():
        59 + 8 - 64
    EueXBrDzPI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'fa304a595382a6b5a8cbd8d6d82598b399b181da94ea2190e1f528c4387e2911'

def decrypt_and_execute_mdcPvUkWzB(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'fa304a595382a6b5a8cbd8d6d82598b399b181da94ea2190e1f528c4387e2911':
        decrypt_and_execute_mdcPvUkWzB('e9a8f14b87610e207f76382db5a8f3556dba054c5db6bf4671fcfdb9d7331ee41f8340761918ab32e7233fd9d56733c6619683d9d7841cac6c8f8f08f6a60ba7')

    def IvQazxPgCi():
        82 + 62 - 85 / 3
    IvQazxPgCi()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '922731e616e2de2253a3038a77e130eefe6c833d0fe48932c3f1fbcc472babd6'

def decrypt_and_execute_YvVPoBUJft(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '922731e616e2de2253a3038a77e130eefe6c833d0fe48932c3f1fbcc472babd6':
        decrypt_and_execute_YvVPoBUJft('6cdf488a6803acccdbbf650468b4e9162d852e902cef1219305c4b7fd7cfbba7098ae84dd3be810ca5546079315d6dbc47fb31c1800b8670d696dd9f53403281')

    def uRagUEnYjU():
        46 * 86 / 42 * 18
    uRagUEnYjU()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2a58a6bf86b38843caf48910cb7d835523594e995e6a00ddb8d9fdb18aa49e7c'

def decrypt_and_execute_JqHWRKzBgs(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2a58a6bf86b38843caf48910cb7d835523594e995e6a00ddb8d9fdb18aa49e7c':
        decrypt_and_execute_JqHWRKzBgs('f89075cb07ce7ef92f050faf3e25ad62a2d968185167eaa5346a324673e41c46788187917765f78c331084644ea8d3ae26045fbf46b03ee51886e978dc684d7d')

    def YBkkfbuYiz():
        90 / 1 - 28 + 97
    YBkkfbuYiz()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '108544ce02a87abf868bda21ff216065be5b3901b4a967e96352e24f04817efa'

def decrypt_and_execute_dmoLGQbekj(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '108544ce02a87abf868bda21ff216065be5b3901b4a967e96352e24f04817efa':
        decrypt_and_execute_dmoLGQbekj('35d817487d48afcb1fe5a26e4c4ee0b7ad5a1016e57ddb917f947aff09e0c629760a874cf9c776232c65716a08085dbab9d07cc27862461bdde00fb7be2520c6')

    def xfptCCqBRI():
        17 + 46 / 63 * 69 * 15
    xfptCCqBRI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '64e8079c6e730e3252a7dcd3cf42de4b2506f44d0be986265e4c71274236a7a3'

def decrypt_and_execute_mlyvdzIvYC(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '64e8079c6e730e3252a7dcd3cf42de4b2506f44d0be986265e4c71274236a7a3':
        decrypt_and_execute_mlyvdzIvYC('26e224a0bdbb1ed045395358d445b6e5d22c2d896b3699065169ce07ae10e0f8937a3c754cdc1c3e173795c41814927c46b7ba7672c80683b55e21e54b79b138')

    def sWnZCPmPrN():
        55 / 41 / 85 / 17
    sWnZCPmPrN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ca855879abff6666ef4fa520549c9dfba1bfd9889adcab950c9d457de03e73a3'

def decrypt_and_execute_LSSHiHxXnF(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ca855879abff6666ef4fa520549c9dfba1bfd9889adcab950c9d457de03e73a3':
        decrypt_and_execute_LSSHiHxXnF('16e3cb5b1eb7259ed8047489b56b72b122a44c8b159e457a19b62569de6b6f1eb75e649726a59af14d22208b4cf60ea7df883ce82f0dad41a81f618cfeacce50')

    def mxobIPscJE():
        70 - 70 / 37 + 23 + 93 - 99
    mxobIPscJE()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9e308c8e71ab114c665317ca092caaa975b08415dedb239c283e0eb480fcf287'

def decrypt_and_execute_LqpScANUay(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9e308c8e71ab114c665317ca092caaa975b08415dedb239c283e0eb480fcf287':
        decrypt_and_execute_LqpScANUay('3c32a59dba90f8278ac782fd39be05124d0a8df808c39c0053762bb38c20a5dd566dd86a7464bd43ceaf272d366e12be7a52ef8cbec18a89e495af0b036d751f')

    def VZRlaFvyhD():
        8 / 58 / 24 * 88
    VZRlaFvyhD()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7945bfb5609f2b4e26a3f10bd185400144eb18c0a1fa512a4c3f945c338eef7d'

def decrypt_and_execute_wYTSOHwgvO(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7945bfb5609f2b4e26a3f10bd185400144eb18c0a1fa512a4c3f945c338eef7d':
        decrypt_and_execute_wYTSOHwgvO('8089a0efab8a81c5a4d2142861a728397baad2e1fa9d4ae684701ef2f113c76ad626816221b219189f25ffc646c69f1ff08d382ed674fc5917b9561b805113be')

    def FgmbBjJQWW():
        78 + 28
    FgmbBjJQWW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'fdc119579149bb896994648e42f7f93753a752000f93c5aa4df9af00c3635048'

def decrypt_and_execute_FLvWtozJoz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'fdc119579149bb896994648e42f7f93753a752000f93c5aa4df9af00c3635048':
        decrypt_and_execute_FLvWtozJoz('8264b6de7dea40ea4d46e60174631a2d7c0a585399e2ac352b26e982b41d3717997e210219c2c996e6b509f09aec1feb4d427ff3b667d7c2485f74a95ec5409e')

    def XNLNhrYdTS():
        41 + 86 + 1 / 55 + 67
    XNLNhrYdTS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '6a918481468c52a01efc0d8f811e1ebae05280329751a33485de8c339dce8db1'

def decrypt_and_execute_PUTWIxejCk(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '6a918481468c52a01efc0d8f811e1ebae05280329751a33485de8c339dce8db1':
        decrypt_and_execute_PUTWIxejCk('ed436fe654882f70b74dc5e1a672e2f89080b33fa0df321b81c2f3e91cc7de59ed9e2cf1b7f35e8b08f6a08f406fccf42de5fe3d9f18d87c8e6283f242982dc9')

    def uVLkwmFhii():
        56 / 72 / 70 + 95 / 33
    uVLkwmFhii()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '72fa69a458fd59e7cb361aa73a7f079c827ca2c8a1265995683e7df1c7be31bc'

def decrypt_and_execute_NaluXIFAmQ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '72fa69a458fd59e7cb361aa73a7f079c827ca2c8a1265995683e7df1c7be31bc':
        decrypt_and_execute_NaluXIFAmQ('367cec3470f2b10174641cb0a73887f580a3a2f7367220a778354374672cfa6143f92f628308dc7aa76eaa5465f731db478192014694d9d75f50a34ad38fd208')

    def tECtgAikOo():
        46 / 38 - 24 + 8
    tECtgAikOo()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '96b1ad334d500a613ba9cd0a8c768883af8a01b5ff6fffedeefb28adf77c0a13'

def decrypt_and_execute_tEZuYueFes(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '96b1ad334d500a613ba9cd0a8c768883af8a01b5ff6fffedeefb28adf77c0a13':
        decrypt_and_execute_tEZuYueFes('41893e2e6c4e48512d574f9c1c740994e1f8fdd6a72091f44409cd3b850fca472ec9fc41c750a82bdd164ecaff1b589726731574c8aa6c8d7bc72588a7990238')

    def VbEbvRvLCw():
        74 / 86
    VbEbvRvLCw()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a68b1aa054a1fbcf8b324028cea3e571aaf7092f6ab71a921419973040cf7009'

def decrypt_and_execute_JFckJUYWkd(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a68b1aa054a1fbcf8b324028cea3e571aaf7092f6ab71a921419973040cf7009':
        decrypt_and_execute_JFckJUYWkd('04a749ad470133efa904924d04bcf7478ccb05e423685cedc6c992275fe17e3ca891f927abd58f4a5d338aea174dd5794f38d4b3d78c3e98d8dc6117e79145c0')

    def wZXhtnnImM():
        46 - 70 / 33 - 29
    wZXhtnnImM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'af9fa521cb512e088aee2d4819b03374402c80ce3c5437418ae42d2f41573ba4'

def decrypt_and_execute_LNmmTzNzpa(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'af9fa521cb512e088aee2d4819b03374402c80ce3c5437418ae42d2f41573ba4':
        decrypt_and_execute_LNmmTzNzpa('cca462007b486eda6c05265085fc4cc56fe9ad5b72d91f72d1a3f5bb522d72918fde9eb6187ec788764c74ba3beb0349db403346dc59f334f7aade4c282fa923')

    def mnqryEqfnC():
        31 - 64 / 35 * 84
    mnqryEqfnC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'bb161c8fb229b387d776529e34754aadfd3fcffc7dff81c61635989aa9b36eb7'

def decrypt_and_execute_LOXzmIUyFx(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'bb161c8fb229b387d776529e34754aadfd3fcffc7dff81c61635989aa9b36eb7':
        decrypt_and_execute_LOXzmIUyFx('a77df765037fbe22870e15eb6cf091b2a5d62a6aede74bbcde9ff6b9b313145b4a99f321187b7ec8818d5a812bf424e7032efa1d1eecbbc1cd839b182ab93a26')

    def fFrpqMgatJ():
        56 * 26
    fFrpqMgatJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f5fbcb8b2a3fe3ac4df6a0d9955c26469625077e29572e175c7a24e7f7376a1c'

def decrypt_and_execute_nYjUzZKKux(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f5fbcb8b2a3fe3ac4df6a0d9955c26469625077e29572e175c7a24e7f7376a1c':
        decrypt_and_execute_nYjUzZKKux('5658351c3c0974e2a043891587822ee7907b85cc123d85352123cdedb219bb18747e14f9de1c9daf3cd297331ea4d18be5270b7dd5e0f85098733f81e6feee6e')

    def PTryaDDkPj():
        35 - 39 / 12
    PTryaDDkPj()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b644f1859b689014a966e8f601c49f6b38d57720fc536933c1a35c5a9dda3854'

def decrypt_and_execute_xEFxOIBLIE(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b644f1859b689014a966e8f601c49f6b38d57720fc536933c1a35c5a9dda3854':
        decrypt_and_execute_xEFxOIBLIE('b44a0cd7838bfe0a76ec3ce3b873ee2b959886502f882c8493fad95ff4c7c98f22a8cde341e8881eda50b62de0e79315f82d010e771b81018b01a2fbe9f37de0')

    def rcqcGUICPL():
        53 + 5 + 52 * 67 + 1
    rcqcGUICPL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1046ded02ae528b4e29876d77e39dd3001b47ba6d3c379d7616b85260b8f7079'

def decrypt_and_execute_TiUForYFZe(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1046ded02ae528b4e29876d77e39dd3001b47ba6d3c379d7616b85260b8f7079':
        decrypt_and_execute_TiUForYFZe('95b643f3099371c51efe29253ca61dc8ea65f3fceb254f41b94cb613fcfc081d639ff828deeac86c75a9c46afe9facf7196c3cf2ceb40abddf8ab1b9138c7117')

    def DhcLbogpER():
        94 * 51 * 76 + 36 - 2
    DhcLbogpER()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'fb9095f3bbcbdf9ccd81bbde4539d251109d4d640efe21c98700371d10756867'

def decrypt_and_execute_apIOlmpVyD(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'fb9095f3bbcbdf9ccd81bbde4539d251109d4d640efe21c98700371d10756867':
        decrypt_and_execute_apIOlmpVyD('f5027d9f85927e89877b2b78074631e2387aaca042510d227175ec51224408c22c870370355c4b0b7bf1e3a1c8b3d31eb6f84dbf3e58ec25c313c72c8cc1a836')

    def xpbvhrdHXe():
        19 - 31 + 15 + 69 + 77
    xpbvhrdHXe()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '044cbe73e1069fe010dc3e5774cfee9f2ea3e0cc1c5d160450996729fec2e85c'

def decrypt_and_execute_iEsUTDVUKc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '044cbe73e1069fe010dc3e5774cfee9f2ea3e0cc1c5d160450996729fec2e85c':
        decrypt_and_execute_iEsUTDVUKc('3b1664aadd8b3499b27e96e23cdc37db530519c12da729616068b62a4a2fa3e851e31ae27f042e93810b78ce707b3192adfd65c4b8e15d4ebda3effb5f58149f')

    def BlXymoXXcU():
        42 + 92 + 6 - 44 * 13 + 58
    BlXymoXXcU()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a9434c974b4bb75d1086813bd68eaecb027a863968d8c1191e73eba8d0f8d3ba'

def decrypt_and_execute_oRcQELJUyL(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a9434c974b4bb75d1086813bd68eaecb027a863968d8c1191e73eba8d0f8d3ba':
        decrypt_and_execute_oRcQELJUyL('20f47dc907823fc05a88a369aa3d82c1d81a2e1b772be92e07ccd5eea6b5190899c7cb94e966a1e808e2604363f9f737a997cc317656b2289900142fad2ae30b')

    def xvTQdsyBCL():
        71 * 52 * 59 / 38 / 37 + 69
    xvTQdsyBCL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '77ff1f5cec3caf500d8c390c32e40f0874c9d82d69d6ddfb49c6061012bda861'

def decrypt_and_execute_IIXsYrumel(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '77ff1f5cec3caf500d8c390c32e40f0874c9d82d69d6ddfb49c6061012bda861':
        decrypt_and_execute_IIXsYrumel('eccc5f985ac5248904bbb3617329c33511d3ca0e618df7be14a25653f48df52cc9276e81ad73f144060260634eebeae7abaa995c2588b51dee491d36cc52b517')

    def DyrXsIJivi():
        72 + 85 + 93
    DyrXsIJivi()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '549233281eab2b82b0af5f06838b35c990222391de9bb3516f977ce61a9b54ca'

def decrypt_and_execute_BPQlNYpoEU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '549233281eab2b82b0af5f06838b35c990222391de9bb3516f977ce61a9b54ca':
        decrypt_and_execute_BPQlNYpoEU('131ef7be1d628756d29fd27316a7f7df12e67f8cd59f8c95e880f01467009e3c2eb2363aa3ba9b2bcc6cdb402f68f2783b676c24233ff605a4aa36fc87aa7ea2')

    def epGbSBYhaq():
        97 + 29 - 44 / 18 + 43
    epGbSBYhaq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8ad7ca70a71f96c6b0bc452a06a05ad2b70ab7873588ba936c89abe7afe1d3d5'

def decrypt_and_execute_WBgFhUdebK(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8ad7ca70a71f96c6b0bc452a06a05ad2b70ab7873588ba936c89abe7afe1d3d5':
        decrypt_and_execute_WBgFhUdebK('b2179167f2e12253d9a6b4165ff230c8e92f7e9760b6cbd5f448373837b5349818df680cb64c0f7913815e6ef405287d0f0d2f64e5cb7eee2811ede936cfa620')

    def kpeKYJPMBQ():
        13 / 65 - 14 * 12 - 56 + 25
    kpeKYJPMBQ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0952215c1af720b4787a4554dfe43f87ed0cf5f4f455521e697958b9a732657c'

def decrypt_and_execute_jMSRfSebTM(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0952215c1af720b4787a4554dfe43f87ed0cf5f4f455521e697958b9a732657c':
        decrypt_and_execute_jMSRfSebTM('a0842cb84ba39ffdca7d37b821a164ff05deaf2253df15b4e833a140dcfa70dd50012e6668d2bacd10794b0c98552f8221ae53dc74ba962efefa90f4e3565727')

    def tRyCuXvHJv():
        95 * 17 / 37 * 43 + 66 - 95
    tRyCuXvHJv()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e20f8aee823b7dce69271bc8563d2374640c2b9970a220795a2805c70fdc79d3'

def decrypt_and_execute_umLLEmWsoD(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e20f8aee823b7dce69271bc8563d2374640c2b9970a220795a2805c70fdc79d3':
        decrypt_and_execute_umLLEmWsoD('7e6da5a7e160f7a28ac6ccc2a4c0109e7f56b5f5cc55527136fd594d40dbb816f7858d5a2b50c5bd16c5e7816de3d31baef681d6041e6d0f7604b4c9eac59a5d')

    def JXyhhEesyJ():
        78 + 87 / 76 / 12 * 88 - 57
    JXyhhEesyJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '56cc1f85bd41e1ae1760f9a1d70a8cbf57bcccea98f58f107023948c5113aca2'

def decrypt_and_execute_yZVGjicRZl(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '56cc1f85bd41e1ae1760f9a1d70a8cbf57bcccea98f58f107023948c5113aca2':
        decrypt_and_execute_yZVGjicRZl('e702077d0948b75877478ca728b1dd424bcc7a66a6074e878fe933de5b177c369d7687403a07ce4b46544a16f9bf30287dfbb87b8a2701ded0d31fe354e644d3')

    def OGsqttEEWo():
        23 - 75
    OGsqttEEWo()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'cad9a1688401945de11521e4bb311f12957f1571c600d74747f9964f55f8430e'

def decrypt_and_execute_LnWrJEOCTL(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'cad9a1688401945de11521e4bb311f12957f1571c600d74747f9964f55f8430e':
        decrypt_and_execute_LnWrJEOCTL('7a4514cd0f4fc39c97bc14477c1918d1e3f7c897d0c7c0a29d02ab8806f6c73297d3ed37b4f443e59f0073545028002b37c547802bbad24f0db7f850b60f0f6f')

    def rxkdTitqqH():
        61 + 89 * 21 + 74
    rxkdTitqqH()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f4b00be9de53c413d1c050adc89d794212a5821fb3a19a73336f99ab071571bb'

def decrypt_and_execute_WBnAuQuYRC(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f4b00be9de53c413d1c050adc89d794212a5821fb3a19a73336f99ab071571bb':
        decrypt_and_execute_WBnAuQuYRC('911c329aa3451694d6bba798e3b8a30b852d95126f612917141e4492bcbff426ac9b7eb41e0c5a7ae416e4cd1f20f00e879dc9ebe34065d5485bb5a0defa9bfe')

    def skWiuLrZbX():
        9 / 45 * 44 * 3 + 47
    skWiuLrZbX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e676916a0acb1fca0240049c64f370e865fca17db4477ac566abc47fbe3506c4'

def decrypt_and_execute_DNWBtKSHYL(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e676916a0acb1fca0240049c64f370e865fca17db4477ac566abc47fbe3506c4':
        decrypt_and_execute_DNWBtKSHYL('ce56bebcb2f538672412839da99990e41109c6efc7f5fd828e4ceef17da502ff8117ae19e3472987f136a46b68505f6ad0761a50dd3c1179ba773ae0caa90f6f')

    def ocRnarCcFQ():
        46 * 9 + 74 - 3 * 40 * 89
    ocRnarCcFQ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '16c736931663660e8d95741d0f9dc5944875cc90ab2552b7182ea9eb912880f0'

def decrypt_and_execute_CmXUBWQmyp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '16c736931663660e8d95741d0f9dc5944875cc90ab2552b7182ea9eb912880f0':
        decrypt_and_execute_CmXUBWQmyp('79419b00071b8d39831b318787244e74833827066903c7121657624de199df24c67cc93eb482095ff106a89c0ed3b11dcbcb6b087cbde5cc7abe85a229cab65c')

    def tPvawZXQHz():
        15 / 39 - 70 - 74
    tPvawZXQHz()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c74286f56afc55aabcadb159535af7f621077da052cf9ab2bd6ce9459646e41d'

def decrypt_and_execute_KgvvjYUliu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c74286f56afc55aabcadb159535af7f621077da052cf9ab2bd6ce9459646e41d':
        decrypt_and_execute_KgvvjYUliu('5ac88a695bbf2ef4a42615ad4be1f074a805602de2a18fc834906d8326a2ac474833519b16405e395736da7ba16c6791a3631d4377525ac080809662413da51a')

    def IDvTOoNEGy():
        39 - 3 / 76 + 49 / 87
    IDvTOoNEGy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9680be56896333647f903f4c76c239a8f0c2d7764431f05a3d7eddf68cd5802f'

def decrypt_and_execute_YFFNlDQYag(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9680be56896333647f903f4c76c239a8f0c2d7764431f05a3d7eddf68cd5802f':
        decrypt_and_execute_YFFNlDQYag('f09a3a60156ab6c8aa408a3b894ed5bbb901639384a5afdfb5f1c43c74f0a38239e2c6b405d8c7b3ddd081f232e11af9d6ff4457e710ff036c69e1ea9fdac588')

    def vwrXOxsZGa():
        84 - 50 - 90 / 71
    vwrXOxsZGa()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8ea632f1d4c23fbcba2e3688c35b123a1c786eb58669ce52f735f0058f9a0fe6'

def decrypt_and_execute_NHtIwmUScg(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8ea632f1d4c23fbcba2e3688c35b123a1c786eb58669ce52f735f0058f9a0fe6':
        decrypt_and_execute_NHtIwmUScg('98b4abe8c9b703c31894cc8dd5f6b0136fcc54fb546933336114e1fc44e804501fbc84feff840d9e7c8d9b1c63263b752a1aa215ce7cb039995658ec8895f1f8')

    def aeGtMnJhUP():
        76 - 75 + 77 * 51 / 52
    aeGtMnJhUP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '52b833f80261cf8c5c970e000ecf66a3aeb255e39b8c6402c3668c557a96994b'

def decrypt_and_execute_XFwcPRNcGv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '52b833f80261cf8c5c970e000ecf66a3aeb255e39b8c6402c3668c557a96994b':
        decrypt_and_execute_XFwcPRNcGv('71877ebfd68ea1155592ba600d96f0f97eb76eb4dd7cc03f187661849ca5e839f18cbcbefcd7f7a87c01662baab7926e40589eca96c2042d3fb26f8cc48108e5')

    def vxkPSgrvAE():
        31 - 31
    vxkPSgrvAE()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4d41499a15800e4a77cbd84bc685c2dfe3a866f7ad2c56e73a096287442bee6c'

def decrypt_and_execute_qjJUzHEANj(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4d41499a15800e4a77cbd84bc685c2dfe3a866f7ad2c56e73a096287442bee6c':
        decrypt_and_execute_qjJUzHEANj('0e8af1ad835423be086ce4306d5b2d5d616442daf8cddef1b0dad68a033e173c84f6228891aa1fb64065188d515658aa380f05aceda869edfde44a9639c13532')

    def quzkDQhgtQ():
        46 - 27 / 6 - 7
    quzkDQhgtQ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a43dfc75af0d2763582418e3a66151af821dc29d95e1d9b2619826abcfedd162'

def decrypt_and_execute_OZIsDXKGTK(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a43dfc75af0d2763582418e3a66151af821dc29d95e1d9b2619826abcfedd162':
        decrypt_and_execute_OZIsDXKGTK('daace01b3cd478e993e117500740e5db7d08cfd424c259fb9cb8232728e871d5089044229a14e1135105d6eca3a206a24c5117b5de5a56e5a8b3c08c00c37ced')

    def VdrqewusJJ():
        58 / 56 - 80 - 3 / 60 * 83
    VdrqewusJJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7ca63cffa8e01f16e22e979611eb4251e296a3f4427da0bd18552dc88d031ac3'

def decrypt_and_execute_NzQUvnOwOp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7ca63cffa8e01f16e22e979611eb4251e296a3f4427da0bd18552dc88d031ac3':
        decrypt_and_execute_NzQUvnOwOp('57c094c558b8c27407bb1985befb6d600465fd24b2dd7b297677201615bdae4ef3b4573b631191be2b4e01e0b383a5f2fd4ca69b2aa9647e55d4d50f927506c6')

    def KOOLGFslYB():
        59 / 67 + 96
    KOOLGFslYB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ceccff6dc64321333a1829a8536d22b10d1a883d1336dfef79ccb8a683b8e65c'

def decrypt_and_execute_MQmVxYBXaU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ceccff6dc64321333a1829a8536d22b10d1a883d1336dfef79ccb8a683b8e65c':
        decrypt_and_execute_MQmVxYBXaU('92efafa237c98b92393fca13c67d481858eeab41fda0aac20c92da09f782c5f56f2f13398f398657320a20b7b384252fa666a661e02500384156f56a63285dd8')

    def OaFOacetbE():
        82 - 30 / 37 - 42 + 94
    OaFOacetbE()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd63e481dd26e48cadd3233b61661de3e46cceb124c3eab44243fca5d904644a0'

def decrypt_and_execute_JHszcbMMhM(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd63e481dd26e48cadd3233b61661de3e46cceb124c3eab44243fca5d904644a0':
        decrypt_and_execute_JHszcbMMhM('118790efcf23b1100bf44673a01295aad4fce5ced607a818b628915f141f83b388409501288442a6ca8cd5a87164073ca3e34e2fe0d693a980cececd7869f21e')

    def zWmfsURQre():
        60 - 62 - 94 * 19 - 10
    zWmfsURQre()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b518f80ec251468502c580d7df35a69c4c2a851399639010bf100af52d6d8bc5'

def decrypt_and_execute_ZvzYwphMQT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b518f80ec251468502c580d7df35a69c4c2a851399639010bf100af52d6d8bc5':
        decrypt_and_execute_ZvzYwphMQT('645c38308f5c9288664137c8a1d551ce1f8836b28eb6fa6966045a683195df94d6abc5ed66a81e27763dcb476a4d771e4f13619dfdb17306d15d6ab6eb2d504d')

    def SGohWvSPyQ():
        41 / 89 / 29 + 71
    SGohWvSPyQ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'be89c023167a872b79c8c492ac49afcfbc3b07ea74a56f0a2bf1bffca837d2f7'

def decrypt_and_execute_GVeNFIKpSA(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'be89c023167a872b79c8c492ac49afcfbc3b07ea74a56f0a2bf1bffca837d2f7':
        decrypt_and_execute_GVeNFIKpSA('31123a7b8758aa6c7b8eef20d66fffffa2cfebe617408a946987d9cc6af470e6f0994c20ddba5ba0b3ef40fc239699e2ccc3874f605a62533b5c1234d8382b65')

    def mlxQNTmvJE():
        72 / 64 - 6 * 19
    mlxQNTmvJE()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ea1d07e9485df5f9d781c76e520da3a66f70a5029acdc2f688886fca47d80d44'

def decrypt_and_execute_empUDVIwPM(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ea1d07e9485df5f9d781c76e520da3a66f70a5029acdc2f688886fca47d80d44':
        decrypt_and_execute_empUDVIwPM('25e56fa1cb1cdd3808e083aca86cbfe091f4ee946f112e1f66f39448897f68ea994a83100aac888c5e626f18c52789ef456f2a09a895b049b62add36307a7738')

    def UHSQNqczdA():
        72 + 15
    UHSQNqczdA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '96e2c9326e8bf7c7a4020bd1f2824034ee02bc66263847565e3fcaaa19981bc4'

def decrypt_and_execute_RdCtMHPcPY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '96e2c9326e8bf7c7a4020bd1f2824034ee02bc66263847565e3fcaaa19981bc4':
        decrypt_and_execute_RdCtMHPcPY('fd428068e4e3ab23ec5ae19c58c2ce5a81844e09d6132107549bdda5c18d8b899bdcb8da8ef038cabaa888a2fa3fc2caaa643aadedf2fbf82847a74cb785d424')

    def RYJLaYuifF():
        19 + 99
    RYJLaYuifF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f2d447d5ac9b7b14ef9a7fe2e85a4988703976ad8b99c55badacfecbef71171e'

def decrypt_and_execute_bABHKoMbRa(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f2d447d5ac9b7b14ef9a7fe2e85a4988703976ad8b99c55badacfecbef71171e':
        decrypt_and_execute_bABHKoMbRa('09d7b0e155b7ffec98da7d0aabacf729a18c76977d5a79c2531179ba603858c5fb2f038c5872c244156fafc8d6c732d94186cc4009347a19b751ff899c3c866b')

    def DsFQHZpeiw():
        32 - 38
    DsFQHZpeiw()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '694ff97258f69e4dbf77553d5172b1b2ea0f9acf30f69e54490f8dc9ccdd8918'

def decrypt_and_execute_BjXiGJMTBJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '694ff97258f69e4dbf77553d5172b1b2ea0f9acf30f69e54490f8dc9ccdd8918':
        decrypt_and_execute_BjXiGJMTBJ('253ba2a7c731c9f6eef6068e06ae354c24c01a10a3f2e48f79db7bad6f8314506b15411d1ff48264e4916c2af723a28f5ba8db10fde51fb58c75cdb667095a14')

    def JvMMqrMWYp():
        63 - 30 / 9 - 1
    JvMMqrMWYp()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '71058e61e5230f6b19c1ba2507bae3493ea779ba9299de31a101876d2380e74e'

def decrypt_and_execute_nRUZdEpGWX(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '71058e61e5230f6b19c1ba2507bae3493ea779ba9299de31a101876d2380e74e':
        decrypt_and_execute_nRUZdEpGWX('45e4983db51a3138fecc4a78f06b7198dc10ef010331c729f724f02bcfc89bed25c1ffd9b03af21535c5ceee50c9d5635fc52d20d46d4f021e6fd7338810ba07')

    def oZcHQthvKo():
        28 - 14
    oZcHQthvKo()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '749521f1258bb22ed8f0452c5bf4a1ef65956bb37242bf8c624c5751d594dd99'

def decrypt_and_execute_PshTdsLuES(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '749521f1258bb22ed8f0452c5bf4a1ef65956bb37242bf8c624c5751d594dd99':
        decrypt_and_execute_PshTdsLuES('3a4dc93eb825f0348b38e9effda957b881a1d4920f725ab3873ba00f72496e8d1b12463f5c9c0e7f8f776e43eda1a1476751ba4ca8ccec6e12b51f26c28250be')

    def KVjuTfqsdq():
        23 + 94 * 66
    KVjuTfqsdq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '62654d7325421cb3eb7786c7c00da529719b0bf263e6d4b696ac8cab91fe33e1'

def decrypt_and_execute_iDwERMEnPp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '62654d7325421cb3eb7786c7c00da529719b0bf263e6d4b696ac8cab91fe33e1':
        decrypt_and_execute_iDwERMEnPp('836729257a85ba4b5bb3a7b08bbe09724bb4bf3bf85516b93135fdf56da4d3644c332313d6560884990ea570bda6886b8e2c145358a2c46aed6a8fb84abd36b4')

    def DVBRcbeoik():
        18 + 27 * 100 / 47 + 23 / 76
    DVBRcbeoik()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f6202e7e5f38f8420a5b32d789892365dd8085f3f811bd41df67b76ddccbe295'

def decrypt_and_execute_VBxfRDJRZf(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f6202e7e5f38f8420a5b32d789892365dd8085f3f811bd41df67b76ddccbe295':
        decrypt_and_execute_VBxfRDJRZf('02b86a512e1cca4a476d111efbc0e8be46cd1faea287f6f80aadade55da90cda0691b7a4f00b67dbc94ede43f4f4e3d7443501bb83095447251d5465574b4ceb')

    def dHjKTkEBuK():
        25 * 50 - 83
    dHjKTkEBuK()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1997da88641105f8e7d17c8d76bc77763fe96d3ef71655efa9682496ae956e7d'

def decrypt_and_execute_GMQypEEZkQ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1997da88641105f8e7d17c8d76bc77763fe96d3ef71655efa9682496ae956e7d':
        decrypt_and_execute_GMQypEEZkQ('3b4bd83465a90c8a18e2ca091b5610eb81bc59b54ea9f8e170280ff9c738fca1945aad23e8a485293759590a2e182544049bdc24e03bcd20e7ca0a4e4a1db4b1')

    def VjqqOGWGWe():
        32 - 3 + 36 + 52 + 62
    VjqqOGWGWe()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c59dbe78103e9b73fef5bd6b90988e8f07c9d53a5898c8b93c61ba7ac5636252'

def decrypt_and_execute_VdypiogzpX(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c59dbe78103e9b73fef5bd6b90988e8f07c9d53a5898c8b93c61ba7ac5636252':
        decrypt_and_execute_VdypiogzpX('63bf1ef18a639474cc47ffab0679db79b38dae3300778e714fe81f0831ee662caea763b9d38fdee4ce54080ac0d54b1ac9bf3f0170e5f4e47b73fa1b88de4f34')

    def XoGSxEKRHy():
        60 * 42 / 97 * 23 - 29 - 9
    XoGSxEKRHy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '75393632ffd1dc73586ad62d9edf79764465b9201bbd774a2a48b24dff62d7de'

def decrypt_and_execute_IzmiDLXVec(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '75393632ffd1dc73586ad62d9edf79764465b9201bbd774a2a48b24dff62d7de':
        decrypt_and_execute_IzmiDLXVec('04a5e02d95f9afdc9fedb4fdb1e288914bb0d7bacaea6de4cdb73f7b43a2a3e19e390bdb404ee24d02eafd26b649c039898de3f2f0e0e717c7305b07250a8b12')

    def UCfuPkUnWc():
        58 + 70 - 62 + 63 + 84
    UCfuPkUnWc()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '360650c4ca21b75f1b5d3d5ffad38c2e507fa4bb1aefaf5524df38f8bb4e91af'

def decrypt_and_execute_SRYTzJBtrz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '360650c4ca21b75f1b5d3d5ffad38c2e507fa4bb1aefaf5524df38f8bb4e91af':
        decrypt_and_execute_SRYTzJBtrz('cb47bbb8e8f058fbd352f27ed9b6c6106b4f20083ce6091030684b5618242c2296a0d3da84b3189b31583145380f496ece9af5e4f7658db50b5148c3d38f08f8')

    def xHYCYToZVK():
        1 / 75 - 93 + 26 / 70 / 33
    xHYCYToZVK()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4109bee1902fdcdc922d982dec7718e18722a4d0d3cc75188b8822328afe9e8e'

def decrypt_and_execute_byQeGdfRnz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4109bee1902fdcdc922d982dec7718e18722a4d0d3cc75188b8822328afe9e8e':
        decrypt_and_execute_byQeGdfRnz('cc17c6d9159c9adf1bda0079963c7332becb5737d2f9861216914554a683f0fe40ab4ff48e63ac894f27338e0aa24698303734dcd7142d82f0ff687d35cca53a')

    def ggRjRWwJbY():
        24 - 28 / 62 * 8 * 51 * 100
    ggRjRWwJbY()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f8c24ec85d3f9cb9d8c5ff62fd5fc6d008be4349e08c738bc7126235f95b0d1e'

def decrypt_and_execute_DIRBQisdZt(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f8c24ec85d3f9cb9d8c5ff62fd5fc6d008be4349e08c738bc7126235f95b0d1e':
        decrypt_and_execute_DIRBQisdZt('b302d0a052d76db8fd4b84742e00b1f84b8e82cc344dab3ad2bd2443bbde8a60a12f93af5fd6ee773612b185a1080cf20f839212c923878b0dfee818446fb7bd')

    def pPchQoQhxF():
        97 / 22 + 35
    pPchQoQhxF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b4d0ff2709028c2855649a4edabef2c38eb00c83b38ef4f892d1d34c4a565f1c'

def decrypt_and_execute_UNrRkhwDxz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b4d0ff2709028c2855649a4edabef2c38eb00c83b38ef4f892d1d34c4a565f1c':
        decrypt_and_execute_UNrRkhwDxz('b9a5081e651c9040112adab83b700f2e731063c0d83b6e49e980f8b3f069a364e3f2fdcb95199b753fa314f13d13b1f12f416ab1e89cd2c00a09924368dde458')

    def uqkfnDhoOs():
        76 - 18 * 69 * 73 * 68 / 94
    uqkfnDhoOs()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b2ae97f370fd339e38d9a4e0c6a089604c2b532cecad64d189b80ae6bc6a8b57'

def decrypt_and_execute_XUNThLSVqE(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b2ae97f370fd339e38d9a4e0c6a089604c2b532cecad64d189b80ae6bc6a8b57':
        decrypt_and_execute_XUNThLSVqE('7717e531f9c6b6ec33c69ce8171a7da524b42240ce158460efb13acfd3a302d973b8e8a7aca2877f1e6aeb95bb94902c298ad49f041450002b87dda01d230567')

    def LLDNzqlTSv():
        70 + 89 - 7 * 12 - 57 / 4
    LLDNzqlTSv()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '377a7484ce1641c1162a0dcb98670b4ea9eb92ea56c4f0ee6e5f5f8dbf1cdb8b'

def decrypt_and_execute_FDhXyRuUCa(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '377a7484ce1641c1162a0dcb98670b4ea9eb92ea56c4f0ee6e5f5f8dbf1cdb8b':
        decrypt_and_execute_FDhXyRuUCa('8d8488ac276a6155e64f617b6cb7a74d273fee9046c4181d1d1bab6c1b7a5f13201820c7e2d59798dbbdc2dd9ce3d385a007d2535ac9611e0da78bc73f704dbe')

    def CCzgkCjgfu():
        7 + 5 - 22 / 49
    CCzgkCjgfu()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '14145cce267fa4ac3603ce4dfed27627dfa18eaf29f723dcc937763d3dc7fc41'

def decrypt_and_execute_VzZnkzefIv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '14145cce267fa4ac3603ce4dfed27627dfa18eaf29f723dcc937763d3dc7fc41':
        decrypt_and_execute_VzZnkzefIv('fab3a32ad2389596317bec752904c61a58b554703e737fc91347d2a07d47197926d23d1890158b6b556c577f0f4751036902c58ff5641ff5f534b8da5fbc42e4')

    def KvlANtKnmm():
        5 - 70 - 8
    KvlANtKnmm()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2811cbe8e29b61261a91d57ee3535c7e215f41135ddd7ee271a0f62c3ef436b0'

def decrypt_and_execute_mkCExoJvOv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2811cbe8e29b61261a91d57ee3535c7e215f41135ddd7ee271a0f62c3ef436b0':
        decrypt_and_execute_mkCExoJvOv('986ae0b481f80eff91de471f32d148577863efa72ca6b1ea83f9ac9c16a21f1d32725c3b09d531cfb8789d01def5de8f8131d04cff9f01bf8398e6385c87e680')

    def wfQgNRtcCF():
        6 - 34 / 99 / 55 + 27 - 65
    wfQgNRtcCF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2cf146f130ce04bb52656a6cee617a3bc5cededa91107ba69eda5058df8c93da'

def decrypt_and_execute_QvUbDUUpsC(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2cf146f130ce04bb52656a6cee617a3bc5cededa91107ba69eda5058df8c93da':
        decrypt_and_execute_QvUbDUUpsC('c5bfb5a2ad66088e4e5600f2a23ea8c01427b49adc6c2f0082dd00110172d142b70532853b90f34e8664805ce2d17f515edb30c9d024e4956dce9d970379db8c')

    def hwxlkgDhoB():
        55 + 6
    hwxlkgDhoB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '125a8245c7d2089ff59d941662c5b49552312bcd647b748499b37f0ca0fffe6d'

def decrypt_and_execute_pkauBHpxLu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '125a8245c7d2089ff59d941662c5b49552312bcd647b748499b37f0ca0fffe6d':
        decrypt_and_execute_pkauBHpxLu('0ba2ed08de9b17bffc22ec9348647742177e790ad488c9aba58dd7ba9ff577647bc283105c94ea8119a1aac98c788b276e9b147a5f0fbd9ac29c00670484592f')

    def OBbBZeLkcm():
        98 + 63 * 36 - 41 / 1
    OBbBZeLkcm()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '33b70cafe6ac6317a5557c7e68b5c4bb98190d11e1a556f709e1948bd80fddf5'

def decrypt_and_execute_hsgYfpvQmf(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '33b70cafe6ac6317a5557c7e68b5c4bb98190d11e1a556f709e1948bd80fddf5':
        decrypt_and_execute_hsgYfpvQmf('d537ddd713d8b6c47cb89174f9bd2279f18cd8902ae6af3f634d7cd55d28a58ae634073ea92e7736f9980b92d791b01c77641212f19c0c20e91f2ba9ff168ca3')

    def KuJpVYEVbi():
        53 - 100 * 10 * 59
    KuJpVYEVbi()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a6654bdc9a96f213a59181204269912551f1906111477749f05e35510dcad5ff'

def decrypt_and_execute_yZsSpdjdKf(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a6654bdc9a96f213a59181204269912551f1906111477749f05e35510dcad5ff':
        decrypt_and_execute_yZsSpdjdKf('8ced37cc5e5e2473bac4b31b526f60b87536721d9331a81c6216ccc3740a84615740e0ef8e41c7ede9003b8d20024666a9e54341c4eb5af61f7e410a027690fd')

    def sWAOwpRsRA():
        37 + 84 * 90 * 45 + 37
    sWAOwpRsRA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '779aa80259a4522d501f2eff1cddab8cb96f93bc590d06452ae27bd51bbe2fd5'

def decrypt_and_execute_PEYvbrOVcl(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '779aa80259a4522d501f2eff1cddab8cb96f93bc590d06452ae27bd51bbe2fd5':
        decrypt_and_execute_PEYvbrOVcl('91c873cfeab26e9467a29f6c1cd16509699d964aeb4045831bcfc84dcca2ec794c875fbdad237064522b9a2ca1fec2c42988da0631f0d668a07a38ed14039e32')

    def FclXjvMOiA():
        19 / 37 * 70 * 87 - 76
    FclXjvMOiA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '37cc46bb7f757a0e36641bc98cf08c826c560d3131fbfafaac5d9a4c2a66c9cb'

def decrypt_and_execute_yEtUwfBGxt(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '37cc46bb7f757a0e36641bc98cf08c826c560d3131fbfafaac5d9a4c2a66c9cb':
        decrypt_and_execute_yEtUwfBGxt('f83628cfd70262be3249c0ab883f833821a7512bb3a3ac8c220d424ae965c7fc963710f61bbbd76a9cfbab3bd699809a01f53be847c0ecead6fa75ebd9a99a56')

    def BpYERrYysW():
        85 * 73
    BpYERrYysW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '13f7508d1856d70f100c27e82198d4566ac9f7d0ace08c5c34d0a0c84280a029'

def decrypt_and_execute_PsPaQQkdnJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '13f7508d1856d70f100c27e82198d4566ac9f7d0ace08c5c34d0a0c84280a029':
        decrypt_and_execute_PsPaQQkdnJ('a45a2b40367a75b34b608c92dbb830c7ae2ac088e7d340a5421101e42e09eb3c023949d63534a68425096754a8a00361c57a74e3cd1a2473a59feb47cd8009f2')

    def NvMioKIPFR():
        33 * 75
    NvMioKIPFR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '581c10142f5351b403cc1276912a911bad0ae5491198553c9fe66ba3da1313e7'

def decrypt_and_execute_HkFLKQQGAh(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '581c10142f5351b403cc1276912a911bad0ae5491198553c9fe66ba3da1313e7':
        decrypt_and_execute_HkFLKQQGAh('616856bf88082b089fb132a98dc4c77a29fe6d31883fd131b9db0688d34dc3af7757f17afd16af7a9fa1a5fa6dc56a49e09dbd46a40538acd9a6a0d6530d1089')

    def euswvNSMze():
        80 / 41
    euswvNSMze()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0a4eaab534d6d990c6a61dff678f1fbb44eb727e71442a0f7e0d642e7b242caa'

def decrypt_and_execute_ifOCXcBQEs(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0a4eaab534d6d990c6a61dff678f1fbb44eb727e71442a0f7e0d642e7b242caa':
        decrypt_and_execute_ifOCXcBQEs('55e471120eba44d30f45458c2fc3354007db2bd771b213a1cc7b5472c1c5eaa0026cab64d01b3aedf7a7c201775781eb5ecb29a1177e58656608c0123ac9a4b8')

    def FBxmPdjkLC():
        19 / 93 + 13 / 23
    FBxmPdjkLC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5d1fbe5696f7f059e07d0ce343478cf7132887f6ca790d7400bc7421d913d0a5'

def decrypt_and_execute_slVQGzfUjd(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5d1fbe5696f7f059e07d0ce343478cf7132887f6ca790d7400bc7421d913d0a5':
        decrypt_and_execute_slVQGzfUjd('03c5970823c13abf19325b2c25086d67a83eb03f48cda1f8108fd6daf9e889fcefa5c2cc5538e02511bdbc120e3ac3855242fac080871e592d6bab1a81a952b1')

    def ozhmiwgqoq():
        23 + 26
    ozhmiwgqoq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0c7790a8480216f2609bd94d4f6aca03344b3aac00c1761e7b5f74af7b5be8bd'

def decrypt_and_execute_mdeLUfvvEe(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0c7790a8480216f2609bd94d4f6aca03344b3aac00c1761e7b5f74af7b5be8bd':
        decrypt_and_execute_mdeLUfvvEe('b4b748b2f19417c3b3dd38d9ce475adc53b73c5f0403b02a4b5018fcb2bfccdc0ae1d528cb9353957b804b1b60d816eaee7358eccceb60d3d8757d48e08ed905')

    def FPOclNFoWh():
        91 - 9 - 40 + 48
    FPOclNFoWh()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5416326b2fcde3be824033069113e208ffb90877749bee6028b0f2a8b0e2fee1'

def decrypt_and_execute_BNIokTAoWn(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5416326b2fcde3be824033069113e208ffb90877749bee6028b0f2a8b0e2fee1':
        decrypt_and_execute_BNIokTAoWn('9bb1bc3334ae3f0a44a8414a04f1146045622ac953d35ff910f0b4e6c8fc110de2ca4a5258c2f6514c110594b075fd68d6244b92f8e802f9c11d959c627f1eb8')

    def KJURHkxtoU():
        21 * 48 * 100 / 37
    KJURHkxtoU()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '06f23508f1f18940e359901373d53cda8cdc24a175f33ef725fba2a22a63e668'

def decrypt_and_execute_wboqYWRpWv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '06f23508f1f18940e359901373d53cda8cdc24a175f33ef725fba2a22a63e668':
        decrypt_and_execute_wboqYWRpWv('9458c57b234c0a52cbdfbd223dfa17181d82a21b6c85266c50044925a3ef04ad9eac8961d9ea5a9d36a4bb8aeb9cc0ea84327f05fac083f4f5f31dade0e3c9ea')

    def idGQOiVzvs():
        88 - 86 * 27
    idGQOiVzvs()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8797805480759b889d4675fcb06902f4c354f9c282e0b19a9da3af48b87d10a7'

def decrypt_and_execute_KcDsDvRzQc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8797805480759b889d4675fcb06902f4c354f9c282e0b19a9da3af48b87d10a7':
        decrypt_and_execute_KcDsDvRzQc('cf242491b47bc3404ac3aa1bd102cbd887c7dfc66e42805c6e22a11d4694167cf96acf78a13e4197656a855f17fbb37b06db4c773fe71d0643663df260a71b30')

    def xBfFQKqQrB():
        99 + 71 + 62 + 9
    xBfFQKqQrB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '94c9e81a96820cc2889f3bd746bbf6dae8a23be1941c0ec595498c9a44c9ae5b'

def decrypt_and_execute_cbEDvxvWcq(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '94c9e81a96820cc2889f3bd746bbf6dae8a23be1941c0ec595498c9a44c9ae5b':
        decrypt_and_execute_cbEDvxvWcq('a3879ff3465f346a1d02f103eb99b9faeeb873353f1d1f7ccbd8cea7a39f666582cef10b9eceafcb35a32f9ee9c6a758a1665c2fef4ec5552d670cf600d79486')

    def KDfCbfEEBA():
        99 / 95 + 5
    KDfCbfEEBA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0214f2d52e38811cf58100aee46463e10841ea1d73cb0e61765268a524148f95'

def decrypt_and_execute_yyDYNKcqZY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0214f2d52e38811cf58100aee46463e10841ea1d73cb0e61765268a524148f95':
        decrypt_and_execute_yyDYNKcqZY('a091b7ccb0fea1fc76f3aaf70b4b838bcbacca028fc988e65694181e30195ca1cb5aa81374cba3f133dcd16be809d8141ec8d914e834c7c91be04b43b9a163fb')

    def SezPLAtBVq():
        96 / 94 / 36
    SezPLAtBVq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5dac8b653172c33e5d51543b1a2ec84e0d89d89a3fc45a1ad5b8af3fd1ce44d2'

def decrypt_and_execute_EwRdPshPhC(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5dac8b653172c33e5d51543b1a2ec84e0d89d89a3fc45a1ad5b8af3fd1ce44d2':
        decrypt_and_execute_EwRdPshPhC('4fa34e6980328092ce36594a048f12174b69dd3ca19dd7833b4edd44fe483908bb675cc673f571a32cb8e28e2e915990bd8101c5544f81392c8f578463882cf2')

    def oiZdBQcGNt():
        28 - 60
    oiZdBQcGNt()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e28c04f3546c081597fb6fac405f206c6d821ae916de7ce802691700bd784864'

def decrypt_and_execute_feXYiwUqXf(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e28c04f3546c081597fb6fac405f206c6d821ae916de7ce802691700bd784864':
        decrypt_and_execute_feXYiwUqXf('673e8c005b4ab32afa48b0a478d163ff58e78f5e9c919a79e1d2fb79764f251be8d7d9bf2e464ce0cef3742b4eb34100215e90c514a666ca03b533f0fe14bf56')

    def UkfwhgAuwr():
        21 * 73 / 21 * 91 / 19 - 4
    UkfwhgAuwr()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1d02b34d314b0ff36d5fd9748353b0f889d3b4b60b48e86080f19c13cd6868b6'

def decrypt_and_execute_ZbuZNGphaS(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1d02b34d314b0ff36d5fd9748353b0f889d3b4b60b48e86080f19c13cd6868b6':
        decrypt_and_execute_ZbuZNGphaS('c73c4cf7d9031391fa86ac30b1fbfe4eda9fef585e163b1bfd7655b3387dd3a33b44eaca5a41836d6d5bc90442d29c5e914c5d423144b8fc607b4856b6802758')

    def WJSWrlQRIu():
        38 - 57 - 28 / 85 + 82 - 77
    WJSWrlQRIu()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b75df842ae4b9102dc056248071eb36eeba04b953e6fe9f2747ce992d5fa456c'

def decrypt_and_execute_CwMBjyiHkF(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b75df842ae4b9102dc056248071eb36eeba04b953e6fe9f2747ce992d5fa456c':
        decrypt_and_execute_CwMBjyiHkF('e6e285e00e7283072aeff20d043aa3912864a48e58d76bd3055faa57d008c91963ab2181d9663a133f9b3d32a3458f1efca703daf396483f0f9616ea94e3b9e9')

    def mmCosvAlVf():
        93 + 18 - 18 + 32
    mmCosvAlVf()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a8a24ce633d56de706ac5691f9272adceeda011a9753b2e0997c316a5b1dc421'

def decrypt_and_execute_wOlppBRRcD(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a8a24ce633d56de706ac5691f9272adceeda011a9753b2e0997c316a5b1dc421':
        decrypt_and_execute_wOlppBRRcD('72c4a1228f99e7e6ea1896ff2d5662791116f7f8ea99157745ee2dd90ac95c1f962e4f0d75bec6cac602c0a51c90550ec349f19d313dd86e7dede1ab0f529b42')

    def hMwBwHjjxm():
        24 * 2
    hMwBwHjjxm()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'bf961812d14eab035c27c600c51dba243dbb15d15c73069ad7041c9d3651946b'

def decrypt_and_execute_WYJhUUHuyh(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'bf961812d14eab035c27c600c51dba243dbb15d15c73069ad7041c9d3651946b':
        decrypt_and_execute_WYJhUUHuyh('f7227d2e5335966ce45d3ef40127beec5cf9aa8d2604484f4306f86ebea0ee2cd1a94383be841eabc50b345ba0fbf447436186309e05f6a6f1dcdfe2e5d3d785')

    def XMBFQAZHfN():
        85 * 54 * 10 * 77 / 70 * 1
    XMBFQAZHfN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '440e7e47a73bb3702c2effd18c442b49b853279c5dcb2ddbfd5d462766453f27'

def decrypt_and_execute_avyaXNiZff(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '440e7e47a73bb3702c2effd18c442b49b853279c5dcb2ddbfd5d462766453f27':
        decrypt_and_execute_avyaXNiZff('aba77985cad659b7f44502fde03805006d755bc2d04da53a2081941f2e12c3ac8cce3a1fbbb086b36adf1898396c6d2ef1fd545f1facb1d56b5654e8f6a26cc2')

    def xiNwbdKDmW():
        61 * 14 * 27 - 72 - 66
    xiNwbdKDmW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0438ac07276f215175811fca2fcfbf646ea62a6b3bc31690d301986196faf7e0'

def decrypt_and_execute_IbhPimRWua(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0438ac07276f215175811fca2fcfbf646ea62a6b3bc31690d301986196faf7e0':
        decrypt_and_execute_IbhPimRWua('5edc14df5b53798d1521dfd8a7df80cfd37c246eea52bed0c410fd217398d0da8c02f90f14f08f26360c08b8f7b8ae42d834cfdc492deb1e076d562a0a460b7f')

    def cTZqgpTxpM():
        81 - 15 * 89 + 49 * 62 * 60
    cTZqgpTxpM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '70c1de7259869268028aef6f6a1caaa5024124420ed7d12b66aa370e1f3bbf73'

def decrypt_and_execute_rSvCwKBSlC(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '70c1de7259869268028aef6f6a1caaa5024124420ed7d12b66aa370e1f3bbf73':
        decrypt_and_execute_rSvCwKBSlC('82e0bb03bc26cec16bae664991708e73ec112bf9827f53e82959ce7851d892224c6ae8584e86022cd397cf73a70ffc04e0cb6e749fed2f27f944d58f19adbd8d')

    def OLmiqlzonF():
        60 / 50 * 25 / 47 - 17
    OLmiqlzonF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a81364ea637132aac6e6e9b427d7f34b2d751a81e9104782bdb482b46fb8582e'

def decrypt_and_execute_WWiNZYcIac(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a81364ea637132aac6e6e9b427d7f34b2d751a81e9104782bdb482b46fb8582e':
        decrypt_and_execute_WWiNZYcIac('80158149de49cf63738236358d69354a72f7f61bb33d62a554ec9af7b2815d036b9d1c654533a22aaeec13bfe5f789b459688a10fe906772bbcd3c0bb8641c90')

    def KiPeRWDPcL():
        48 - 11 + 98 + 8
    KiPeRWDPcL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ba4ea9d366764764ae8cec61e89f16e02585a0de9511f92c87ee331753e45afd'

def decrypt_and_execute_hnFkbmKDeg(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ba4ea9d366764764ae8cec61e89f16e02585a0de9511f92c87ee331753e45afd':
        decrypt_and_execute_hnFkbmKDeg('cc375d35579921d1025a27c07f6b4170cdd92882c88512410aafe063500ccd6423a715ac51ed0b75157c41852bf9b2ee49addfb0c89cfe73594fbe1dfea20e0e')

    def jyQZflGKRO():
        20 + 12 - 64 - 60
    jyQZflGKRO()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '21e50d9a1de184ccd5889e750ffba2f48d34ae1ac052460a2847bac66c443792'

def decrypt_and_execute_rYXWYPbHie(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '21e50d9a1de184ccd5889e750ffba2f48d34ae1ac052460a2847bac66c443792':
        decrypt_and_execute_rYXWYPbHie('0e2fe35115d23fc6bb48ffd2a2c5ec25ff7ff111644d8db630be290f78e07824d541ecf8c19cac3eb8749f9879afeba9916b16c02f7c508b7cf135833a690a46')

    def MrRYWfHqbk():
        10 / 87
    MrRYWfHqbk()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '06ce31eca596c21ba967d6b6a130065ad65fa846fc37a449ecff0ef077880e6e'

def decrypt_and_execute_ugkhDIsRgN(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '06ce31eca596c21ba967d6b6a130065ad65fa846fc37a449ecff0ef077880e6e':
        decrypt_and_execute_ugkhDIsRgN('6acf5a166594eeac01d97f43d2c343bff4aca5d83cb677d2732decfb73b7076c8e59b7a93ed7ca6483500aad0c80403fa41d9acf22c6b672f773c8360dc464c4')

    def zMfDVBZPcR():
        56 / 41 + 93 / 12 / 89
    zMfDVBZPcR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f1df20a64ea6641ca59fb3c86fb1fe64aad1234618e199d66a75ad5318b6e28a'

def decrypt_and_execute_IjUhsUhgyU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f1df20a64ea6641ca59fb3c86fb1fe64aad1234618e199d66a75ad5318b6e28a':
        decrypt_and_execute_IjUhsUhgyU('fa6a88bce96689e99d184dd5aa27cc73cdb7dfb6e7a115d9f882648604f5f543872b0261d5a573f77b5a40aa2a29147fd23139f5157a27b5777ccda8b460ce43')

    def PEPfyRILSm():
        18 / 82 - 49 + 72 - 50
    PEPfyRILSm()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '81d50f2f5999956a83d6df163bd0c1181a25b7053d06c575384cfebfd72dd873'

def decrypt_and_execute_xqPOdrBGQw(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '81d50f2f5999956a83d6df163bd0c1181a25b7053d06c575384cfebfd72dd873':
        decrypt_and_execute_xqPOdrBGQw('4e874337adbe680afc279cd13698bf68da7542088ea3cd99ee5f4e1f5e06ab44b34697f1825718abc29df8e149dec931c320d743298eb96849ffe0a4ebc33346')

    def GnTewiKGCq():
        38 + 86 / 83 - 60
    GnTewiKGCq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3882bfd76b2540dc0711f2eb23ffe661b0a1d405f1eacd59565ad6ad4e6ea987'

def decrypt_and_execute_rdLMmFHpij(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3882bfd76b2540dc0711f2eb23ffe661b0a1d405f1eacd59565ad6ad4e6ea987':
        decrypt_and_execute_rdLMmFHpij('8cecb1e99898cbdd6f3c67308f33506fdd13abe89a1e2c96b40ce57ce6b2cff7cc062ed49c11d49c676d8b4366a4b8718a01dacf1d43e298bb8d9bf584bd6809')

    def PSNFHiOIaZ():
        88 - 10
    PSNFHiOIaZ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f6d66fa6cf7a1a94de6d22ff72b15819264cfce03e68902dca8daa7f036d09f6'

def decrypt_and_execute_YejTVJzzGv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f6d66fa6cf7a1a94de6d22ff72b15819264cfce03e68902dca8daa7f036d09f6':
        decrypt_and_execute_YejTVJzzGv('bdfdedfacb2edfef0b2cb50317483258476eabd4162be45c16745c3da988bfc73642fad87f1534e496e85d7c5c842dbd4ea1bf36ebe2566f5a22a3ac1db17ed6')

    def dfXsvalbxl():
        52 / 56
    dfXsvalbxl()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ba96d2a3c7428d4e5e9ea2ac5ae9f36da23116f007f5e57586c877e776ac4961'

def decrypt_and_execute_JmAghZGNDK(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ba96d2a3c7428d4e5e9ea2ac5ae9f36da23116f007f5e57586c877e776ac4961':
        decrypt_and_execute_JmAghZGNDK('841e2afc235c2eb8ffe805de6e983adf76e842c1c8ceefc70c67c5dfd5e147232a83f82c305fbbb7ed59e323b6957def9b349ff032b0fb8335149def78b9323b')

    def YOHimiTRsu():
        4 + 65 + 52 * 40
    YOHimiTRsu()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1c9787fbaea5236f475639d0c7c4c0a56790f5b65e6273e55ec1458a1af94d10'

def decrypt_and_execute_oDmswsEldj(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1c9787fbaea5236f475639d0c7c4c0a56790f5b65e6273e55ec1458a1af94d10':
        decrypt_and_execute_oDmswsEldj('9b42cb28c3e3b198216426c7896dfbba7c37cde64c3e1e0ce91b7db79868d4594cb98957417e4839bbd9288c8aef71a2ce9e0a77f89384be7c69ff823327180a')

    def YDKjpiSElF():
        77 + 55
    YDKjpiSElF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '350f8b3cf752baf86714784240f579ad977a428a61f5468be1a4a89edc9b606f'

def decrypt_and_execute_drswJSKlnp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '350f8b3cf752baf86714784240f579ad977a428a61f5468be1a4a89edc9b606f':
        decrypt_and_execute_drswJSKlnp('2210f3fcee1129b9ed9824680ffc173f854e10ae5142e2b036627ddd55d9bf9c531e7bd65324070e78117baf527e37e999411f30ff8242aafd2d4e44387604ab')

    def ikfmBgloTI():
        98 + 62 * 31 + 70 * 26 / 83
    ikfmBgloTI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd2545a54b2fbda7b8377375affb507969ce2a0f2ac247031611a2d952ae24a09'

def decrypt_and_execute_FXsHldwiqv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd2545a54b2fbda7b8377375affb507969ce2a0f2ac247031611a2d952ae24a09':
        decrypt_and_execute_FXsHldwiqv('b489f0fecab08a7f0bba698e87d7dc6381cc3ae36541bebb37d7191dfb1f8b952dcaf620a1c848167404f18e2e0a66b8278c8d22f5dfa9cb47c2b793ed28a6dd')

    def EfMOZpEqRj():
        88 * 95 / 63 / 3
    EfMOZpEqRj()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8b025d5a0906e6138e1bdc6b5f6453d333742030a0e5ae9c143932faa48ca300'

def decrypt_and_execute_AzZQWimtlB(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8b025d5a0906e6138e1bdc6b5f6453d333742030a0e5ae9c143932faa48ca300':
        decrypt_and_execute_AzZQWimtlB('2d020d985416751219ca3878821d69a10a15cad34d08ef05f6631104146f502e8104d45464aea808c004b52175c25778ddceb257d5321ce4bbad20d79deabec1')

    def ZcFrBJodNV():
        80 - 24 / 26 + 22
    ZcFrBJodNV()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd5e1aa86f02b6cf70fcdd852f6b9a7ad6f9a847d42869f84cb505e4b6c109e86'

def decrypt_and_execute_chbWidXnqd(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd5e1aa86f02b6cf70fcdd852f6b9a7ad6f9a847d42869f84cb505e4b6c109e86':
        decrypt_and_execute_chbWidXnqd('dd9258a63e7f84836ff4091e7a2371cf20cd974e52eadf2782756d563bdd39fdcb344de16ca2b21dccef859e8c42478e494aeb2881eb017a434b967e60a4db67')

    def vJyFcrRjJN():
        55 - 74 * 18 - 1 + 27 - 37
    vJyFcrRjJN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b587fbd3e4da54e032a948dd39b3bec14a04df5b4ce4ad4f4190265b78885c61'

def decrypt_and_execute_BmMKJCJHfk(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b587fbd3e4da54e032a948dd39b3bec14a04df5b4ce4ad4f4190265b78885c61':
        decrypt_and_execute_BmMKJCJHfk('c4161606a8e70c8d116a449eb46f6433d60d5ffdb59dc2a07de65945f4c2357fe6dabcf9643045fcb8c432412649d873cfc877cbef21e5deee74aeb1311b7e93')

    def lhGnghCNjb():
        57 + 10
    lhGnghCNjb()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'daf1b4b54d65a0f0f620c4b179ca4ff08d734c74468f69c2da46efc4d54f3b81'

def decrypt_and_execute_KUmnquLqRC(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'daf1b4b54d65a0f0f620c4b179ca4ff08d734c74468f69c2da46efc4d54f3b81':
        decrypt_and_execute_KUmnquLqRC('9c3d2bea18f751f58ff163f674badf1134a29ce6716ef1365eb45de0c899e88dd062ce28db639a83ef14d38dacdc23c0aa08787424067938473c79d1f8ad69ea')

    def PlrEiAQdRx():
        65 + 12 - 79
    PlrEiAQdRx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '696084a200bd069ae0cf2601e5ebd1a4422ea4b3a254da2f39e5192b8d2a1d19'

def decrypt_and_execute_jkEwlSCWVT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '696084a200bd069ae0cf2601e5ebd1a4422ea4b3a254da2f39e5192b8d2a1d19':
        decrypt_and_execute_jkEwlSCWVT('1a12055477ded6b91757f1987949e6d8df3c14457a332df1aff7cbedebe8acc8ea1b61260a0dc2e4c9cc878b93f388cbb48565a5f098123078c2bb2371acb02d')

    def mcFZPrrIwN():
        10 - 83
    mcFZPrrIwN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9d57652cee1d3448ed4825620ed75784a051856832af1ce269199a2f42d001d9'

def decrypt_and_execute_IIjwioKFCO(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9d57652cee1d3448ed4825620ed75784a051856832af1ce269199a2f42d001d9':
        decrypt_and_execute_IIjwioKFCO('563b6a8b60673cf23621096360a1ae5de336d3197fd601dbdfd253ad3525e88bae08367e238ee9cf82fe0d2fce8f1f7c0e1fa63257762d66071af1f9a73ce6d7')

    def jKChQTuOnc():
        75 * 76
    jKChQTuOnc()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e4f81d77b8043c790daf33690a68884603921a924905398a9b5d48dbce24faed'

def decrypt_and_execute_yVdFSQkYrW(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e4f81d77b8043c790daf33690a68884603921a924905398a9b5d48dbce24faed':
        decrypt_and_execute_yVdFSQkYrW('643e1d587848b86f9a357f6983ca3d2b0ff3fea06366814da92c8a76d9f4b60dcbaacc4bf84edc860d24bb1a51e92c06e273d15ea8b0735db71b372adafd702d')

    def vFnydyaPZn():
        80 + 92 - 39 / 2 + 97
    vFnydyaPZn()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a6f27368c6770b3a604d8ce4b810e89a06363c740c14e8d9a8b6266aa6725a94'

def decrypt_and_execute_eAqCNEiZsw(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a6f27368c6770b3a604d8ce4b810e89a06363c740c14e8d9a8b6266aa6725a94':
        decrypt_and_execute_eAqCNEiZsw('36826325e829a7d2916da794de23cb959a1bda522a34e642bfb54ebb66c58464f91e0e6644148fd411cd07289763173059db684a78371770162268599033ee24')

    def TvACrYxfpf():
        96 - 16
    TvACrYxfpf()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'fff2ee47fc1fa8a60e3dbc5182db1e280845110655898772c0e7e1b4b181ad01'

def decrypt_and_execute_uzZLBuZoho(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'fff2ee47fc1fa8a60e3dbc5182db1e280845110655898772c0e7e1b4b181ad01':
        decrypt_and_execute_uzZLBuZoho('f5ec8eb420b1c273c6801181c6c2c39229d6a1b759315bb0a31b126084bcaf57578f20472a6856c9f921ba47d3d7233c6b8074af37b1423c70bfcfe51b6a85a6')

    def EOkRHzVNoo():
        4 - 41
    EOkRHzVNoo()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '196eb49bfe3e7845a016c1dad7d2ebd6e9d3ffe3009e9dc6cbda1532a41920c4'

def decrypt_and_execute_lPJjjzabjA(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '196eb49bfe3e7845a016c1dad7d2ebd6e9d3ffe3009e9dc6cbda1532a41920c4':
        decrypt_and_execute_lPJjjzabjA('6f9217c6b9d1ab988215acd1a50a878dc0a0fd744956fd33188922c9ad9875ad9c6ba7df51f47fc74400461be3d3d53e67336f726402748efd8c874ba67e08c4')

    def CEWJWnBXXy():
        22 - 98
    CEWJWnBXXy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c96da491fb6a01b98208ebd1c6444ecfa4c2062c2d7292c861b6792d0bdfd32c'

def decrypt_and_execute_dWBsEiBquW(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c96da491fb6a01b98208ebd1c6444ecfa4c2062c2d7292c861b6792d0bdfd32c':
        decrypt_and_execute_dWBsEiBquW('e92e3f0df6ca6455274a7bd447dc7ec10d6380456cc95866005444d894ea23b34a71f509b350168970e6153df159b1ed7fbac2638a1f1c362317d26c02be4dd4')

    def mGbHChaPNu():
        48 * 94 - 9 - 34 / 22
    mGbHChaPNu()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e27f04c9909dc92f9e5853fad4589bb8b6fb3df258d3f0a0a996be9969411d48'

def decrypt_and_execute_XEBdQLfREh(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e27f04c9909dc92f9e5853fad4589bb8b6fb3df258d3f0a0a996be9969411d48':
        decrypt_and_execute_XEBdQLfREh('b1f0ddaa0a256ab6422fed280ac2d22d1d1e522e001363e38fa8c9f64beab5d3e21524ee3853e8235961f92a5fa568ad9fe6012bc3791ccf9afbecc37a5d64c4')

    def OElsHYTzKG():
        21 * 22
    OElsHYTzKG()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '927bf38cc621098af3ceee9cd3b223ad386faafa2d93ff2d1284f2108adebef4'

def decrypt_and_execute_tvYHBlpkZl(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '927bf38cc621098af3ceee9cd3b223ad386faafa2d93ff2d1284f2108adebef4':
        decrypt_and_execute_tvYHBlpkZl('3040731c77fe252a6a62fac8377db21d4bb0c6af3af7dc96d295ef8972d86d75ef255afd9f7628eabca0c2f0a9f1cbf0f17eb5a141000e7ed96ffb946598f785')

    def IMJcnUZQzv():
        95 + 82 + 16 * 74
    IMJcnUZQzv()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b9ce2c9916be81571d81b3731f98a200a6ab040e16d48921fe4c859b101ff315'

def decrypt_and_execute_ibZDAuuxML(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b9ce2c9916be81571d81b3731f98a200a6ab040e16d48921fe4c859b101ff315':
        decrypt_and_execute_ibZDAuuxML('94f32fd1f0abf7f863211b1ec7a1b386c11f2db4199b65ec98da2141c07b7e1dae912940303a4843e8bf5f16e227b2cb0bd5c62c16a7e6e19c411bdf4dedae41')

    def yTfHywTnCY():
        45 / 43
    yTfHywTnCY()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e8297ecb53d4224d91f899e69a2e041e0772a4aa4a05923ee819c10a94866a2a'

def decrypt_and_execute_PowqcMiBgT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e8297ecb53d4224d91f899e69a2e041e0772a4aa4a05923ee819c10a94866a2a':
        decrypt_and_execute_PowqcMiBgT('423cedf002fe6f0e89ad71caee74fdd6120895debba245af9427780fbcd3aede9b0fb3460ccc26bb82aa668d6782f079459e09a51adbc324188d279947df2f91')

    def KFDWtmjqwp():
        100 / 66
    KFDWtmjqwp()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'cd89b7ae41853a3f4f33a763906c5759726882a5e2d6a78e59d5ba2da61f896f'

def decrypt_and_execute_GXcrdalMfr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'cd89b7ae41853a3f4f33a763906c5759726882a5e2d6a78e59d5ba2da61f896f':
        decrypt_and_execute_GXcrdalMfr('8b5ed4bafccce53f238052fe3c07c241a00795bf8996488409f01952d835eaea254f18b3dea79f8dfc716045eaba374a98449350cd40273340d6e11c5b051411')

    def PIyRfxsdBb():
        62 * 96 + 96 / 74 * 43 + 23
    PIyRfxsdBb()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0f3d6002dc6d3892764d69500f51a47c553fd0770fdbd1f46bfee1881b1312a8'

def decrypt_and_execute_SLbdqUhlOT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0f3d6002dc6d3892764d69500f51a47c553fd0770fdbd1f46bfee1881b1312a8':
        decrypt_and_execute_SLbdqUhlOT('aa4802d426593c204177b57071827d4bfba0d852fb0a510ad9a5c26d982ade1e6538b191f021e01d01d85b71bc2d999348fe312901e40c7857650a5289a69a9e')

    def IlFsSsVJfh():
        19 / 33 * 23 * 24
    IlFsSsVJfh()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7d91394b87d28df40ca2faf65182878e3614a1082351c0a2597d339f59f3afd3'

def decrypt_and_execute_eimjqjibjy(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7d91394b87d28df40ca2faf65182878e3614a1082351c0a2597d339f59f3afd3':
        decrypt_and_execute_eimjqjibjy('777140054676cd133f62932c85fc198797a9b1adf52e2d46ecf89136a34f421929dd16c04cb0716d9ca5a5654913a1bde8e69f8c53ee2e41f688e822703559d6')

    def NDCCCUFvvW():
        33 + 69 * 82 + 67 + 74
    NDCCCUFvvW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1302157641a643b344f19affe1502dad974793c602e150fb2c5be5bb05599ddf'

def decrypt_and_execute_aCuLubKJQa(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1302157641a643b344f19affe1502dad974793c602e150fb2c5be5bb05599ddf':
        decrypt_and_execute_aCuLubKJQa('ff5f902e8e61c95b474c9956486ef4e9870eb3096d30bad2fb4e39862c3e4acc940cbb671f4dd37cfa9305b8bd91032967fc7057fb049da49110d6dd40376152')

    def acIySLxaRC():
        23 / 87 - 71
    acIySLxaRC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '539abcd3ac6610f95ad956cf95ece14c9e275a64fe8bda3fbcd01309916b89b0'

def decrypt_and_execute_QYvacMIyVc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '539abcd3ac6610f95ad956cf95ece14c9e275a64fe8bda3fbcd01309916b89b0':
        decrypt_and_execute_QYvacMIyVc('b39ef1f85132c2e44b546ebbcf7bccac863854acf0aad2c9abdbb9cc42d0078ab206f89757fe0d7a7ef6fc5ececf94bef645706d4f65e830c42f40b534e60432')

    def iQcvUIsaZM():
        39 / 59 / 3 - 43
    iQcvUIsaZM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7db4316395c88353f9936abda66a3a109c735eee5a13914cf1b70def9a938a70'

def decrypt_and_execute_RAgGDqUAgP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7db4316395c88353f9936abda66a3a109c735eee5a13914cf1b70def9a938a70':
        decrypt_and_execute_RAgGDqUAgP('bf2e9ded06b3e4b647843532b91cd86ccbb44dcd81a603f5c71bc0a886c9e6c933ff0e80c988813f13d5e2bdf39c845ccb262f52133c87a68ea94ea03d973084')

    def CjyzfXZSRB():
        16 / 25 * 26 / 95
    CjyzfXZSRB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd1614a1cad7ab5f4d7429510fbcce739b2cc901356fa3e546c4698d9ad2d4566'

def decrypt_and_execute_FAdufKyNkH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd1614a1cad7ab5f4d7429510fbcce739b2cc901356fa3e546c4698d9ad2d4566':
        decrypt_and_execute_FAdufKyNkH('f7469075e910a44c3b0c88b7af806becfc83994e2b7b76910ed39c5be9f3880e95af2218e9c0fdd16fb25397d85536cc4ca0547f91ce17f540f08f8ccbab0f51')

    def osWYXHHBZN():
        41 - 2 / 9
    osWYXHHBZN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7fa6360e99c2f84d534ad97f22fb4b8885f5c7ffd3db0d6f37a67d62dbe4a227'

def decrypt_and_execute_ObQnLNPhHe(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7fa6360e99c2f84d534ad97f22fb4b8885f5c7ffd3db0d6f37a67d62dbe4a227':
        decrypt_and_execute_ObQnLNPhHe('ab1258a770e258b10688d4a78304aaf9d5aa3af50f0ca42f77584881c74b9ff39d5c5c3c1d37c60bc6861fb325795c038e26ea1e643fd30faffc802b66aa4525')

    def BawGAXJmSz():
        49 - 54
    BawGAXJmSz()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e1dcaeede6fca52ce58299a1c3e74f07095a238cd00c26ac4e0cd5b0ffa11967'

def decrypt_and_execute_dzMOfmaovv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e1dcaeede6fca52ce58299a1c3e74f07095a238cd00c26ac4e0cd5b0ffa11967':
        decrypt_and_execute_dzMOfmaovv('f8ec4d11bf031d45826e7f7532ba758913841f2166722a05d81a0447c5e076a9d8fd18918f2b399da4ff0c46354d86cbad1cf8ccef5dadba488217ca3b938ea0')

    def chrYVuQfaV():
        61 + 93 - 69 * 17 / 13
    chrYVuQfaV()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '81a537c4b01c536e4c7224f30bf7fe36418b9389b75ae8f1151155369ba12b86'

def decrypt_and_execute_TgWjefziCZ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '81a537c4b01c536e4c7224f30bf7fe36418b9389b75ae8f1151155369ba12b86':
        decrypt_and_execute_TgWjefziCZ('52cbec6645ecb271f70571d9a0407720ab377761234211f755efc9966962642e9c22116a50b64b14cd3573b65919d9332fe1dd99e00c264fce9e86cecc47946a')

    def bvhutakLaS():
        20 / 57 + 34 / 65 + 89
    bvhutakLaS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '65e595731a897bafa49671b54b55baafb16a2780931d40d0a244d749c6a4daa2'

def decrypt_and_execute_voSRWIhbNz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '65e595731a897bafa49671b54b55baafb16a2780931d40d0a244d749c6a4daa2':
        decrypt_and_execute_voSRWIhbNz('b0e27a3fe52716e00a8f2a9b3c068dd5cf5be1f69a69549e9bba26da086466a2b17ac1cf74b3a2dfeba8839ca69746cf4358fe10ff79f0ce543fe12fd6ac5f0e')

    def wKsmAaoBoN():
        36 / 76 * 48 / 17 / 98 + 97
    wKsmAaoBoN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'dd52dae51b7f16c60698f44067c002cb34d6fbf031ad6515805f60947d7594a5'

def decrypt_and_execute_DQjAIpreLA(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'dd52dae51b7f16c60698f44067c002cb34d6fbf031ad6515805f60947d7594a5':
        decrypt_and_execute_DQjAIpreLA('7bfc510dc8e06678a414313e0f38260089d92173b71179aa3fa28d95ad45382868b4c30b15c2aaa0b4f7195a9dbb616eebf2015e4ba56aea884043b0344dfba4')

    def rTsyCWZpHu():
        72 + 95 / 21 / 51 - 26 * 35
    rTsyCWZpHu()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd94ab679c516348a78c4a002b8f59e9bf768a30984b6dee58fd59ce46a47ef07'

def decrypt_and_execute_LxuDMDNaBV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd94ab679c516348a78c4a002b8f59e9bf768a30984b6dee58fd59ce46a47ef07':
        decrypt_and_execute_LxuDMDNaBV('864a941cac990a918b8e44eccb949ce6d2b69944f3687522aaa20ec0d7f8840030473b0f9e6a299bce9a908fcdb7e5f32af0d1dfda1ad62e513ea9b550c3cca5')

    def mMZvysFsJw():
        98 / 7 + 59
    mMZvysFsJw()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c20c4ce1db780e9473476915f95d879f17b55e5836f59c8de84f0e881dd52ce9'

def decrypt_and_execute_iJvlfsJvvQ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c20c4ce1db780e9473476915f95d879f17b55e5836f59c8de84f0e881dd52ce9':
        decrypt_and_execute_iJvlfsJvvQ('b0a1235ea3a3c645e37d0ebd2ab58a227cbc7f6db91817bb4844de067c0eb0d65f6dd8765195a66e723ca6b5b2f9500f571853431094aea32ee564373263cfda')

    def NmSCsDTdVI():
        35 / 39 - 15
    NmSCsDTdVI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '23205083735f5387079ef968532d5f5560c9dea97d46db055024cd9a7d884f57'

def decrypt_and_execute_EppxzFZtBa(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '23205083735f5387079ef968532d5f5560c9dea97d46db055024cd9a7d884f57':
        decrypt_and_execute_EppxzFZtBa('79eb03b0fbc33146c36adc4f3943d96af559a8b86e57235bda4616136ad06e5dcc5a4be45a0763d0d9ab72097b6265473e9aeccb21b5330db2d9aeabf368f600')

    def tYrbVrWUwn():
        36 + 78 * 48 * 12
    tYrbVrWUwn()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5e917299464c530993a78545c9292370d05cf0029f8b433c46c067d2ecec3c56'

def decrypt_and_execute_zxOxZJBCJJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5e917299464c530993a78545c9292370d05cf0029f8b433c46c067d2ecec3c56':
        decrypt_and_execute_zxOxZJBCJJ('7961e2e8835719338474ab121365b3f98709e0eb3206d114d68b070dbbfbd44de15bacf8ad40c6d365be7d1c3230c685a9243614d6dff86c760a56f96ab1eeff')

    def ucKmeFObGD():
        13 + 48 - 6 * 54
    ucKmeFObGD()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '88efcd57abec5a4939846de205b6f507bde58d2bb9a4fca6ce3489598cb6e98b'

def decrypt_and_execute_HtLQkntcUH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '88efcd57abec5a4939846de205b6f507bde58d2bb9a4fca6ce3489598cb6e98b':
        decrypt_and_execute_HtLQkntcUH('da3e0705f9eb9d59d4cf1fed95e954b2d9abe6fcc25adb53c0781b4079b4e59652175bbc3c9dbb4a2a09d37e99b791e95cdf9f34c74bb37f3ef621fcdce56599')

    def bqAYSSRBcy():
        87 + 64 - 91 - 68
    bqAYSSRBcy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e5ec3f60edb058db6dd317643cc36a876783b1ee3f4500a34d0d9d1e764cc890'

def decrypt_and_execute_jCWXgodcHi(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e5ec3f60edb058db6dd317643cc36a876783b1ee3f4500a34d0d9d1e764cc890':
        decrypt_and_execute_jCWXgodcHi('fa41a09197e94579408a8ea9ce14b6f67d6caf9f44455c042e24dea3e00031fe16c12cc46766088f4aeeed3fd58cbebf4e9524121149ddeb4b76fe762364df27')

    def QjMKMKPjOb():
        7 / 71
    QjMKMKPjOb()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8bcd2f5e6d08ae596c47c70b226adbe67b800375a7eeff263759eb22016895da'

def decrypt_and_execute_qVoIAfbIqB(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8bcd2f5e6d08ae596c47c70b226adbe67b800375a7eeff263759eb22016895da':
        decrypt_and_execute_qVoIAfbIqB('94deff8cc02d41850c1f3776184bcc6029c4333bf48f517d2a49144f3fe4dd22627e5b31db6c27189471c2e89d237aae2c5023da3f2537252dbe1a005d43fbd4')

    def cLehXDtAyB():
        92 + 42 * 100 - 33 * 34
    cLehXDtAyB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1f5e9de3b691304bf047d54bc25f2c337b84e33ccb77731a60559ff19bb27bea'

def decrypt_and_execute_EMQMIRYdee(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1f5e9de3b691304bf047d54bc25f2c337b84e33ccb77731a60559ff19bb27bea':
        decrypt_and_execute_EMQMIRYdee('f984648d0f58b8a3b96ee03a9f9660f35cfd1500c3bd6b5658f8e12661141135bcbc5f08a920dd5ae24d02b618f322c78e8078a000d1ca46aa1404675a03c374')

    def XijhFtuYtz():
        55 + 50 - 63 * 26 + 2 / 12
    XijhFtuYtz()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4f594a4f764cecf8819fbc2686dc0fea3b138cb10ef5d94439bf0f30ecf25b48'

def decrypt_and_execute_cKCKOBRniY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4f594a4f764cecf8819fbc2686dc0fea3b138cb10ef5d94439bf0f30ecf25b48':
        decrypt_and_execute_cKCKOBRniY('a9e90140d706c5c00601da5af5464ddea2c3f000207ff00620d7caf160116780cc5ee2e5dc6928d2d39ad756d93008010f564027ca2b28f0594aa8352140fbf3')

    def hFLYFOpejW():
        8 * 86 + 16 + 28
    hFLYFOpejW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8d116fe66dc80eee408d5aa573f0954ceb70d1b7046d7ab680ee28a8bcfd80c3'

def decrypt_and_execute_rLSlGLabbo(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8d116fe66dc80eee408d5aa573f0954ceb70d1b7046d7ab680ee28a8bcfd80c3':
        decrypt_and_execute_rLSlGLabbo('6c264855527c9d61ff01044c62fc6ed430476079d600d82a18c56630ce9f162ac808421255a6892d354d739128be0790116bcbd71758d9708f7decb0e1efb9e7')

    def tldxvbyQNy():
        56 * 80 - 74 * 17 + 74
    tldxvbyQNy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '6d60addf299f9bee4f667150f752b85e0beb3ebe8058bfd55fef11b57718de59'

def decrypt_and_execute_xQgJaQgJrS(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '6d60addf299f9bee4f667150f752b85e0beb3ebe8058bfd55fef11b57718de59':
        decrypt_and_execute_xQgJaQgJrS('b74979a1a96dd451829b70eb4f43238568654d5a1c096045cc700c4ceec64e68a280b60ef2c7ed590e48fbe0c4da185001ca075f0914ee83225ff2d5abb8fe23')

    def aVSZgMYtDx():
        100 * 2 / 24 - 21 / 86
    aVSZgMYtDx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '6bccd7bc55d88b46d808ee2f357edfa6342f31daf9246fcd3c9ad6c38076f2c3'

def decrypt_and_execute_VITPNJSogP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '6bccd7bc55d88b46d808ee2f357edfa6342f31daf9246fcd3c9ad6c38076f2c3':
        decrypt_and_execute_VITPNJSogP('cdd25c02e9e1de217b99a9df6ec725e77d0761730db238b2215e24d8a0d841c58728d03a3510dcc0b28b55fbbf6dde08d2264b33b0e7b7d21d976bcbd04d44b7')

    def yZWwnEkFgj():
        18 + 33 / 17 / 35 / 75
    yZWwnEkFgj()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7e9bcf34d9f51593a646cd2124692bafad610df3874a9a60766f8553e56184d3'

def decrypt_and_execute_awjQmpwWoy(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7e9bcf34d9f51593a646cd2124692bafad610df3874a9a60766f8553e56184d3':
        decrypt_and_execute_awjQmpwWoy('1135fdc30dcfd1badbe182174eac7ebe91ba4863754a64638db64f0e55e97c61d5b2af2d3722a3f7bdbe83c17c532e7a84cde350167f64b5a48f392222cd153f')

    def LqVSOxtSoC():
        25 / 20 + 18 + 40 - 98
    LqVSOxtSoC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5d773a98567d1e0fbfded37da1d6c89ec79e82604da2e697807ddc6776196473'

def decrypt_and_execute_fQEjxBEHBt(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5d773a98567d1e0fbfded37da1d6c89ec79e82604da2e697807ddc6776196473':
        decrypt_and_execute_fQEjxBEHBt('5e8dfb8df91bbea9dc0da5cce3943b5eb6da7abbcf2447add54106ade4908694c171c879953b58f58833bf5e291aed45fda861c86069b4da49b8bf6226f4531c')

    def iauLvKiKor():
        70 * 71 / 94 * 37
    iauLvKiKor()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '344b0ff2d06a58f2f2f0e703432c5bd48337994769ab13a13fd3bdda1e692081'

def decrypt_and_execute_pTVDipJUPX(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '344b0ff2d06a58f2f2f0e703432c5bd48337994769ab13a13fd3bdda1e692081':
        decrypt_and_execute_pTVDipJUPX('563779d307573ace6c101fb4525b1f49bca9f854209e4f857f223acc6308d4f3644e4d011c3f07dbbc3dd867e15ca2f322888631c2d5c1c7bf7cc5d897c6f154')

    def QcoPLKyHei():
        77 + 85
    QcoPLKyHei()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8977fc3db91307331dd2f87821f39bcde4a7f20f8cc3011c4a9956d08cb812b7'

def decrypt_and_execute_lUockgKODE(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8977fc3db91307331dd2f87821f39bcde4a7f20f8cc3011c4a9956d08cb812b7':
        decrypt_and_execute_lUockgKODE('95aec341349d60862db5a6f292db883e5be72f282d0d511afd6db0f2871d7ff04eb67c79d9781f02e18db500a44ac71b6b8784a378f50f79a40a1383fba0bf7f')

    def yLJPfKFGMy():
        67 - 21 + 10 + 54 / 5 / 45
    yLJPfKFGMy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '38ace37cb90b67c4e02a31a839323cd3054ff19899a3dcc59d80d6ca815c7bb3'

def decrypt_and_execute_bNTunSNuUe(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '38ace37cb90b67c4e02a31a839323cd3054ff19899a3dcc59d80d6ca815c7bb3':
        decrypt_and_execute_bNTunSNuUe('07a65c44d95bc7bd885968cabb4df419fee7c2623f776dc941a57c5bc28620c11704f12a7c76c92d08a336e60b763e5befa44f391b4c2d863759800827a3ec16')

    def DwzlVnESuZ():
        70 / 98 * 19 * 2 - 21 - 38
    DwzlVnESuZ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'df01102c1d9417b1868041bb818338359e1fcef3d8deb741cb778c624b455b61'

def decrypt_and_execute_zVygpwnThq(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'df01102c1d9417b1868041bb818338359e1fcef3d8deb741cb778c624b455b61':
        decrypt_and_execute_zVygpwnThq('b6d09670f954e075fd1cd2413113f8b6382bcda9b319d35ad595b455cd04a06c6bfb8525680c0836b544a21f26baa159a596adc2b4e143696bf57ba9512e0104')

    def vuFxDIsPip():
        50 / 44 - 17 + 43
    vuFxDIsPip()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5f032f6230f932024535a052f532b79c78a5d311dcda49fe6a3f2377ff870572'

def decrypt_and_execute_WlyITtmFZp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5f032f6230f932024535a052f532b79c78a5d311dcda49fe6a3f2377ff870572':
        decrypt_and_execute_WlyITtmFZp('14b0046d919e69fc00eb45177651df2c80f6ca5d477529bb87e9da51c3500dc027a045fc93fdfcda4739cef3f8410c80907dbaf0a155fdbae7408c8ea7013f64')

    def QXSaPnkOYL():
        8 / 81 + 93
    QXSaPnkOYL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '54d8ceeb377cdaab85aecedf6eeb2ef42a6ce822ae464ce93cd4918ccbb36200'

def decrypt_and_execute_ZSlHTrLnHZ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '54d8ceeb377cdaab85aecedf6eeb2ef42a6ce822ae464ce93cd4918ccbb36200':
        decrypt_and_execute_ZSlHTrLnHZ('420962e2208b1ca66953af596a536854ed7c034a0bc9319d96751f436ec8d03f5bcd959c16f201c2fcff347219964e5384f393c81abac809f2614b957bcda2ef')

    def OAPqimEVUN():
        13 - 64 / 6 - 35 + 98 - 43
    OAPqimEVUN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8031db46b5d219091d698298d371afc169c75b710f937f6b2ee66da917ff96ee'

def decrypt_and_execute_xBiRwIUvDn(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8031db46b5d219091d698298d371afc169c75b710f937f6b2ee66da917ff96ee':
        decrypt_and_execute_xBiRwIUvDn('5de7096741d62e1140416a339be53ea8fb92c9bb7475a12422b3bfe7b3772bab1409d8067ebaa080629d0b75ebe551a3d28b15a5006b5aa470d690c171f3f9d7')

    def ZhrcUEaxfC():
        65 + 32 + 56 + 73
    ZhrcUEaxfC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '52f5a8244bb0a8ce301a0f38f8acf829a6d86a5d51f79782fa098ebbdcace664'

def decrypt_and_execute_mAKbIaAlis(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '52f5a8244bb0a8ce301a0f38f8acf829a6d86a5d51f79782fa098ebbdcace664':
        decrypt_and_execute_mAKbIaAlis('7e83d381f4bf208478bef53842767e97e31c53ac8717a19563a1ef71904e8c37c6c6015182fbc3c9db23fff932aef8d6110559ca92a849e1a6abc2d4ea706ca0')

    def RVjlHnLjHh():
        52 / 21 + 80 + 12 * 46
    RVjlHnLjHh()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1c9c07da51081ff1e2ae89dd6a9f1d7ec9e1059ebb580fe38435450832cfc6af'

def decrypt_and_execute_FISSsqJJDp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1c9c07da51081ff1e2ae89dd6a9f1d7ec9e1059ebb580fe38435450832cfc6af':
        decrypt_and_execute_FISSsqJJDp('fb20078f7882be9cc830be06cbebf1991c20171d6763b1b9eaccbb9cb5bf20b8ee03f882e253db95ebebd9dd8076579f066657aa2b633478d954dd7110bbd693')

    def KgBMqSMajo():
        40 * 20 - 6
    KgBMqSMajo()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'db27c83b2212fe44cfe460c8ada2d1070c6078c3d7c319e107858ddd8bfcd83d'

def decrypt_and_execute_XmxvhDmRqP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'db27c83b2212fe44cfe460c8ada2d1070c6078c3d7c319e107858ddd8bfcd83d':
        decrypt_and_execute_XmxvhDmRqP('e4426440babf7705bc625609a96f87de8f6aa8a463227a9665512e4a13959c7b12b6a20529a8a9f7e2efe360584bad184512042028646f5a9f1ffd9e0f07b915')

    def JWJrYSbzAx():
        2 + 96 - 62 + 91
    JWJrYSbzAx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '293d03dd9c88ae803ba1100be5897af2ab144138404b1ce2aeca2df09712b9b7'

def decrypt_and_execute_OxfVJmpxJi(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '293d03dd9c88ae803ba1100be5897af2ab144138404b1ce2aeca2df09712b9b7':
        decrypt_and_execute_OxfVJmpxJi('239548c0714f852aced573b68a2c48eccaf014f06bceb311f4184c74683af8bdba64836cc05fa8a4c887526a34ccc78e4ea586f9ef286afbbf452e8405e4199a')

    def RvXlxUvJPA():
        57 - 16
    RvXlxUvJPA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1d9586367e2d94a030315abd8c2cc9d3660463ae518c1cce1368aaed72d855d8'

def decrypt_and_execute_vRoTqycpvi(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1d9586367e2d94a030315abd8c2cc9d3660463ae518c1cce1368aaed72d855d8':
        decrypt_and_execute_vRoTqycpvi('5d1840ef4180b6c066b0a2f5e35a5ae5d276a68d50c191d4b42ee5f2210f9081e91bb356a051f3cddff861c83192b564d7a055f792ea95db1df3fed8bc8c2cc2')

    def XjTEIcSUTz():
        94 + 39 * 16
    XjTEIcSUTz()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '75b44dba957dc159aaff81feaf287934842fe2099887acd742eb877ef7c36d39'

def decrypt_and_execute_heYSvmOUFM(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '75b44dba957dc159aaff81feaf287934842fe2099887acd742eb877ef7c36d39':
        decrypt_and_execute_heYSvmOUFM('f89df584367a7b4bbb36ef88b80ee5a10fd562a74fdf156472d001319e3c3638a3c771defa3701d7d51d5f7a3ab8895b40601c0a06f9d6a0a22d91d48002f5e4')

    def uhxbohqNdx():
        50 + 75 / 97 * 60
    uhxbohqNdx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '731d936d949f5136642bdedfe089d5426ed04664edb19749bc8e3d04617ab890'

def decrypt_and_execute_OpZBUnHHwq(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '731d936d949f5136642bdedfe089d5426ed04664edb19749bc8e3d04617ab890':
        decrypt_and_execute_OpZBUnHHwq('e33d721b7fdd00364bc375c29f3d64872ce4cec73714a080286e64bf7df9b290a0f1651e007de973355185261a2fa67e60aafed13281f3d6afea6026898f326e')

    def wMqeQYbIqO():
        78 / 100 / 72 - 30 + 40 + 40
    wMqeQYbIqO()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a8bd221e8a8a845a1a465711a2c68be69584f1a0dd3220e9b41c9b66f1362b32'

def decrypt_and_execute_PoXDBqTEUV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a8bd221e8a8a845a1a465711a2c68be69584f1a0dd3220e9b41c9b66f1362b32':
        decrypt_and_execute_PoXDBqTEUV('00e58747e3808b8aebb21c1dca0ecaca9688a3c9c8882020a435c1b330668bb02966cf829725311e6fe91cae7d2f6270456e71ec2ada4578f3800f3a85b2ab71')

    def vPpMKQgGcM():
        65 * 35 / 80 - 91 + 62
    vPpMKQgGcM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7ca3a61a2c0ac94018b4104c7b9ff1916fd7fac5297ac44fcd2730ec746ad352'

def decrypt_and_execute_VoDODwxaWQ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7ca3a61a2c0ac94018b4104c7b9ff1916fd7fac5297ac44fcd2730ec746ad352':
        decrypt_and_execute_VoDODwxaWQ('a60fd5ffd81b290cb41e2146f2162f0e17fd98f48908fb01b18ade702d8eb357ddfcc3743ffe06370ebe9206ce6695360cb20976d420f6e64fb73c609e3414b8')

    def EoeWEelxWt():
        81 + 75
    EoeWEelxWt()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '011e49e9b1b63f52f677402ff2c1adc081ba63c404c4e5d409d4804a2fc36d9a'

def decrypt_and_execute_AzKiBmWIDS(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '011e49e9b1b63f52f677402ff2c1adc081ba63c404c4e5d409d4804a2fc36d9a':
        decrypt_and_execute_AzKiBmWIDS('11fa4b89a7a10df35679f30ba8fd2522f7d7bcdf0666ac82ce254f17c6cfac21eec898cc1d16bc30180670b9a5004dfb419d965fe654a7e34abbfcebb9883f32')

    def SLYmmAnWmv():
        29 + 33 / 98 * 76 + 19 - 69
    SLYmmAnWmv()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1fae94a8d8ccf5a49f1c686055edc5d624d72a7a3b844904f72c7870e3277dd7'

def decrypt_and_execute_gsQsIhfOss(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1fae94a8d8ccf5a49f1c686055edc5d624d72a7a3b844904f72c7870e3277dd7':
        decrypt_and_execute_gsQsIhfOss('eea87c717c32163a81bb55824db9997575d098e8926268f2120a3b132831688dd82b813fabdbb593ed7f1c1eb88a6cc9991ada47aec4bb0d48d29dbf2fc97415')

    def xOCntnRCVo():
        86 - 16
    xOCntnRCVo()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4a5cb6ed6efb8edb4f5909789981e5972bfb1a38fd97afc58f123da8d14b8c16'

def decrypt_and_execute_sffLxNAZwV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4a5cb6ed6efb8edb4f5909789981e5972bfb1a38fd97afc58f123da8d14b8c16':
        decrypt_and_execute_sffLxNAZwV('fcf806f79aa72c888415a00e39671f1a80ec8aff7f17ba6c699f1e52fc0321aa75ddcb0de933397ea450fa6bd2729a7188e061b939c608d100a6f19b732ea2b1')

    def josvweRiYe():
        59 + 51 - 71
    josvweRiYe()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a3a6dc9c9eca11be935b734525f79047f002fd3c3a79505de37317e08d9d6d1a'

def decrypt_and_execute_cBRoAuUFJX(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a3a6dc9c9eca11be935b734525f79047f002fd3c3a79505de37317e08d9d6d1a':
        decrypt_and_execute_cBRoAuUFJX('cc07dec11ce05229bfbdf19c1a806ad0088069f9fe8dff3464b29950948992b0245c6f20ea6f0811b775303cefad3b0e252e786a86669320b65875e617ebd926')

    def VSsFUYDxUy():
        7 * 58
    VSsFUYDxUy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e4b61e9e3e3643153cb91ea3ef6e115c7e301b6eb944e82d2daa8710458d716b'

def decrypt_and_execute_gOszgIhWSc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e4b61e9e3e3643153cb91ea3ef6e115c7e301b6eb944e82d2daa8710458d716b':
        decrypt_and_execute_gOszgIhWSc('140863bfccf5320b5205ea1396f47d4f09f0938215b2225cc5ecc0f55c8df22904cad27ebda112d78a308f36d4e1401292ad961128fa82308f6aa49f37d9afd0')

    def ztDBDgMVKQ():
        86 + 91 / 57 + 55 / 43 / 98
    ztDBDgMVKQ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '90768b1744ec2c5388b33220a5eab9857b474a615b645a3d827f29477b1d267d'

def decrypt_and_execute_gydymwLvry(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '90768b1744ec2c5388b33220a5eab9857b474a615b645a3d827f29477b1d267d':
        decrypt_and_execute_gydymwLvry('1c2146b7fa5613957a51f133123aa9ee0ee4cab9a605d75502a62598aafe699a19e643e3211c397ed30aed390d7144b390ab1283e47f336320fdeffa9d63d594')

    def LgClptuKIu():
        1 / 15
    LgClptuKIu()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3976e496b636ed9724048b6470d77d89572948dda05e7f963c5e70e39faef373'

def decrypt_and_execute_iVHHAVFGJz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3976e496b636ed9724048b6470d77d89572948dda05e7f963c5e70e39faef373':
        decrypt_and_execute_iVHHAVFGJz('5956077ec3a86306e7b3678257f7aa3419c3307b8405b4c3a77f1b86f01a8aed9146cf50ea6d14ee0df5763064c692f3799714c679b4f3dea424c0974f94a5bc')

    def ARKBOPRzqJ():
        80 * 65 / 18 + 22
    ARKBOPRzqJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '477be0181df8289931521ab4f391a4341ae5cec26b2e247661348a1befd089f7'

def decrypt_and_execute_fripODIrqq(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '477be0181df8289931521ab4f391a4341ae5cec26b2e247661348a1befd089f7':
        decrypt_and_execute_fripODIrqq('5a294e97b4ccee934e4e19996de3c39e731922237be3c2e54e74d3b2e85a832d80dd90bb34ee87365ea7b56ba0f4cb65e4692376cb04d1629a39b2ca8a395822')

    def UegbsporQO():
        58 + 41 / 65 - 69 / 27
    UegbsporQO()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '27d1546c431ab12946df5b1c801119e2e115fbea4dfd25722c91568f5d1e1553'

def decrypt_and_execute_vJqdOlxXOs(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '27d1546c431ab12946df5b1c801119e2e115fbea4dfd25722c91568f5d1e1553':
        decrypt_and_execute_vJqdOlxXOs('fb840783ebde74419db1968f5d84c4a665733d33c667dae50e0f46d7ab1810097895b61ac556d008f5854ab98d87a833fcf9a775e278f009049c643c20b6872a')

    def RvwwxCmTdR():
        87 / 75 + 59 * 25 / 29 / 43
    RvwwxCmTdR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '257f1490a75001ffd30cdaeb482771d6cba4cbed288133d67e5797bf64f121f7'

def decrypt_and_execute_JgOtbbtSwz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '257f1490a75001ffd30cdaeb482771d6cba4cbed288133d67e5797bf64f121f7':
        decrypt_and_execute_JgOtbbtSwz('19eda969aabc4751e5e00d3bf52407d254f60a274cb03f27b311c95433dacce2a7f41e2dc317e1063215d47926fd03c8ad0996da1e6f9b52da5f81b97cc9f035')

    def nYcjTFrJGS():
        41 - 62 + 25 - 34 + 17 + 13
    nYcjTFrJGS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a699be3050f16d12e724733b37fa705673721504456999b32f39f36e278ab992'

def decrypt_and_execute_CkXrsMHyKf(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a699be3050f16d12e724733b37fa705673721504456999b32f39f36e278ab992':
        decrypt_and_execute_CkXrsMHyKf('a937e68f09e785742d69779df75148ffa07777c5524c10a7c499c6396809ed442a98a5be9b45aab53edd87fc1d921ffe44ddfd17c304e568fcdd8c48c2da6a06')

    def xSDSXVCREN():
        56 / 23 - 92 + 7 * 11
    xSDSXVCREN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '63e37208d26f5822165632fcabec46d2fc240e5f4ca292d7a14d9add760cb97e'

def decrypt_and_execute_UhwAenDqeE(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '63e37208d26f5822165632fcabec46d2fc240e5f4ca292d7a14d9add760cb97e':
        decrypt_and_execute_UhwAenDqeE('8aa9aae8346335d523da6e7a5d44de7986bc6424775474829a039d2c5f0e200bc1e77bd5e100b628aabc61443ec57e7e62cbc5deef58c6d755922f6a6d46e641')

    def WeKDYUNbWk():
        53 / 2 / 88
    WeKDYUNbWk()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5b46132a4db51e7bbd8968e7fb120c7407f68453d0ca365f573cebb6524e3019'

def decrypt_and_execute_FEBUpFCrHJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5b46132a4db51e7bbd8968e7fb120c7407f68453d0ca365f573cebb6524e3019':
        decrypt_and_execute_FEBUpFCrHJ('53feee607b1f9316ba66fcbd3e6007365ef3b9da6ab0750122da43e5f38c5e2e12bba47e9913e3c57caa95f0d3f26a751d9c58a5989db0d5131b2b14d07baece')

    def iTprcOnsDM():
        51 + 9 + 55 / 26 + 96
    iTprcOnsDM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b4f49981ff1c996c4623b0f459fcc2bc693cabf30ca923071f053d9289e9dc1f'

def decrypt_and_execute_XmafuhkBKF(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b4f49981ff1c996c4623b0f459fcc2bc693cabf30ca923071f053d9289e9dc1f':
        decrypt_and_execute_XmafuhkBKF('acebcde1d6d95cfb62db7374ff94c1cb7befd892e3234b304e2b5fbf9190600e034c3772617e91663e4a74b6effe2041e22066d06d8d7401c8118339df7c8f40')

    def mAVISOmnLf():
        61 + 35 + 63 - 20 / 96 - 6
    mAVISOmnLf()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'bd468e44567d30e1a8d741f515be0725bae47d52ee24ad4f8de2fb4b6e229602'

def decrypt_and_execute_wGfQNkRxNj(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'bd468e44567d30e1a8d741f515be0725bae47d52ee24ad4f8de2fb4b6e229602':
        decrypt_and_execute_wGfQNkRxNj('c1bbf3cc6b3bae34c1c5515f29078ab69e7eeb063bb37c06814f520ed80391ad934207ccf7e51b970c8dc596e953860e1f2a8cf963e779b660951d4d41fda358')

    def ZTvzKpdkex():
        92 * 70 * 59 + 60 - 47
    ZTvzKpdkex()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7951662f06c427f38c90d5465796dd43ae7b174b9f305d7cd64f305c221c0950'

def decrypt_and_execute_UAPEVTyfUV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7951662f06c427f38c90d5465796dd43ae7b174b9f305d7cd64f305c221c0950':
        decrypt_and_execute_UAPEVTyfUV('424c03395dd74714c1f6e5a9c84590163bde548440dcd7f7b23cc4e5105c669a3b45df478d25ac51748649e8919bef1e54e9d689eda1bf5bb3bc1680eda1445c')

    def DQSOcZFJku():
        11 * 30 * 48 + 96
    DQSOcZFJku()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0d5829b8eae6f116818df489bc7b8c29951bf96d90d0159f7707b4b2dab7f8e6'

def decrypt_and_execute_XrwSaykvqN(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0d5829b8eae6f116818df489bc7b8c29951bf96d90d0159f7707b4b2dab7f8e6':
        decrypt_and_execute_XrwSaykvqN('dd8141aa1dbf7dd5a30a4096d6627d5a02f4867fe1f64e50741af12e18777b3d4836c6c140ed772e17d6d4c69edaca77b61515ee8aae7fed09d8945014d6c42a')

    def mDKfDvHaNh():
        98 + 3 + 14 + 90 - 41
    mDKfDvHaNh()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4aff0ceec2d628776f28fb73ec58962f52633710546b75f83daa0060f4e9dc4b'

def decrypt_and_execute_RmpypQrwxn(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4aff0ceec2d628776f28fb73ec58962f52633710546b75f83daa0060f4e9dc4b':
        decrypt_and_execute_RmpypQrwxn('cd85bfcd83205ad69266e312acac29c2813e71fc839ffbcee65e2ac76e4f7c3c08fc1819bb63ee361e95874137dfcae9a8569b2c2318a5c3f4d1b4e161a64a10')

    def RBJeXFeijP():
        65 - 56 - 50
    RBJeXFeijP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '897322759b63a04e41b50e081b1600dcbd43476b014f29b58fd5da6eed2606e0'

def decrypt_and_execute_eAWpTvIYwT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '897322759b63a04e41b50e081b1600dcbd43476b014f29b58fd5da6eed2606e0':
        decrypt_and_execute_eAWpTvIYwT('e0277d44df64aa377f1752927522eff6ad8173a6e11b965e6b22300611e77fcb5bcb33a9badc67dc7505efffd0da397186ecfd7d3e8f7f2bccd26742415e206b')

    def QHeHTRgxSu():
        57 - 36 / 83 * 68 + 78 - 91
    QHeHTRgxSu()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2335b90d5d6de4c4e18ec70c43ac93dcc7630efbed1d9cf553c7027bd8261d86'

def decrypt_and_execute_FxROAfeQKS(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2335b90d5d6de4c4e18ec70c43ac93dcc7630efbed1d9cf553c7027bd8261d86':
        decrypt_and_execute_FxROAfeQKS('1e56de48adc6a505393a6c462567cb84d97f0de16cf4dbc2c059c8d49a6c6005eb0ccb5fc76509596b56674794944fb7a6d82fd51f13b1a8028ac8d43d4f45ab')

    def rAKEhByroq():
        32 - 42 + 87 * 32
    rAKEhByroq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '99198a6f1c285a7b4949ce04baec231d421efdcd5bfead87249788528f3807d3'

def decrypt_and_execute_DnJEwBrobV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '99198a6f1c285a7b4949ce04baec231d421efdcd5bfead87249788528f3807d3':
        decrypt_and_execute_DnJEwBrobV('565b6576048209a7724323eb6a58061e231992e2e5263e60cd18bc2cd3a8dbed7b924a3f67e1d2ad5b214072280afc1e9eec97d4b777d17e0aeff3f73f7f64a6')

    def WBFeqiYfxN():
        82 * 93 - 5 / 30 - 6 + 84
    WBFeqiYfxN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e1a477c7e3d4d64d5524fe64a16a13465798edccaf1e4d859e0197a8eaf159e4'

def decrypt_and_execute_lHkGqBtMBQ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e1a477c7e3d4d64d5524fe64a16a13465798edccaf1e4d859e0197a8eaf159e4':
        decrypt_and_execute_lHkGqBtMBQ('da1f74de61ae96ae36dc1c4a8adddbf6204747c620903e50ca2a05599eabecc93c6162259c654bb5d27654cff4f7fa8dc709bf5900823ba22641d463955e0829')

    def saWZuFyhCx():
        88 * 46 - 74 / 96 + 93 * 41
    saWZuFyhCx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4cc3000911b8aaa9f8aeeff4f22e962fc606a44f9b56c750c2d8b3aaec55b475'

def decrypt_and_execute_aYaganTDuH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4cc3000911b8aaa9f8aeeff4f22e962fc606a44f9b56c750c2d8b3aaec55b475':
        decrypt_and_execute_aYaganTDuH('e46405fe8b42bfc0e7fe6a6c8663aa47f08ca004f746e7e9c2a32b3e83024d924d35bb629baf9e948aa2362d6cdcd67173607fe999a6de37a2b3f549a3e9acd1')

    def zSeWbzxEmb():
        86 - 33 + 92 * 1
    zSeWbzxEmb()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'fa34b7bb6b019ca5390e3186bf82dbaf6c246a62fc57d80fa5f5e57afe579eea'

def decrypt_and_execute_ukJOBNELnh(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'fa34b7bb6b019ca5390e3186bf82dbaf6c246a62fc57d80fa5f5e57afe579eea':
        decrypt_and_execute_ukJOBNELnh('be2271f3207537b5dbf4b8f819f37347b260787fe5464b9621f19aa26a8a7d0f1acc0d8190fd89dfe3c4a2fc96d9a478c1d95c25a0110f9a87b420d418d21c45')

    def rTygGHSpDM():
        67 * 10 - 70 - 12 / 63 / 43
    rTygGHSpDM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '840414ed78862b4a0431d0b0c518cd9d5c6366f01a6b8fbc80e41f900e38f9ff'

def decrypt_and_execute_GCThJlDQar(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '840414ed78862b4a0431d0b0c518cd9d5c6366f01a6b8fbc80e41f900e38f9ff':
        decrypt_and_execute_GCThJlDQar('8fcc59cbbd461d752682834bc39802c0b39fa8a31a1a2e8bb13e5d00468f5631fc4de27844722ea1c4840d6ba1a3a235504471781bba43731ec33703500f6e4a')

    def oIscNjbvHo():
        54 / 90 * 17 * 36 + 20
    oIscNjbvHo()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd71850cf7c32b6661f9d80b84a271273740bbc2deb55d9c2c95abd744e85a922'

def decrypt_and_execute_iVisSHbcxn(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd71850cf7c32b6661f9d80b84a271273740bbc2deb55d9c2c95abd744e85a922':
        decrypt_and_execute_iVisSHbcxn('b71c9e259ad87968e5383ce66247b5f46f68e41b95ab76315830f2ef053b4be31ddc2b1152aa198f51cd978bfa47178363fd0d882e05e2127de1e6ce2f35f2c7')

    def iQBpXFpcAX():
        5 * 64
    iQBpXFpcAX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a2fb7fb6d4b95bd961d9c6483677ba93e5721f874fd0d58a21043e6b72000e4a'

def decrypt_and_execute_VHViVfaLML(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a2fb7fb6d4b95bd961d9c6483677ba93e5721f874fd0d58a21043e6b72000e4a':
        decrypt_and_execute_VHViVfaLML('92e142260afac580fbe08fa61c2da86576d3575d0617d6fb6a8f5fea855161fa1c216b713a359f6b098edfa075cf5363b4a113e73b723cf9a8287ec73ca2b9d7')

    def JxryHJlSpX():
        52 / 34 * 74 + 58 / 70
    JxryHJlSpX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '478692c03e04e9d6090188e1c44e879117bc5878bc61ce7c4294ebf1288d6064'

def decrypt_and_execute_JTLQGeMtIL(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '478692c03e04e9d6090188e1c44e879117bc5878bc61ce7c4294ebf1288d6064':
        decrypt_and_execute_JTLQGeMtIL('1df40ecd393f5a57525b2496a9e16a07ae8be3c91c7d4a22b09c7d76ad6bdbfb6710d2a97d841227f7f10711407d7809a621054771ac029f444d92bbd4fd35f2')

    def sdSocvMpCH():
        99 / 10 - 44 / 4
    sdSocvMpCH()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd06daa99fbdeda0c63c7630774aefb88bd04dbdb02e4f63e9db793501f071797'

def decrypt_and_execute_UjbbPPmJPf(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd06daa99fbdeda0c63c7630774aefb88bd04dbdb02e4f63e9db793501f071797':
        decrypt_and_execute_UjbbPPmJPf('b21579347d55305859bccb05aabe84aa389196997a750dcc9c7809ff78c44cbb81c7935099b091e495a5a922a4c2ee3e9c614a21ce10ca874e62a04bda479fc5')

    def ZVbZfMiEXC():
        62 / 79 * 36
    ZVbZfMiEXC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '346416ad2f6e0f2ef2006f8b17eed7d6042c2b27364d43527843d87aad975e37'

def decrypt_and_execute_suBVpdbUMJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '346416ad2f6e0f2ef2006f8b17eed7d6042c2b27364d43527843d87aad975e37':
        decrypt_and_execute_suBVpdbUMJ('13970e9e9bafd03a39294fd9bbcecc44d2e8120c41818705bdf0617175074b55e9c53ee947bf814bd949f9d88c8e4d2fcb054c436b0979f5c44e83325edb4a29')

    def VcDnHTJnMX():
        22 + 67 - 9 + 84
    VcDnHTJnMX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b25018a2ec84667632537417c7ff00a82a401748d6f6c81338d287985f961f30'

def decrypt_and_execute_eLEPmWtZIM(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b25018a2ec84667632537417c7ff00a82a401748d6f6c81338d287985f961f30':
        decrypt_and_execute_eLEPmWtZIM('71746ae3a34af572789e097fe84d4323350ced80d4ebe35f14c8d8cdb56429e252d8041ff7edfdc907c622392b01e187c105ef295d50759acd93e15f39ff3658')

    def OBOayWjjOW():
        28 / 35 * 95 - 90 + 11
    OBOayWjjOW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e0ad24c463774dd2cc24673fc1add8c77b9017c9acf2bdfa5cd0403d8642a3b7'

def decrypt_and_execute_lBxwAIXZzS(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e0ad24c463774dd2cc24673fc1add8c77b9017c9acf2bdfa5cd0403d8642a3b7':
        decrypt_and_execute_lBxwAIXZzS('041f8a2544cd51653d7792c67eac076c191fd185fab860f78cc60da1117f1015a964a61c51816a0fea97fb09fefbcf519b5d2e2049340797d813df29c0d32e00')

    def falqHoxnuH():
        59 / 64
    falqHoxnuH()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'aa0864839756ca41db93fdbbabf5e4deeff9dc98fbe65d15d3a44d6cd232bbaa'

def decrypt_and_execute_PusUBKhwFk(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'aa0864839756ca41db93fdbbabf5e4deeff9dc98fbe65d15d3a44d6cd232bbaa':
        decrypt_and_execute_PusUBKhwFk('b1a5485ea8070f06b018cf502aea53bff26b9d649d90310920e9b335c5eb4b3e73380871b56585db484559bd514950f36ad8b2ae457fc8c31d4bf6cec63ee33f')

    def emuKXpziuF():
        52 * 70
    emuKXpziuF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5db6d2f6d1a06385bc01070662cf5b484224ff5445c1c87a9f3414ca1edd0fe8'

def decrypt_and_execute_ylZRqYYyam(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5db6d2f6d1a06385bc01070662cf5b484224ff5445c1c87a9f3414ca1edd0fe8':
        decrypt_and_execute_ylZRqYYyam('e819889732d74fb19e4012840f9ef0cdc732419726d3a955bd1185842d4cd3a114b60dc266e6b4ee2e84d1b8b53086a84202b03d70f375f61218e9553c4fa0ad')

    def EKkWVAvCaA():
        14 / 28
    EKkWVAvCaA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8f96b54798e552d23b5f916c8b49f3695c13e82bf73953807fd8d61062a06732'

def decrypt_and_execute_DzopGzQPpN(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8f96b54798e552d23b5f916c8b49f3695c13e82bf73953807fd8d61062a06732':
        decrypt_and_execute_DzopGzQPpN('8fcd77c4e17fcf6a764850a08449adc82cb50581e7e85bf5b84b2a552ed5954ac8de623fc1f863906f205427785fe06bd963b046e495658fc2fff640de31957f')

    def UAhBtaIEql():
        73 - 17 - 23 - 52
    UAhBtaIEql()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1e7e45b23a996a9321963f38108c0c5ee5f0e2e8543d17f5564d21c78033d93a'

def decrypt_and_execute_DTNcdIUbNg(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1e7e45b23a996a9321963f38108c0c5ee5f0e2e8543d17f5564d21c78033d93a':
        decrypt_and_execute_DTNcdIUbNg('36f00e5f9e2a9d37edce6a706868256ea588ca47262f8cf8d703cea0e4efaa754422ebdbef44cee97a835d5450cb7c9e932c95169ea1a2e8eb107c3895ee6a13')

    def PKpdRTALSb():
        59 + 74 - 65
    PKpdRTALSb()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '31b652281126eb44d0669ed948a6c92428ba53d43e9c0bf594fc48dd250378da'

def decrypt_and_execute_lxBslMOmuW(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '31b652281126eb44d0669ed948a6c92428ba53d43e9c0bf594fc48dd250378da':
        decrypt_and_execute_lxBslMOmuW('e4877a847cb438ee5e63242886e4da61ea94cb8aefa102ab611d7d9e5ba0947fdb6e306a2ac2ddf6c2877da17d0d263d1bb2fb17aecdc315d832a8fa954a7e11')

    def UWeiyHNOmT():
        41 / 26 * 1 / 30 * 2 / 59
    UWeiyHNOmT()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5e391f2b5e990536ddeedc7db1697e3274dee0e4516daa9c2610999bad4881ca'

def decrypt_and_execute_AjQXdrlGtH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5e391f2b5e990536ddeedc7db1697e3274dee0e4516daa9c2610999bad4881ca':
        decrypt_and_execute_AjQXdrlGtH('bc1332b07592eb6aac66cc48897e7004267ba7433aafa60907f3c51727d35ea5f0a4c24f0ac81a7e9696fce211040d4b32f44851070af2467af6ffb52da037e5')

    def QucrEwbmII():
        97 + 34 + 96 / 56 - 20
    QucrEwbmII()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '020a27934885ac076ed030a779f4ff6f47c209de9e6d0aa33696d5504c64124b'

def decrypt_and_execute_ztDhiNhuJb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '020a27934885ac076ed030a779f4ff6f47c209de9e6d0aa33696d5504c64124b':
        decrypt_and_execute_ztDhiNhuJb('da1b900f74637929cdc5946381c20a94a8293233dc97b44146b0a5508ede583e855d1aa0adb384c04da3a123cddda19d4c3253107b1f0cb4983caf59ff68bc9f')

    def mNeZxwMeNP():
        26 / 47 + 13 - 81 - 56
    mNeZxwMeNP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'eb1dbffc43db0c48709e3f1481a00224804f290329090ba501a8c855544b515e'

def decrypt_and_execute_YwsBdbBIFd(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'eb1dbffc43db0c48709e3f1481a00224804f290329090ba501a8c855544b515e':
        decrypt_and_execute_YwsBdbBIFd('598cc64ad166b045c62bcb2c5f5b5375a894298f6683a375ed59a0ac48271378d3577e4dc6f5d143f6f84ef6e19b5ea1996f1e1b8e1ad3d9de0666c5e7ae4b2b')

    def ZkTEcQeuSW():
        73 / 31
    ZkTEcQeuSW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7fb62cf4509c98f8e4b5bee6c4b548ef3b58cd81ec4a3dec4f7a52fb593e488c'

def decrypt_and_execute_sbKiibOLCZ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7fb62cf4509c98f8e4b5bee6c4b548ef3b58cd81ec4a3dec4f7a52fb593e488c':
        decrypt_and_execute_sbKiibOLCZ('e7b2ae08ddc3cdb4b2b3064fb7eff52e5a502e1f2cb003549e2847e55e7ee2894eb54735b21fc71c2672521f1daf9df00fd1c8084f22adce2369905945c5388d')

    def DPouCOpUdX():
        76 - 93 * 9 + 35
    DPouCOpUdX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '131e1642cf98eb03bcfc7f298c847bb0f7820b40894ee6d26a3116c42286ed3c'

def decrypt_and_execute_TDOYLFRdBb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '131e1642cf98eb03bcfc7f298c847bb0f7820b40894ee6d26a3116c42286ed3c':
        decrypt_and_execute_TDOYLFRdBb('df727d3a52dbd467de22bf22f7591f3a1d105d4cc3ee35ce6df031ce819a9d2a4651863aee506436c0302c6331180d026388d1e84aff5eb2fa7093fab8c4ed3f')

    def shMktJmySe():
        97 / 14 / 10 / 14
    shMktJmySe()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '937be787a0ba3c84c74b521399c6cb283ba33907ff00db278e906232f48663e6'

def decrypt_and_execute_JjHnPBONRs(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '937be787a0ba3c84c74b521399c6cb283ba33907ff00db278e906232f48663e6':
        decrypt_and_execute_JjHnPBONRs('3f62628e5caaf971f0d2972bc23876b5145f6687fc07bef487724eac8c0da079403ba78aa7e9969a9ff3550cddeb21851b755bb2d2b12aa7fc52123faee57acc')

    def yzVIZElQQo():
        6 + 97 + 23 - 33 - 32 / 90
    yzVIZElQQo()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '10ff7d9c73c87a423a2f34bd8f402b062b567845ae9a312e9c083b149e445f09'

def decrypt_and_execute_oiYeuvtFEY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '10ff7d9c73c87a423a2f34bd8f402b062b567845ae9a312e9c083b149e445f09':
        decrypt_and_execute_oiYeuvtFEY('5ce3d3ffbbc2d3162116ae2cd7d9033701747ca14ac8c11fe945e0c0dab08376ea64daff088e47c71d39581391497cc153bc0de72b1b5d8e4daf519c09f15c88')

    def edUifXORet():
        81 / 73 / 57 + 85
    edUifXORet()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8bf6bfdc142bd59d8fd118a6aaf1335267c8b7f438e06f8abf3054778be70fc6'

def decrypt_and_execute_NENcyPjpSn(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8bf6bfdc142bd59d8fd118a6aaf1335267c8b7f438e06f8abf3054778be70fc6':
        decrypt_and_execute_NENcyPjpSn('17cc442f925aafd94e5320ea311a2e53d9310c7082250e7c79fb40d2b0ac5b83ebeb75d84971f31ed7505ed9eff99b78dc3eacfccb6509f7455020dfe8a672bc')

    def nNdEVBsGkp():
        84 + 11 + 76
    nNdEVBsGkp()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2255d3e02d4bed516b4161c4b80c50764e41f44d1a63ea1fc008aa7beee40b8c'

def decrypt_and_execute_dTsKZENkdl(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2255d3e02d4bed516b4161c4b80c50764e41f44d1a63ea1fc008aa7beee40b8c':
        decrypt_and_execute_dTsKZENkdl('68f2fa27ed2a8ca05002ac72cc6cabdf8d2e7c210f6b38b5eac097cf44189547a3b4cb263365698ba753d3c7f9a7f93e8a79cfcfb3ca2114fd21cb2363b3b700')

    def IVOXYyWSZo():
        13 + 77 / 84 + 5 + 11
    IVOXYyWSZo()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2764ed2a447d204b25710d692ce5517bde473975d12723cdc7281556196ef6a0'

def decrypt_and_execute_OehknXMiCP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2764ed2a447d204b25710d692ce5517bde473975d12723cdc7281556196ef6a0':
        decrypt_and_execute_OehknXMiCP('bbe70fbdc6626bcf3e818c882ed9f7a48c6a63d3b33a3e1ad565dd72ed66f8d7c0536484d4b99cc87081904ec467f600097fb1885d01f1e6ca3455555806d635')

    def VfSCLFcMmk():
        78 + 30 - 81
    VfSCLFcMmk()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '53bc32218975fc81d54c05348d2f88d8552922b502bc67fc57e09ccf6a12af0f'

def decrypt_and_execute_MlCXAajTbp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '53bc32218975fc81d54c05348d2f88d8552922b502bc67fc57e09ccf6a12af0f':
        decrypt_and_execute_MlCXAajTbp('cd52fe6e57f3e700406e7b72657667dbad3cb499792a9a6e0dbf3ab1c1da5a5f3fdcf0ed6871b748b6244f557807a619ad32b350f3f02699edf6c3a4cda70c27')

    def TCzabHIFgs():
        6 - 12 - 64
    TCzabHIFgs()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'cbeb1b405cd53edcaab542b5615f072ed7467a2c4a16fc8813eb4238affc7b91'

def decrypt_and_execute_XLNQjKyfde(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'cbeb1b405cd53edcaab542b5615f072ed7467a2c4a16fc8813eb4238affc7b91':
        decrypt_and_execute_XLNQjKyfde('ee8e59fe72c13b81392b135221278deca887517bc1d88d0399f7df4d5f24279c8258daeca51d129ca27749d2a9f5e0d9c776298dd95a86ce62704f5f2cec3c77')

    def FLaCFWzRux():
        7 + 23
    FLaCFWzRux()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b8d78987f8fa05abb03b572b55cdab6b640558816ce5a177718dab44cc67a2e5'

def decrypt_and_execute_cXiJPJsQBQ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b8d78987f8fa05abb03b572b55cdab6b640558816ce5a177718dab44cc67a2e5':
        decrypt_and_execute_cXiJPJsQBQ('433499fd013949d0eb9992245aa7f8b2a2cba64a58a31f7f547d7e3e760397a6da82a7ed3801417b2cc9efe57169f48c397ffcf9101827453f6e5a40fcda3240')

    def YVMPyAdBhz():
        5 * 77 * 76 - 74
    YVMPyAdBhz()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '162c03e1cabd83c846ff9f4d247c6f72ba4675150231e943d73e5b6089c3cafb'

def decrypt_and_execute_PstreEOUmz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '162c03e1cabd83c846ff9f4d247c6f72ba4675150231e943d73e5b6089c3cafb':
        decrypt_and_execute_PstreEOUmz('71262e662aff4ba4ebc38253c503adb09390b3fefd0419c2a36654312399d7073fc213e5ae6720cdd8c2539a3a676bec5db7e303748f3db1de42e249ccbe44f9')

    def wpGRpGaoqn():
        30 / 61 * 28 + 21 / 18 + 34
    wpGRpGaoqn()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd01e0d5a0ae91d3de39dcebdf8c357963436d3cff0b8100df068e573a02f8f46'

def decrypt_and_execute_lxLZhtbtjH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd01e0d5a0ae91d3de39dcebdf8c357963436d3cff0b8100df068e573a02f8f46':
        decrypt_and_execute_lxLZhtbtjH('354ee6df8987e49f7b6929ed26f627ecf0088ed10cc3a900cc0c5af06db1c8d2f302c86700455ce768ce75b28e919c103cdc6dc6de7514d0f4e2c7ff0ecd7256')

    def lbyJrTXFzx():
        84 / 55 + 1 / 8
    lbyJrTXFzx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c0398002a23ea79cc3b998ff9c0958ed1e6d1b6d530723fe8af8ceffa0fa5cd4'

def decrypt_and_execute_ntzWyUQLih(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c0398002a23ea79cc3b998ff9c0958ed1e6d1b6d530723fe8af8ceffa0fa5cd4':
        decrypt_and_execute_ntzWyUQLih('e3fa3c37790573478ac3e653e1115d37c52b413d9be50660b1b8fd1b847df9fa20ba9bced252e4b0c3ad9599a522cdccde9f03307f48653203fdcb6e21ea348b')

    def KmduLwuxdD():
        64 / 69 * 33 / 23 / 50 - 57
    KmduLwuxdD()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '78e0ba8dc36af823f558a05504df3cef5386a4045f3a18b23f83a212e7fb21d5'

def decrypt_and_execute_JREcyeMFnm(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '78e0ba8dc36af823f558a05504df3cef5386a4045f3a18b23f83a212e7fb21d5':
        decrypt_and_execute_JREcyeMFnm('5967cf6f848a2400e42c2f259c8f2fd56c2b1eab459cd9b8f2b9366f798e1d1475c33f52ae06aadc3fc3fdfbabbc14f99d8e9ca1beef7e481ef1125bb091ab70')

    def XgTrpoPsus():
        47 * 64 / 95
    XgTrpoPsus()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '41fc235f39e71f6ec86d6318098944efaf79962615c1e891b94069b7c3e5269e'

def decrypt_and_execute_npGpEcafHl(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '41fc235f39e71f6ec86d6318098944efaf79962615c1e891b94069b7c3e5269e':
        decrypt_and_execute_npGpEcafHl('e4d03ab44d819b0d9b43e82b08eb7812e72a04a111d3dd1deaf546f33d798b174d8f116386208b27b293d8b1d75d8c811301e44885d0c8ce1814c90c27868deb')

    def QNGRiHpZvI():
        73 - 65
    QNGRiHpZvI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '97090e46bc6c703870e36bda79cc919eed352a5c3bd994a6ccc527eea16a0202'

def decrypt_and_execute_LHJFsaxwjk(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '97090e46bc6c703870e36bda79cc919eed352a5c3bd994a6ccc527eea16a0202':
        decrypt_and_execute_LHJFsaxwjk('9bdb103e46a175f5debd7e7aa8129eb902ae3415bf779472df355f27b200418dae4ec6dc9cbc7517c785eb80bac3246e09dd4b7f906e6329dd94ea82fa3b551b')

    def dyOOLBQXlD():
        83 - 4 * 62 / 46 + 6
    dyOOLBQXlD()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7a313eafbd372c336135d55710f8144cefc9c29528d275ccc9e648da88d2481a'

def decrypt_and_execute_uwgnsFhnyd(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7a313eafbd372c336135d55710f8144cefc9c29528d275ccc9e648da88d2481a':
        decrypt_and_execute_uwgnsFhnyd('03b9927ea3708e78a40e9a1ace50f4e46596705db0b73ac421ea7b23872a8b9387d8537b7fb6018fcef960fdd165d5fd93aa8a7c32c07af992a0eeb4b2b56e35')

    def veZEZLDGxF():
        42 - 28 * 62 * 69 / 16 - 84
    veZEZLDGxF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2633c4517bb137455e1ee9375cb0180f439976c35f5de038d5d34edd93b28080'

def decrypt_and_execute_yXBAzmiDAs(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2633c4517bb137455e1ee9375cb0180f439976c35f5de038d5d34edd93b28080':
        decrypt_and_execute_yXBAzmiDAs('b6fcc5b5221d49b3f98571161a1f4be2e27d21779e7377e588f7f8fb20ec7b3d46c8306e74442a65d86ccdec1c8ea77924009c5f00a99ff9b4ca6ace5d1b1be8')

    def xmviOWWFJA():
        93 * 65 - 35 + 35
    xmviOWWFJA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '6ef5db30b68689f0ff91470de7cc34967bfa169c6b0104759f6fc964a5faaa82'

def decrypt_and_execute_qHDCVlVINU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '6ef5db30b68689f0ff91470de7cc34967bfa169c6b0104759f6fc964a5faaa82':
        decrypt_and_execute_qHDCVlVINU('9c18c9f189459821f7a8bee64b379e221533d32ad850615ecef9a76e2a2a8da4f46e63d001fb17aebe250474a992be9cb4bbf40b43f880cb718cbb92dd3b0a80')

    def dIzoogVcQu():
        85 * 83 - 86
    dIzoogVcQu()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '03ca30975df714ecfed9023b70d4c30d0ea3851f77fc36d2084d1d777a35174b'

def decrypt_and_execute_sXdhsrEgWS(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '03ca30975df714ecfed9023b70d4c30d0ea3851f77fc36d2084d1d777a35174b':
        decrypt_and_execute_sXdhsrEgWS('3af9090b7d85d0af01eaef7ba4af407584f38ce63f59839b97a1abcc92a8d1ed1bb6a6e796beda5d46bd67f135bbaffa24ec2e9f2c2ecde29f9a212c763a7c17')

    def IsjYVvKFqO():
        6 + 56 / 67 * 10 * 31
    IsjYVvKFqO()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '068b4f853b91a9907f1d2939819bd9159f74cff3346c64fbc519aaac0ad0098c'

def decrypt_and_execute_rGnRniYatW(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '068b4f853b91a9907f1d2939819bd9159f74cff3346c64fbc519aaac0ad0098c':
        decrypt_and_execute_rGnRniYatW('9feedda01e05a40bb59739785c8c76312316ca417b47b90957462dd1897bfd06e8278893209eab37ca29ada54f7c7fa3e0f933e0167b6621fea3a9ecd8db0f2b')

    def RNkaVcYQXc():
        84 + 8 + 39 + 90 + 21 / 58
    RNkaVcYQXc()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd39e0642debdc3c2cf543aa43b396468a56a30e3566f5c6a9b6db53da0a36967'

def decrypt_and_execute_AtuWvOYsfq(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd39e0642debdc3c2cf543aa43b396468a56a30e3566f5c6a9b6db53da0a36967':
        decrypt_and_execute_AtuWvOYsfq('4f46e0c9defe9e2b4e6a3650477b8eb73ab0aad3790db9c109cacb6bb3fac3e10277f7039c5193afd8e8f758ea8086f5121d89820ef5d4ab08eaa291a0cfbd81')

    def CHPUYVtFSf():
        82 / 48
    CHPUYVtFSf()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0f8ad80841a8650c652c03f1fc51e05ae00602fb9444f546dea566c992750436'

def decrypt_and_execute_JQNWdoRTNA(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0f8ad80841a8650c652c03f1fc51e05ae00602fb9444f546dea566c992750436':
        decrypt_and_execute_JQNWdoRTNA('c2781a3bfbca83ee286a28ffeec834ea603078b16617770a69551b7e67882892b6fe8e4ae0251b40e42caacacdde5acfb667c6340566baff0c6646b49196b44f')

    def nJgoaMsXln():
        46 + 65 + 72 + 7 - 43 + 84
    nJgoaMsXln()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'de1f102e14b65c6b245b302f3577e360acdd22ba11ecc17399c89c4a53d352a2'

def decrypt_and_execute_DvbLzwUNhr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'de1f102e14b65c6b245b302f3577e360acdd22ba11ecc17399c89c4a53d352a2':
        decrypt_and_execute_DvbLzwUNhr('841ad6e815d223d5e2b825cec559e7749d804dcaef7e83ce3c7f9149bf18b2c42e9a325e03246dbc0586644a02aae1c9c9653845c216c2f58fadcfd222b745e3')

    def QRVPRmrgNE():
        96 * 94 + 94 * 93 * 30 - 23
    QRVPRmrgNE()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1288c67b50d119f1967befb22ca6d22db8a23b674aa036e6281b1880c5b7e090'

def decrypt_and_execute_wbxunpJGOw(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1288c67b50d119f1967befb22ca6d22db8a23b674aa036e6281b1880c5b7e090':
        decrypt_and_execute_wbxunpJGOw('7b0e6b27e8b7fb455e8939f071900fecef61cf06a805015023b9f30d0a99d10fbc02339d9e74c21d559a04bd7f3b8d756eb2e24df06134f550e3c055de1056c9')

    def oxgZTGmkCQ():
        22 * 25
    oxgZTGmkCQ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '386885f21af6adc1ac9ac8b1c2f590e23414be121c060618a9763eb6edfd4261'

def decrypt_and_execute_cGkNskGXex(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '386885f21af6adc1ac9ac8b1c2f590e23414be121c060618a9763eb6edfd4261':
        decrypt_and_execute_cGkNskGXex('6e0770bbce7f7fa9e550c1e06ea22cf9cfbace2f992029d1e219130a5c8eb0b5b977ec3fabd55effe7121671868a42453c376db0a4e863ca8f361a6e45f11bd7')

    def ACIsPKPyIK():
        14 / 19 - 49 - 22
    ACIsPKPyIK()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4f45d7a73167bbcf58fa046449977468fd541c229bd8df8c3ead1ffabb412e42'

def decrypt_and_execute_hkmouKtZMw(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4f45d7a73167bbcf58fa046449977468fd541c229bd8df8c3ead1ffabb412e42':
        decrypt_and_execute_hkmouKtZMw('ed5515f3ea1e16804d200a14c175f37a1a3b9475e1e19be0307e47705ba671cb00a1fa46a66e4e6e8e0ad0e3f6cb42fdd033228b197acbe5b0dbb38e583c81f5')

    def yVJoVlyEqt():
        13 - 14 * 64
    yVJoVlyEqt()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '59e6f77c792825128f969875acd68533ed48467164cccb45e73dcd31731d5756'

def decrypt_and_execute_CePKymJDdz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '59e6f77c792825128f969875acd68533ed48467164cccb45e73dcd31731d5756':
        decrypt_and_execute_CePKymJDdz('01696cb072eb3bcb087b4d2362fbb9b75251c85acd55c1eef3d8bef103d30913e04d5b492dfa992c3d8f55b9757489a3215f837ee822e1ecdc3c971da990b2b9')

    def GsOKWuCcJw():
        99 * 85 + 42 + 6 / 70 / 90
    GsOKWuCcJw()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7faf144dabcf9b2af7c202d4ab72162182d797b1b544b9a911ab113af246cb64'

def decrypt_and_execute_pEcwXEerxL(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7faf144dabcf9b2af7c202d4ab72162182d797b1b544b9a911ab113af246cb64':
        decrypt_and_execute_pEcwXEerxL('1dfdac1d5aadd4924e3a1392358fd999b6d90601845bb10dc9ca27da6cdcff180cb2a91f0be4ba68d276b978985fb0720442ee18715a6ae462f1dee66b97d7e4')

    def TXmBUHJSAR():
        90 * 2 / 35 + 23
    TXmBUHJSAR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7d54c6631e85222d22a32446929f48af43fc285cc465c3ec2d81e8647574d11a'

def decrypt_and_execute_ooAEbzlUhx(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7d54c6631e85222d22a32446929f48af43fc285cc465c3ec2d81e8647574d11a':
        decrypt_and_execute_ooAEbzlUhx('1ed6c9f3cea1ed5b739190509160c1ae2219ad3aa5b4e1cee580045c78e2c154f6fccbd5728229419484413a2d6875c55f989c19f68aa9e25c3f24282e5ae308')

    def KJTXEdmllV():
        33 * 78 * 59 - 52
    KJTXEdmllV()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'fdacca894d51368ac09633d48ffe958206433ad487590d5e2cbac15482870a62'

def decrypt_and_execute_glqtQEPYAH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'fdacca894d51368ac09633d48ffe958206433ad487590d5e2cbac15482870a62':
        decrypt_and_execute_glqtQEPYAH('f9ce0ef34a10650f66661f626ab9ce278425f588171961c1651e3af7f46f257df239fda542378ec6d07d5a8dd2a97edb533599107cb960ee1fc84aa5ed452b08')

    def cmqosVRNfq():
        91 * 16 - 32 + 2 / 7
    cmqosVRNfq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '88966967c6e96bba722ef4e87d7ed37722e8e4488a17b8c7f42d2e0188406f1b'

def decrypt_and_execute_EtRVCWqCzc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '88966967c6e96bba722ef4e87d7ed37722e8e4488a17b8c7f42d2e0188406f1b':
        decrypt_and_execute_EtRVCWqCzc('af8803189a459021c5a08d1813c86ec2f062d0cfe4c7949d21aa2849b362d4cf68464620627db38053f76c0dce670c81e4de683a717356f790e43db298ff2f08')

    def HioZdrIHKq():
        2 + 37 + 100
    HioZdrIHKq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '42045fa749b31c366ad77dba3e2e7f256b39f99ab92f23215db0a8293a1c4c21'

def decrypt_and_execute_qXqLBtEhNo(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '42045fa749b31c366ad77dba3e2e7f256b39f99ab92f23215db0a8293a1c4c21':
        decrypt_and_execute_qXqLBtEhNo('bb8e6c64454aa5dfc6ec4fa595af3dba445bf605d1415511640b211a404097358ab2612b283c5bbfa701ee89e37e07187927cff30e71789093e73c345cb31704')

    def lfiElEnlWS():
        95 + 81
    lfiElEnlWS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4b2814114b70fe69549c8838c696117cf6b89eff758700728a5eaa6649305865'

def decrypt_and_execute_vxGeaPhKlT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4b2814114b70fe69549c8838c696117cf6b89eff758700728a5eaa6649305865':
        decrypt_and_execute_vxGeaPhKlT('d7d66805189ca4665766358e72d51a92330337b5debf951900db2af5b4bcd393a8422a40c0ed57fd2f2b8e658f6bff8a1d112779db96cabe669b969a2e24098e')

    def emxLPtuqWS():
        93 / 66 + 75 - 3
    emxLPtuqWS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8777147de5fe9577946abcbfe59801e5321836392fd51116f455227a5a39421c'

def decrypt_and_execute_bzUUsnOxVu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8777147de5fe9577946abcbfe59801e5321836392fd51116f455227a5a39421c':
        decrypt_and_execute_bzUUsnOxVu('4e27d6e33610875400ed314f74c85752c38a127ce74a89dfa51eb5fc781f0d96b90bead4ab81e099465d54735a30552585ad08596c0026693d8fbb5274e0a377')

    def bBonWmSEze():
        10 + 96 * 55 * 67 / 76
    bBonWmSEze()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2c3d94b36338d8b685914755978a55a78560563a670a45a1905b152c9d1b6711'

def decrypt_and_execute_bZBFulKerz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2c3d94b36338d8b685914755978a55a78560563a670a45a1905b152c9d1b6711':
        decrypt_and_execute_bZBFulKerz('740d72be717b0a5ccc347e2d80e6e2cf8d92c0462d51997a5d28457e388a591556fd995fe4c998be01a97b22abc861f4925004c140a1d7ba0ffb1ef7158e9fdd')

    def GsTkrWJjil():
        50 - 59
    GsTkrWJjil()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'dd6ccd724175f1da9d525fb56c493a2fbb32c734a26fb7fb81c0e8960ebf3a9c'

def decrypt_and_execute_rQehbCjcyz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'dd6ccd724175f1da9d525fb56c493a2fbb32c734a26fb7fb81c0e8960ebf3a9c':
        decrypt_and_execute_rQehbCjcyz('cc5fa719b69f67725151b028afbb2802acfc8dd9af8456abeb7f2245c869d7de7dc23848b9cdf08c4751c2d14eaa7aeed8a1122c1fd1b3e44dfb6e75fe65e48a')

    def YpatVVTzjG():
        5 + 95 + 59 * 43 + 57
    YpatVVTzjG()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '123108d39b7a1eea1d140b96bc400cb297e21c2a5a2dd4631b663f63405d2c53'

def decrypt_and_execute_niqBxlRwMQ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '123108d39b7a1eea1d140b96bc400cb297e21c2a5a2dd4631b663f63405d2c53':
        decrypt_and_execute_niqBxlRwMQ('d1f843c994fdee5a3c6d298954619aa7527197d3853fcd720950d711bf6e21facdb390d8403d8b5de3993c7c5b025b2f9ef81230e51c3c87553a80c167f3ae68')

    def OmReHHsaIo():
        37 + 52 - 41 + 79
    OmReHHsaIo()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '78f7dabac5a5a5480d4404a7f61bc0a7b0a624eddded153ad6c2346a11b80840'

def decrypt_and_execute_xxRHxoMKKu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '78f7dabac5a5a5480d4404a7f61bc0a7b0a624eddded153ad6c2346a11b80840':
        decrypt_and_execute_xxRHxoMKKu('79752d77196d8820d4382e6bcbf9a92832f67b12e252051697f01ffa766f8c7963ef3a4654e13a23592eccd8c882623238fc4e019eca8a141e03064583a734e6')

    def jElJCPIVFf():
        65 + 30 - 96 + 85
    jElJCPIVFf()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a5e6b0353d2f479f7a059cdab9509f2e7ddae9d32b70496187bec3d8c0012abd'

def decrypt_and_execute_ZxuMmJOELM(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a5e6b0353d2f479f7a059cdab9509f2e7ddae9d32b70496187bec3d8c0012abd':
        decrypt_and_execute_ZxuMmJOELM('63f1ca7acfd6a02856339173990c00cd5b6cdc9317c9c1de55883023ce5bc13d0326cec0c56f9811a77713acc2c30c1dbe78642984d03cdae26dd151c225c378')

    def ntKqncayck():
        70 + 19 * 100 * 42 * 75 - 6
    ntKqncayck()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a4ce8754b620d860372eb5e616ddf6673fefcf16656d94e7563253ba5ca1ddfa'

def decrypt_and_execute_mgiigQyEEM(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a4ce8754b620d860372eb5e616ddf6673fefcf16656d94e7563253ba5ca1ddfa':
        decrypt_and_execute_mgiigQyEEM('081858c0b84282978b0a5f290d50241dae40238eb518978f21a91d3fc3b4c03f2aef4d48acbc618773d0a5db684c719980ffa7066f2de243d4d827a5d2264c81')

    def rHchBGkEgV():
        37 * 31 * 2 * 74 / 26 * 24
    rHchBGkEgV()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5b7dcc8a8179a96436840ec310c0c86f2f070265f49d543935785ec7653db31f'

def decrypt_and_execute_aMyBQmSVua(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5b7dcc8a8179a96436840ec310c0c86f2f070265f49d543935785ec7653db31f':
        decrypt_and_execute_aMyBQmSVua('9c7bee97a0e5328d256b2a7c38d9d234864bbfa97885a8186fb45d6bcc975d0616342642bdffdfda580df324114711930bf34f573d7eb2d1bf2a2119ed29a113')

    def wudsQdoeWA():
        9 - 69 + 10
    wudsQdoeWA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '640947aa894e99142752a5f792b01f8b447461fc40f5f331b0ef1cc53266bad0'

def decrypt_and_execute_JUsTTrFdJK(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '640947aa894e99142752a5f792b01f8b447461fc40f5f331b0ef1cc53266bad0':
        decrypt_and_execute_JUsTTrFdJK('d4055fed74f3ef2eb7ca9c17de68f56484ecda17f3e0c5ef558c2e5519cace16d604a3c97eb31d4af0f0a88d621f91e1810117d9eac4d4a5580719c95f16f2d0')

    def TdfSnImzzq():
        22 * 40 / 13
    TdfSnImzzq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c1a50b2014c34ceaf49549a5b044117bafe125ebe2af45cd6da90618df8f32cb'

def decrypt_and_execute_OTjtVFakKK(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c1a50b2014c34ceaf49549a5b044117bafe125ebe2af45cd6da90618df8f32cb':
        decrypt_and_execute_OTjtVFakKK('cc16a3ff4ee27310b130d8d34da479f498d7ab636d2d0db97289f6628c63157525d494375216d498626eb8bb55bf791fb336c6732b3f6a95502d529efab96796')

    def lnRiVyNNtQ():
        30 - 57 * 62 - 32 + 95
    lnRiVyNNtQ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5068c8e90a2b50f416ba859c4abe2a2352118e392759348fe83a9864f0e237d0'

def decrypt_and_execute_COnEOswBgi(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5068c8e90a2b50f416ba859c4abe2a2352118e392759348fe83a9864f0e237d0':
        decrypt_and_execute_COnEOswBgi('f45877d166e98ddba3ec77320c3b9d1ef12b38fe3953ebbb6fe46550b97ba8e321db60a2a189cdc7bc1739c2600f1900d3b8f7180d1ee66ce08e0c1e5bf9a20d')

    def rJrleKVYWy():
        47 * 67 - 78 + 46 + 20 - 13
    rJrleKVYWy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '74f0ff8cc071ae48125102e8d7a282ab92fde5b2f3aa3ae6e964cad38017ed6a'

def decrypt_and_execute_trxiMZfdTk(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '74f0ff8cc071ae48125102e8d7a282ab92fde5b2f3aa3ae6e964cad38017ed6a':
        decrypt_and_execute_trxiMZfdTk('909008e4ac22f65c690f63236a15e0377201c48c7b073fa56d438946a03591c1cfb8fc45664e9fa0787c5b9ad17528400b20e25e27e5fc179bab100c46637e1e')

    def AkvPJiTFqe():
        28 * 47 + 89 / 19
    AkvPJiTFqe()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1d859cb86eb0bd29a534ee34662d8946e6a7e62cd8aab28663c517a397b61721'

def decrypt_and_execute_mXOAosOWnI(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1d859cb86eb0bd29a534ee34662d8946e6a7e62cd8aab28663c517a397b61721':
        decrypt_and_execute_mXOAosOWnI('735af36c18f945ebe0ebc8c03c0016b57de91513c96bba7befac849bd58f29d661c07f1704840b5aeeeef0cdd6f722568292a3ab3583a5cf8fce4dd2843bc99b')

    def PhyXZyFSPe():
        77 + 27 + 41 * 21 + 77
    PhyXZyFSPe()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '45a8ecc7788c310151f1e8c1d616ac13e017d2f98320dad4c9c73628a2de4af3'

def decrypt_and_execute_XEJDXxSKyf(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '45a8ecc7788c310151f1e8c1d616ac13e017d2f98320dad4c9c73628a2de4af3':
        decrypt_and_execute_XEJDXxSKyf('e5bd54258d224d3de1c06bcc87cbbf3b4ad1a89bb230b6bbc6b74e6ae95ed59f73379d8eef0f4f33d9fcca0439565c79d688766270b5e3d9bf03da366b85e117')

    def ZyOqDDeuNr():
        16 * 40 - 11 / 78
    ZyOqDDeuNr()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd7d0359269f237b06ec549dfc42606f80f318c6aecb67426838be09d9189d4c5'

def decrypt_and_execute_WSRCZGgRnX(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd7d0359269f237b06ec549dfc42606f80f318c6aecb67426838be09d9189d4c5':
        decrypt_and_execute_WSRCZGgRnX('20aa60c5b52a629d3b73d9a7616229dd90052aaadffb9e84315511925078a0a966de808d38885d3399e14aba0b476b71b5d30d1f108639953f4834172b46d429')

    def KeJHvVRJGI():
        89 - 86 * 66 - 59 - 46
    KeJHvVRJGI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7c6f70ade89b2ab9a5709e9ee19223642673e4198e134e7a4bab696bdaf0de67'

def decrypt_and_execute_VRtsYsOICl(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7c6f70ade89b2ab9a5709e9ee19223642673e4198e134e7a4bab696bdaf0de67':
        decrypt_and_execute_VRtsYsOICl('ab805eb8f4423282a7cd0a531c711bb9172bedb47d156b610feb8e4cec7436924f4a729d992a1b1c71f9c4a0f533959b9c9257765e8be01b5a0d5c05810de5a9')

    def DfvOPBhqjh():
        52 / 67
    DfvOPBhqjh()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c9842f697d9d7ee51a64f92842817272608f491db23f0dfb24f62cd3e8c11a84'

def decrypt_and_execute_DazxcakCpg(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c9842f697d9d7ee51a64f92842817272608f491db23f0dfb24f62cd3e8c11a84':
        decrypt_and_execute_DazxcakCpg('0ea2228a78782fbda1b43193257ef242c8e67db4627a60e7f113e773ff2be24f8cbfa6e2f0df33078aff48865b159604646620d1a76cd9df29a705dc323b99f6')

    def blaOEghqDD():
        85 * 19 - 87 + 4 * 68
    blaOEghqDD()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a2ccd73608cccf4597b925b34a70a32a87623680f28671d131ab8484b2145fc7'

def decrypt_and_execute_dfdLkguycw(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a2ccd73608cccf4597b925b34a70a32a87623680f28671d131ab8484b2145fc7':
        decrypt_and_execute_dfdLkguycw('ec6e4fcd829221d3113326366817cd4744e0b61a971fbc5d7fa19c59aa653028872bbf7f4ce85abae770dd469d6e1b99d58a181c1d576a9c7880a92a57149007')

    def rZOhjteyZQ():
        55 + 7
    rZOhjteyZQ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9d42fbf7f1891a405582373e7c7ef82251318235b472a7a1b53493af0a99716d'

def decrypt_and_execute_vNUsUvEkRF(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9d42fbf7f1891a405582373e7c7ef82251318235b472a7a1b53493af0a99716d':
        decrypt_and_execute_vNUsUvEkRF('b4adc84be031b777e3a71509ce3f2cc7695cddc4d7c44c01e4800081d8792a4e0839b82d2433ccd3615bdc9e4889f9cea80b701b8d98a0b6c514ea2d1e5089ae')

    def SjRLlLlchQ():
        80 + 30 * 60 * 15
    SjRLlLlchQ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'eb5ff5f69aae354e9349e24fd2169f7b793ec4fc3487a1a28ec87fd43491e3d8'

def decrypt_and_execute_nOlkPViJBR(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'eb5ff5f69aae354e9349e24fd2169f7b793ec4fc3487a1a28ec87fd43491e3d8':
        decrypt_and_execute_nOlkPViJBR('ad9232fc18e82358fd64ea97ef9cdec92adaf18c9ff47df33f96eb183d2b4cd2d62556b02b1e4fec51d718bb83b815c51164f7030ff15b1adb3e4d01cf05ddfa')

    def ykrhGcYvYL():
        37 / 89 + 59
    ykrhGcYvYL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '723641cd7ce0d187e8d9a621e1ba1d76cdad4132eb2e409d57e8a6a0759bf78a'

def decrypt_and_execute_qfJAhkLLiZ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '723641cd7ce0d187e8d9a621e1ba1d76cdad4132eb2e409d57e8a6a0759bf78a':
        decrypt_and_execute_qfJAhkLLiZ('91dc93a5279ce098a544f7a9c4f13baed4b591169b846a87c33d52e332d45e2f5c516e14fa8285772bbae8b72e68f67fdc787cee6d15b67aac2d3cf4c972596a')

    def uWzkwpPOxJ():
        16 * 7 + 46 - 17 / 71
    uWzkwpPOxJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '33867b3ad7dbc2e4cc8c62dfc3c8dc187974bf125d4338199eb48a3e74c576c4'

def decrypt_and_execute_dNtKmRmnuJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '33867b3ad7dbc2e4cc8c62dfc3c8dc187974bf125d4338199eb48a3e74c576c4':
        decrypt_and_execute_dNtKmRmnuJ('e355676a418c44a83bc03bd3abcd3af6de90d28881ac4002de9079085997cd5f528d47d4454e4f3f1542d1afb836164964c5272ef91e208ddf21bb3d11f1cf37')

    def KgvzSsQCty():
        59 * 72
    KgvzSsQCty()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9f5f850ce162e86bcad90d4670c4a5623aadf7b0d957e3eb1f80ee8ce6a048d4'

def decrypt_and_execute_jRBlrsaFbF(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9f5f850ce162e86bcad90d4670c4a5623aadf7b0d957e3eb1f80ee8ce6a048d4':
        decrypt_and_execute_jRBlrsaFbF('e1cd498e20c2a7d4e8812fa9e7ed286eae44ac8c15557b3759fb236a0d3f5f5ea50f8c844f39cd95b82c8ab5f43dd1ba361d7a1a40fcf76693a5b52c01c02dcf')

    def LKfDBpDfeu():
        38 + 20 / 8 - 43 + 24
    LKfDBpDfeu()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '80ae95008e913b3034ada5e389d38bc579db2a3c9f89449aa428b86a0064def6'

def decrypt_and_execute_freFDZCLTL(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '80ae95008e913b3034ada5e389d38bc579db2a3c9f89449aa428b86a0064def6':
        decrypt_and_execute_freFDZCLTL('76c36901b06398aca2eaeb6e983915863587c7154996ddc9d7204ff87196b53af819f225273d16e5c583416eb2899a210b928046710dc30215ec03d6207edcc9')

    def zcGruczBhO():
        28 / 50
    zcGruczBhO()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '23c97975f75a1bf5b2cc699418f1e6c081dbe55b50518b2f8d1a9df7e8d75431'

def decrypt_and_execute_YdiZIiNgcy(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '23c97975f75a1bf5b2cc699418f1e6c081dbe55b50518b2f8d1a9df7e8d75431':
        decrypt_and_execute_YdiZIiNgcy('9164e1a3f392d8822b59f07b2cc6c071e70b6ac2d1f357b630bb6a7d2573368940b2b175b95f14b55c545afe232cfc958f2ec493b6a74a3f5d6b63e23e9b6183')

    def huvtZHZvgx():
        95 / 89 / 22
    huvtZHZvgx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '63b114772b6926646bcf4bb25b4e6d6fb521f6f5ed25a061da78ea205a07f618'

def decrypt_and_execute_qTlPiGWcsM(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '63b114772b6926646bcf4bb25b4e6d6fb521f6f5ed25a061da78ea205a07f618':
        decrypt_and_execute_qTlPiGWcsM('4be989a33317e455c415a86687169ab5dd85416583e4f2be84aeaf586b61e97b29a5172e4a22a80fe2852ea7b036fba5cd27f838817c0abb1bd85a3ca2db9024')

    def fUFkrxIxcI():
        24 * 70 + 64 + 87
    fUFkrxIxcI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2e94a731d2366a5e18e264ee07fffcdacd643a4ec71aa2c86aa925629df99c84'

def decrypt_and_execute_OXJksjZMTY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2e94a731d2366a5e18e264ee07fffcdacd643a4ec71aa2c86aa925629df99c84':
        decrypt_and_execute_OXJksjZMTY('02f5b87a8e735e03531e5cb30f7386046e9cc1849ec419ab43effd9f47db12d36b1672aa1f8d83ae1fa7408ca7e7e3aaf96d59689e7e7762caede8a0e42099b8')

    def chELLywvPv():
        47 * 53
    chELLywvPv()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5bbf31a1e1750cb577c10697913971711dc1e18ee268e03fe8331578e6b4f502'

def decrypt_and_execute_lsgemecVuZ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5bbf31a1e1750cb577c10697913971711dc1e18ee268e03fe8331578e6b4f502':
        decrypt_and_execute_lsgemecVuZ('e7ed4cc61932ed6d22ed04c26a7046d38b793b0d5d3afce06feb72fe218f8c6b8d2a7f6eb6246b8d5ee4ac3faec8bd46f52a6ebc9e13f2801abe3c94dd11509a')

    def PuTyRgxXUx():
        4 * 57 / 16 * 100 - 33
    PuTyRgxXUx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '615a8104d13d25e67fc03ab72bdac1967eeb1871856b75eb1c61883e607efb57'

def decrypt_and_execute_ZvMegWzcdH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '615a8104d13d25e67fc03ab72bdac1967eeb1871856b75eb1c61883e607efb57':
        decrypt_and_execute_ZvMegWzcdH('245f593f62f369f06af322da9bde6ac19a596cc1fcdb89918a8a540e548d5d31ed74d5b756ab9c1dca16ba8cf6cea55bb78ee6b5fe2ca39e00a915e09f2992f9')

    def GjYOqtYJKm():
        43 - 41
    GjYOqtYJKm()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '053c8c53bab57da1b59f2e2c549febf415f96738fb18b2b69f4121a97a0b6cf3'

def decrypt_and_execute_kWdpuiJiBB(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '053c8c53bab57da1b59f2e2c549febf415f96738fb18b2b69f4121a97a0b6cf3':
        decrypt_and_execute_kWdpuiJiBB('a201e4802f1c2ba1a7a15e3b50b260da312cb836231b9f036c8b2826885ef85b38464267e97467b2ee2470104e3b33ac0d139c0d8bec968fd17850c9687bf0ad')

    def HhWDzDxszO():
        67 / 88 + 57
    HhWDzDxszO()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2a283cf52187738923c7dfbd1608da41a99d53fe97f4348ee38f1645835b145d'

def decrypt_and_execute_xyOmuNgOLf(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2a283cf52187738923c7dfbd1608da41a99d53fe97f4348ee38f1645835b145d':
        decrypt_and_execute_xyOmuNgOLf('be8e7bc24fe21567ee600b3be03d590b1e74a6bdc2be32c0fe2de126dceb490370e4e06627bc8d65344f9131c0790566590479b0b7c51be82a2238327b5dbe33')

    def oUyBczFywP():
        95 + 79 + 72 * 82 + 93 - 87
    oUyBczFywP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7a28b271cd309d3cf7758a08b9a49085f3b837c64dcec82ccf0da45a39dfcfee'

def decrypt_and_execute_zjDKFbOxxH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7a28b271cd309d3cf7758a08b9a49085f3b837c64dcec82ccf0da45a39dfcfee':
        decrypt_and_execute_zjDKFbOxxH('5b98542f50f89b9618fab8bb070c8e09e268473d2cbdd4c1a39a5bc08ae4bb145b6474b7aaa0f4aeeb638ebdacbd1119fbd0dd4b6ea3d79c2abb78a97443bcad')

    def dmswEBcnAo():
        40 - 90 / 13 - 88
    dmswEBcnAo()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f39d3e5d7f879567e91924782bbcc8a29c3fa9433b2cab270da66dd9acb2daac'

def decrypt_and_execute_kzQEYzsGGK(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f39d3e5d7f879567e91924782bbcc8a29c3fa9433b2cab270da66dd9acb2daac':
        decrypt_and_execute_kzQEYzsGGK('b7bce86cf5e12f0be1fce58b44b5eb01defc246d9bf4329a949dc7af303a2633f4d0e974f498d0b9746579091b2f0245d004591bd8d9f61a3ed1e73da4e11f9d')

    def mmTkMVOKmY():
        48 + 21 - 82
    mmTkMVOKmY()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '99fb285ce8620fa5aaf855bcd92ff5ec6d5e3a6930ef36bec0165a47131d7d5c'

def decrypt_and_execute_jsbmzXFehF(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '99fb285ce8620fa5aaf855bcd92ff5ec6d5e3a6930ef36bec0165a47131d7d5c':
        decrypt_and_execute_jsbmzXFehF('ba7597e07d36a51e8e7e6f0c7d140218339e0951bc2f25c10623e97b0a5a0c43e1af92843f3f73d68b0f02cb2fdab70f9596e9c5551f1bee6de97bf2e920c03b')

    def LsMtoHmtve():
        45 / 26 * 29 - 77 / 10 - 4
    LsMtoHmtve()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b47be0af98dbb6104785f68d5a8148399f1d8f962a39c01bcf216474ea45cac2'

def decrypt_and_execute_KBgBcvdyCt(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b47be0af98dbb6104785f68d5a8148399f1d8f962a39c01bcf216474ea45cac2':
        decrypt_and_execute_KBgBcvdyCt('7298b283ecbe10c5e6824d6540d1f0430fc8c03d6d27e449f5c1fc02e3f617c555e247673cdea9f8ec4d25cbabdd2afbad2425d5577b01d982133fd5b1e11326')

    def GVqLwunCBn():
        58 * 100 * 88 - 51 * 38
    GVqLwunCBn()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3ab17b8081bf0fd41d4aeeed3e30ed5a4bfc1add4aa9124e477d479a1b5cf54f'

def decrypt_and_execute_JqGGsiVDST(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3ab17b8081bf0fd41d4aeeed3e30ed5a4bfc1add4aa9124e477d479a1b5cf54f':
        decrypt_and_execute_JqGGsiVDST('db7808ffef00edd61e84c010d9089e33a45b3e6fade88648acf3eb3c217e6a28141155b2249ee4f0ea66d81dbfb863fe55192570fe569c1ae7089dd96b4aaa6f')

    def vFuDeoGdcG():
        56 / 21 * 31 + 56
    vFuDeoGdcG()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '17d7352b37f4a024ecf572c011a061e36847cb30a9fb37144437c77306bc535f'

def decrypt_and_execute_VbadIWiHZy(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '17d7352b37f4a024ecf572c011a061e36847cb30a9fb37144437c77306bc535f':
        decrypt_and_execute_VbadIWiHZy('')
gmHNTEmlUq = 30
ZQycUegbwe = 'xQUEeILmaK'
UsElOTpmur = True
xrWjsQJQiQ = 0.41027868562021486
tNlXhBBSbr = None
nnnisZPbnr = ('f2e7c7ae13fc6d6452185a55abedd11dac20ef79cba69855a186824edfb7c239',)
fFKdNvrTZL = {'2acef155036ee32a6a51d1ff8bffb8356501f515561175f6b818d20efd1dd44e'}
OJnKjNHSuA = 99
ZgzzzcJbqJ = 'rnozsmtkQk'
IMQSgZcayf = False
SvkWmSjntX = 0.037426851478276735
LyckVbcZnY = None
ozQJusFqiU = {'59e21cd71fa19429b50d2d1866d7ac0a5318f969c8dbc4128c46701633fa6286'}
mPJLtJYlPO = {'9a3d48e320137a331e8af27248956ec89c2056397570059e34a5afe8506b82d0'}
ADWaURrfWU = 90
gWukldkmjS = 'qwfCJAzhcy'
GOYIJTnAyi = True
ITCEUUjxOL = 0.8552923068757621
RsVLolUQht = None
ZZkWfTXoQr = {'e4f075c972201355b6d768b6778e3f3a801478440c539dbe5329ffebd6f215e0'}
tVVZeNnjMc = ['aef3cf41840fa67bebbadb65738a47403657cb848d044409a7cc4a21489595bc']
TKqxlGONQC = 57
aFqlbgTwlz = 'OlFzOzceyc'
XkNyyrjaed = False
IPRaNROsZz = 0.7032334722829363
rwmmLSkkOH = None
IGehhGpIfY = {'a1abc1ae552a567ba0fde9f75877a7d91bc0435ea11432fd88441970b1c91b7c'}
WrpFnRybbv = ('072b0bfd7b61e7e4206c496f14f971769be0cbe6c2d6baaf41da6ad966085da1',)
hMIgshrzsO = 2
rPXGJEkFTd = 'aGNmcrYEbb'
GQWgtdJyyH = True
jKKgFOzfOX = 0.34081395193025166
qMnRRjDRbA = None
LgWQvgTRGw = {'e1d9dbc5270178a617d207ad2464fa9d8fc05e0d41109f3d50efb4c2760e6c7d'}
cCzQwutUsE = ['d90b5d73a5f3912df52d03b09a4eed141ca4d5235734f484ef0fba885b6df4e7']
CcvThaLtSR = 89
lEiULNopms = 'yXHykMaQYs'
faQKhAnHXz = True
szAMdDzdFh = 0.43906009642593724
osilymXKoM = None
otPXINZUbz = {'b89583e905268bacd0adfbadd405b3453b3fb777577e8fbd15db414814322df3'}
gJUqrpATSf = {'f7c649d6f25f24db1a8815d85ecc21feeac93f9ee1ff2f4cd26a9bd879218b33'}
rzWXqoMGUW = 77
ipKMCVdMdM = 'FaRiuvrsLr'
iFuKHKjIca = False
HNcrGSUCfm = 0.6733090600917755
ywKofusIiZ = None
KwSQOCuMia = ['492c552670dc6e19520239169d88259a33a63a152a283b24ce906ebe7a6d7422']
zAPGImKbho = {'f833f512c255c45b9716fb0cc10628054d61feeff0b6320eb33eb242cd4b86ca'}
ZLzEqYpREO = 45
sKGisDibQE = 'XovHIzJgkQ'
aHekexMOoN = True
QIVizrqUUr = 0.5969346180976709
jYbhSbwwEl = None
GyCjWetIFP = ('c0c174f31c2dfcca87577edbfa32c0a48cb05e98ef3369910e04af2ae9afa955',)
SbFAnIMMCr = ('32eeadf566e789690fa86ec76edaee5fd3d28ea651900b306ee8837efb700ba6',)
CnvpHjeiqk = 85
atVUrhlbxd = 'njCMldnbYJ'
KHevJQUjog = False
eDtaeIGInr = 0.26815232530378696
oGoGdkkReQ = None
xlywkHTBLV = ('434267856f23af4fee26d823ecb7a0ad7e7b9d31cabe080feeda92b17bd4c7c0',)
wTzPcmeocl = ('7179dd21fd7274ca1106d93614c055987bfbd436a3766ff2d31c7839ec1482c3',)
LoLQXxCzOV = 10
eXRSAptMji = 'xJyshgzYJB'
rxXXfzqzgg = True
BrtrMcQfjL = 0.9286429520773287
vjBctBrSHW = None
bkNnOkPjed = {'8ade7cc91e7bd4a32deb2d222151d82418b1ffbf02b30f63adc684da1ce2f782'}
QqfwQdSEYv = ('301a37ebb167c50d551e4f5da4781ece985b647f69a2662c2de9b85d6feef577',)
mDpFSMeJZS = 10
CyPFWWhChG = 'YPFAKflDCz'
nlrsNVYoSX = True
IGvyObQTTy = 0.0784238960356648
PzoCZbzvRX = None
bASBJspjVe = ['effc9e2cddfe6935dd891ff1945fd7aa57f9601eae69200bb9128f4d8bbc8068']
KsdJcxOxqu = ('0f2c03ad58a3da3f2349d930effdee4e1b7293e5976d5bcb80d2090fb3013bf3',)
mwGCnGfbue = 97
seKzTAcgZp = 'bSACUQavFI'
UmEvuXFsex = True
elgxHrvDEJ = 0.4036974210248584
PfDKJnPKGd = None
aDkzXyVOHH = {'ff1d4789b223e8dbc4d3d85c583e003a6fc747e787952e065c1f1d151211dae6'}
KBRslkyQig = {'94db291dd2001fc68a107cb79a8928397bbd1eb17537f5aad16e92403bd1cee7'}
lQDiqrGqoY = 40
HmNYmIrxEh = 'FVpaELFoCq'
lopPmFzstM = False
hqXKaQiGwD = 0.09222691504311009
nAcjZcQXqs = None
pZVOqNlHCi = ['0a921b6f0c436347ca4495aa5ef29eb70b716f77534439a49d80685ae636ba83']
UlvxSFsOIS = ('546af0337ba5a349ab3151fd0938714d622996ba2acc82800f57c774ff1e2c28',)
GadVtRcuYr = 80
vPjTZioudj = 'grJKnsNiTj'
qYKyFfWihn = True
KIryXMDYnU = 0.4689043308252049
jeRvIFXgaN = None
rlAgvDuZfD = ['f80915e1558c1712b7013b963b07828d6b61b71b2cb9802668c5666f85098162']
xpoJGPMNsU = {'b5d41a7f5d39f726be61e133ca7a2a264b408fafe7bad2da1aceb235680a3fc3'}
ihWGjoZADJ = 53
PbSoSHqhcw = 'amHbQTwOhj'
xzBETkeFob = False
kUrWbvyzSe = 0.49303647222738667
pNUGkDLZsW = None
PBErEWwaZK = ['5f45645b7079f962d4be9989a949f73aa905924b667473ac97b3403a4b93a9ba']
HXZMJmuPoO = ('b67d43c5d37c4731460d50a88ef00f9f9d0465520a235b91444d3b52753611f0',)
CzSfwCclZZ = 28
ukZAyyrNgR = 'BnKNlvNLqA'
KdEObLtbGV = True
qZMuhvocHI = 0.2237123767543301
qzYqWmYjsF = None
WDYgVZUeBd = ('0cd7c503ff9e9f84bc509afd59d1a075fd95e224ec9487041cd4b3f7c83d210f',)
xGAykNDamm = ['a318bfa9ccb669f90be0dcf1208399dabc840191abf39740ddc7a9cd411624d8']
lzJTizXEty = 98
oQJdiyDJPA = 'QsLdbzBImD'
CcvhQiUTrf = True
gRFEeiWnsN = 0.021031089454954466
NCmvezqoUY = None
NMBQuofCFk = ('e1f7f41b83a385a2adead276b8ceafd0449ac3ec00f8496fbff09caa86576049',)
YYjmLlBTmO = ['7382b064d486af9398c45fb764ca7f57278d712d05d335d5cd2b7d743ba4f5e9']
LYNDHytcSF = 56
gFsEeDyZVf = 'UzOAVNFEjV'
NBEtoOTSyc = True
tWzGWydJxg = 0.1865935160270792
NGZfjrcjhI = None
TIazjxCUNB = ['c20746f7b540e1df06d78094ce3cd401e20e4f32345c3da036bb27310020edcc']
LWnZxAOEWy = ['8294acb9d1852b7453065ccbe0d04675261127df438741a7ae8293f8a056a95f']
otpPdmonJT = 10
yuptrqFLwd = 'bvSAhwqnwL'
zBAXJpLonm = False
DVxEZTmyDs = 0.37475433822079673
FyKwPgTqEl = None
NeUXiUjWeN = {'1f5faccba6774c9ede401752e83b178300905d96ca724ae8956a641380a7a34b'}
KCPORfyTvA = ['2631fa94d57bfb77c229810c2a4772cacd24c4267619d75340515fdbeff6cfd6']
icGnCJqsZf = 33
OzzKjrXWLQ = 'wBDVqfGIYf'
OXLPHcnJHV = True
yveWhisNfh = 0.6108344108465104
hvnQRdXixY = None
UcOOdEkySW = ['ecaec66c0c7ce1c34ecce9fa4ef458438b74d5aca3393746b723bb9a53443b0d']
UZpxcbzXse = {'165a3b0a50fd5e622af68ff5969d711c81b4e44f505c01e1fc554411f1fcbf3d'}
peIEKqFIsJ = 29
UTRHKXtoPS = 'MUZqGulLtz'
UnfAybmYsD = False
cTnjEwEHOS = 0.44271207915830646
eecNVBhIaJ = None
FmVpawMBwf = ['8e50a174a9abc44649cab65f6ab90f18adf9851ec7ff92831217ca563477110f']
cTWwMpmSiA = ['6522776e1663c8e1140170df1f74ec6f625cf48b8bf7d32c4e704dc8dfb71445']
NgrmXPYQnH = 25
TxUPCKjxBw = 'PaxAvarBpI'
uxkvQOVXDz = False
AlOnYissJi = 0.06426245237725359
AjnRQQElPM = None
JdeURaNTqk = ['7cca2ff8f59b5cf103a7ddbc1858003f1e55c3b64e2d02f99709ef4dfdc3b7b3']
HvfEiaCtHI = ('420ba0179ec4f7ae102c58c3f97bbb5e5ab219e0bcc6a30cea5382b5f85ab370',)
DlPNmIUYFi = 48
rLxTxeZxzw = 'utwogxpBXS'
TOoTCQLuyU = False
yOmcxPONkk = 0.7120009929778175
vdeFFbRzKk = None
pJlYEIzYja = ['7b7788a019c50ad5b8b1b44927de02e05aa3fc4a603bcffa82e7d843db08d9b0']
WTPkspQcup = ['a53b86d7d150008abd0e549b910d7ae2d0c3e4412a8b7373bcdf1067ce6bc494']
HShgAGUXHf = 39
JFLVhznnHC = 'zHdyHWCRRC'
SgAvhzRYax = True
iiRmgRGkkl = 0.49695909670280736
gJClpgLNxN = None
KAuphdwDmD = {'439fc657ca97d118476c337e74e53dfdbfd9b3e3431b75e4150bb118b80f9090'}
METObYjTxe = ['520446ac82063d7f0e2bae21a436aac873b50ed5a799c98536d6fb8b5f390574']
SuaoNtCysx = 58
odxnWOLxRp = 'axeIyoDJEd'
yEsrwOYsGn = True
JszYbMGynz = 0.8183955253485037
WJltkHtEiv = None
wiFgIPbSLm = ('1c1f15ad045cb4e9633dd679b9caa79b0807cf9c633c2d5163f20eeba7fea28d',)
iJUqoNiDrq = {'8e29dbd8fa6afbc27a25968d5e5f312d1422d6c421c40e0b62dcd65e6de097b9'}
AvZSzsXYQo = 49
DMNPWLuSHy = 'SsXtuAjvLB'
fMLLGuotlr = True
sVKAfXOhFy = 0.5147327923929796
XTrGtfunFt = None
fSksoMmGlY = ('7a36b7326b8320cd2b613baa02713e27e06beef355551afae65712be98c87eb5',)
GUoJphExAa = {'5ca6cab6e007721dac2bceb63b01804cd5c1649b81f485bf73c653fed252c971'}
TPQxuGorUx = 1
SmWgnyAoyv = 'UWylxFtKfN'
uZxZvTWrDR = True
WctKibilev = 0.8563821470352595
sKrZsMcmnf = None
AXGDaAuWmZ = ('926715282e5bcaa759ed419eb1697f34ca3c64f3aef4b4daa86b220a0f9f595f',)
ndpsKexbTV = ('401a8768b77ca2139294dd423ba7a9371d4a1df6b7f4e36b1462b7f642258467',)
CLofHjdyfO = 55
hwpCPGgkKV = 'hUMjQYdZDj'
jvLKtwcQvJ = True
XZdMXvXSqg = 0.35322601296124356
WzZhApAXjK = None
YJXIFRSHXd = ['790180b807e0d9788f01e18eefc3df7649f9022445d6172f63934edd43293026']
GjtDlRSCjM = {'765a93ae88445d8c503603cdf2f855bd81c104803cfc988d0d96b47ad9131b97'}
MkmubzEpWS = 16
SdzWOOgwQP = 'thQJegqOVz'
deciwzyhzS = True
RjkUSGgOmW = 0.08351714350073491
gAnasuvlVl = None
synxDlbRqp = {'6062dd9f10c044e1ce190dacd046521ec0129e3a910c8287c2396e69bd84596b'}
JAVjLjJarL = {'36ad3d96c744ad74f20b72acb4304f8a8dfaad4dccd4a1a052e935ddd473ece5'}
MUqzfuegXQ = 32
PnvbyURWeO = 'eLYwIaNxGQ'
UyoPzcPoZJ = True
oSvEzBmqkx = 0.9212203961963851
eHaXoGeoLm = None
ETWkxKfFmx = ('894fc786f42e18d73532c6216c569b37bdf10b35c1a740d7671e5bee1c5f2dfc',)
xIsDZiltXn = ('3c33e4146a0df6a11016c0b5b4f00dcb1e06bc469e606d306bb5c135126aa963',)
ZLUYrchlfg = 96
LgMjVCjOob = 'DxjMApGXOw'
XmLRtWaUrn = True
GHTNsVpHhQ = 0.2739851076457839
GtWkcHwDIZ = None
axiYRncGwQ = ['6af3d2c618a81eff4ea79396a744c4f1ed6e7ba8243f1b479276b6ac388bc9b0']
FEHVAgVDED = ('6b67859b1d542732f414ba3b383f4a28228d1b06c5b09309e8b91a158fa70e8e',)
UkEuUIAtrl = 84
TeyjPjrykD = 'VnLpaIWjJT'
DOqZzBuKOn = True
fOYiEBQLkj = 0.8301638518794352
qInyWaeHiO = None
LJUXBvoplp = {'0af7bc19fbbc37f9d50384cd12c4b08a32eb7c8949bc77aecec0b75ddb736f25'}
rUUJgUujYB = {'032a27b60d2bd4b67892305a9b7e22176e23bd12c1679c7de34ae85e60d26d48'}
JjikxWeEjc = 34
EdmtHjzsMj = 'ldVzIfIguh'
QXvLGFDceF = True
iMsHXFsAEg = 0.7217030728075446
uAgzHeSMym = None
WCwgkGiQbp = {'89306ce30ab544e4a59bd36025044ad02730b8d7892aa53fd2cbb9ee1e86f11d'}
KjjJeqOUbW = ('c864da2d90a782571aecc0bde1fb3a285653bafca3dfdcab241cab0d8c26be38',)
oDmFThJfzR = 40
SmwhoKXSKL = 'utuUrkdeTK'
updMEDAEQK = False
cXIsnzEDFx = 0.9933598441329317
rrOOgoSPnH = None
mhSZbbTBZs = {'9da2cace485da29bd7195777220f792003470f652de45e3789cc8b36ddf58a04'}
dePMStOLYf = {'e62b38bd23d8b8cbdc480ec6be0126e2cc6aa02b1185183d89f5d473df4482ef'}
LawcyhURpm = 58
xwIxkVDipO = 'NnjtnbTlIB'
YmEpjadtZD = False
vLmIevTjpj = 0.21774109079434045
eqCdicTsXQ = None
KYomerxHTJ = ('ef9ff679fbe5cca58f7930c0eed4510dafb5b670f5ca71c63726b85b9b1e8bc0',)
XiPEUWapWs = {'d8819193cc978fa130281e15995c46b0972ce06ab2026e2e6ba9a8f98db92941'}
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '03762bb12883347cbdf083e575504e897971aa5decdeda19470996a4a5b12855'

def decrypt_and_execute_GvQfApkqOV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '03762bb12883347cbdf083e575504e897971aa5decdeda19470996a4a5b12855':
        decrypt_and_execute_GvQfApkqOV('5f62922aef8554156556047eeb330cab0231d8cb89361c43fa2e33b15b2a5080c545daec21e1a5f05b833237dc27859f864ec2ad8bcf6d19751c6815f11d24f2')

    def pmGaDoqosS():
        95 * 23 + 2 * 44 - 32 * 54
    pmGaDoqosS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '061a883b25cf3d7051fd2f9c70fd15ac6107b79aa5089391c53878bc5bad2a9b'

def decrypt_and_execute_YrDOMDuKEj(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '061a883b25cf3d7051fd2f9c70fd15ac6107b79aa5089391c53878bc5bad2a9b':
        decrypt_and_execute_YrDOMDuKEj('2a5fac8fffbfd1fb096463e3783d928faeb76609883250a0dadf6d3d2bb83a80a17c447b1c95c1deb1309aa534a369df55f40a34e2ceefd1ec3269b345b63b2d')

    def yKopiUNKCq():
        58 * 64 * 87 * 47
    yKopiUNKCq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e12c638b469e27199c461be07867ad94bc6cce0d54c1f999ecfc37421dbd29d9'

def decrypt_and_execute_iNoPWeTrdV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e12c638b469e27199c461be07867ad94bc6cce0d54c1f999ecfc37421dbd29d9':
        decrypt_and_execute_iNoPWeTrdV('45ffb5f224f3998c64e661f3df975f5b7c7c5fe714a10f1f76dd0319961229e332f6bcb39a68a5175992d565a6eee2e0d9dbd202357a19fc948dc13484576136')

    def ZWQbVOxGId():
        1 / 51 / 91 * 21 / 31
    ZWQbVOxGId()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'bc71ded28a5960656bdb3b2998736dcbdb60390904a2f75b7db954bcccc90bb8'

def decrypt_and_execute_oInHGcmZTh(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'bc71ded28a5960656bdb3b2998736dcbdb60390904a2f75b7db954bcccc90bb8':
        decrypt_and_execute_oInHGcmZTh('c798d70263c071659ee98333052ffe9ded271bf76ee4ee80ba4a32b7bab2a29485cd81fbb99b2f99e8dc52137b59bd01045f66c5b2b7921ea6ea7b320f4d56ac')

    def UiiGiittMX():
        31 - 93 / 64 - 100 - 4 - 73
    UiiGiittMX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd893dfb093a120817ee2783f7885fc1f5d4f6ba4063dd7f1e603853dda7d78d3'

def decrypt_and_execute_DJRUFHAjSn(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd893dfb093a120817ee2783f7885fc1f5d4f6ba4063dd7f1e603853dda7d78d3':
        decrypt_and_execute_DJRUFHAjSn('ff3d9f1ea89aad267d39a2a208eb28bc2868f7530418d8e590422c58b890bac0f65ea39fa82cbc8296e20423c4614748e8ad86d559b404ba0e44c1edab504f5e')

    def AUrMVKvitx():
        71 - 30 + 14 - 22
    AUrMVKvitx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b93caf462132d2253c9a4cf439bae80e27c6c8c37e2d47abd61ff76d453d1753'

def decrypt_and_execute_lAovDSfXAp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b93caf462132d2253c9a4cf439bae80e27c6c8c37e2d47abd61ff76d453d1753':
        decrypt_and_execute_lAovDSfXAp('cb3330aafc7d832416cc8637a25962aa79401dee284a269f29088ddc7d8df7bd26f4c1982130bf61dbc0880ab1e61569f426db3db756e30d108c761d8d84381b')

    def rPtZcyXqxx():
        30 * 59 * 2 + 79
    rPtZcyXqxx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd017dfe151ed312addd330c49ec905ef6ad3429c885cf8e2c228e9fb7cc68d0a'

def decrypt_and_execute_WIyVnwlufP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd017dfe151ed312addd330c49ec905ef6ad3429c885cf8e2c228e9fb7cc68d0a':
        decrypt_and_execute_WIyVnwlufP('4b85ff70b82ae1b6e40410ff1ce526845f7d42caf1b2e2868a7600439f8a553a42ec7cd792297a51645033476d742695f16b1d905764152d0921aa0035125e78')

    def LizBpvyezZ():
        68 - 11
    LizBpvyezZ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2f91646f193873f7e45f99e43a59c763d01f0f3741f14035092035360c147c49'

def decrypt_and_execute_bCWEHpgOBT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2f91646f193873f7e45f99e43a59c763d01f0f3741f14035092035360c147c49':
        decrypt_and_execute_bCWEHpgOBT('205c4f15b4ac99f76bfecbd43dd47b59ef355e1c8b3643833f28adc09233019d98c6b24a3677b65289af83b3130e63304ae0a64c4ed2ab79586e6ec76e6d51d4')

    def MMKuPBFryg():
        79 + 70 / 34 * 71
    MMKuPBFryg()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f2995e67d0df036773c1fee2d01889c69699529ff61aee69599cee9cf39386a6'

def decrypt_and_execute_VGxAkviukH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f2995e67d0df036773c1fee2d01889c69699529ff61aee69599cee9cf39386a6':
        decrypt_and_execute_VGxAkviukH('4a871209871fd42db90688c420e1450ee6b99c8f4ea3f138a6bbcf2700900f998725ec94406588eb87dc6baa91f647442b98f50659851ae38147724a19e146e2')

    def nXwqxpyrkp():
        22 / 43 * 68 - 76 * 40 - 4
    nXwqxpyrkp()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd4fc66803663ddc06f948fca61f56ef0787527b69ef8ee1da1978e2118674f0f'

def decrypt_and_execute_nPwMTzhvlr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd4fc66803663ddc06f948fca61f56ef0787527b69ef8ee1da1978e2118674f0f':
        decrypt_and_execute_nPwMTzhvlr('efbd31b601534598b60ac0f0d321c9ec84e97c9f6e3b97e6e07a6ae91c727cb71b36e3869d67cf6dcad95ac30842e594046df071e6b54958860ff2e0e070168e')

    def ATdRmpYxQY():
        19 - 70 - 92 + 35 - 22
    ATdRmpYxQY()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '58e0233a56fb612dee86dfd2d70bbed80278bc43d21de35922e6a4d5567df2a0'

def decrypt_and_execute_QJbAcaNvBU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '58e0233a56fb612dee86dfd2d70bbed80278bc43d21de35922e6a4d5567df2a0':
        decrypt_and_execute_QJbAcaNvBU('cfd5aa4d588486fddc83af9b2583491b8b3de0253a3abbbeafe10da32c6ae8954f9e56bb06d870785c9a2adb94113a00c1f25a0bdf8a9ca6432a8b91829e7119')

    def FFMmASgWey():
        27 / 61 - 27
    FFMmASgWey()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c73f8344d3d6e1f326da0c058b8468ad782cd4cc5266a38cd9608503036a7597'

def decrypt_and_execute_hYIzdMXHAC(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c73f8344d3d6e1f326da0c058b8468ad782cd4cc5266a38cd9608503036a7597':
        decrypt_and_execute_hYIzdMXHAC('e7ecf21876872136a169fb529e8c1a54d418796c5c9ddf1bd038e6acb6fe3462a8018ba57cb54b6925d6d471a3bef9938b61b698745abc20e7d4f2de90ce014d')

    def YLGJprkunC():
        16 + 23 + 71
    YLGJprkunC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '22b8f93b7cdd7f40963efa5ceae52ab405b1f7f55dcb455e55ab6c0d4e3617ae'

def decrypt_and_execute_EvLprwUJAc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '22b8f93b7cdd7f40963efa5ceae52ab405b1f7f55dcb455e55ab6c0d4e3617ae':
        decrypt_and_execute_EvLprwUJAc('60a3332bd9af2b48e14ed736e9210650d6b1e113f87c492097d8f9f1dcd5db8c9030b626b4db4699d8ce4cd975c8008f2c8aef5c742bd7fedeac7286c8ca6def')

    def bVeOhdluXb():
        97 + 77
    bVeOhdluXb()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '854a1bc586e8c300ba53f28beee294418d8ce188d86af0b7a1b5197bbfdd8269'

def decrypt_and_execute_MIABUcXRcX(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '854a1bc586e8c300ba53f28beee294418d8ce188d86af0b7a1b5197bbfdd8269':
        decrypt_and_execute_MIABUcXRcX('4bbde8551d2520b4687b08b3c1eaf32681b891c4d52d7101cbcfdb424170eddcd2b637b2d44c8c9acdea2c67f08bd33dc3a486dcdcea84c589db3fa70b20bb47')

    def bSUJwaBYpl():
        40 / 7 / 53 * 78 * 66 / 90
    bSUJwaBYpl()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ba6271cb7da9969bebcd1aec60d3c5e562b3315825adf7ad203b5eeafe892ac4'

def decrypt_and_execute_DFYkVrxtpu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ba6271cb7da9969bebcd1aec60d3c5e562b3315825adf7ad203b5eeafe892ac4':
        decrypt_and_execute_DFYkVrxtpu('1fc0d6d1165330de9f60fa8eb6ca1235a96d954a11340c8daa809f808b17b08ae1819fe72ef1784a3ec9911efce0a5024c35671e7a59680e67a08679180a5fad')

    def SrxEVwvpoZ():
        27 - 60
    SrxEVwvpoZ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0f8f7b4506b25591b63b5f71d805f44c74b8d24cb650eef1f0043796ef79d870'

def decrypt_and_execute_JHcyvqcXQT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0f8f7b4506b25591b63b5f71d805f44c74b8d24cb650eef1f0043796ef79d870':
        decrypt_and_execute_JHcyvqcXQT('a849cfced72d9d5d6fadd634a4e5a432f690d00c06bd7705f64077fb6bc3003e671ff454745230c7dfea26b90fec58e756034c93f902e410d4e603ce317eb8d0')

    def TruWLtdJYD():
        39 + 37 - 24 * 60
    TruWLtdJYD()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ed460f962bbb24a226191ede0c9869145866a816cde1a61fce7e03205d2b3fd5'

def decrypt_and_execute_alKZEqGXRH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ed460f962bbb24a226191ede0c9869145866a816cde1a61fce7e03205d2b3fd5':
        decrypt_and_execute_alKZEqGXRH('4adb7125a45bcdd2bf6153d15a2bbdbc6952ddfaaee5ce037e734a89f814a0d2d37010f51b52127a6e63b327501e42d495df6ea2a8e6b838780c9aa3085e24f8')

    def YUgRCpkkNR():
        80 / 90
    YUgRCpkkNR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '46bc613647ffef2aa01e2f827dd6025ea27cd7ef0c4d0eaa9dca02dc9094c80f'

def decrypt_and_execute_idUMfizqRJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '46bc613647ffef2aa01e2f827dd6025ea27cd7ef0c4d0eaa9dca02dc9094c80f':
        decrypt_and_execute_idUMfizqRJ('7976bf954fd9991ac394055a263fc9c4bc0919bfa488ed090618d8ea1eddcba684730ac79bdba175b71665af318bdfccba188729fdd4ddb7712ac8e51d7ca826')

    def JapkDQNVNR():
        79 - 9 + 8 - 63 - 3 + 86
    JapkDQNVNR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd5783ba4d8cc88d31a4064464788bd5cbd2649df9fa7f0320fcdf831da46f213'

def decrypt_and_execute_gFVEHfUmBx(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd5783ba4d8cc88d31a4064464788bd5cbd2649df9fa7f0320fcdf831da46f213':
        decrypt_and_execute_gFVEHfUmBx('37a7b4a5576b1722d2fc16ae2bde278db3ecdc1c07b35c9694c94ca27076128839d3b81953fec88e8c6fa456dbf446b2a6e46c1b96b19fcffb9fc086de2187bb')

    def TsIcMHoXCL():
        34 * 46 / 12
    TsIcMHoXCL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '899c637e67afbf44a09487d31978f9cc7dfb551775c2e2f193bcb5f0719ee72e'

def decrypt_and_execute_SKUKYZAeyd(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '899c637e67afbf44a09487d31978f9cc7dfb551775c2e2f193bcb5f0719ee72e':
        decrypt_and_execute_SKUKYZAeyd('cbfcbc939b92728fe9981c063ea4d039eac42115eaf6a5698fd51023d37f80f8f286820eb1ca8c754aeb3fe0de814836ad2207302e62a895f36a4e5bcaa332da')

    def uJGdlbmayR():
        81 - 85 / 50 / 24 / 66
    uJGdlbmayR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '10d52f23deacc64fe062daf355a512e9656cabe8cdb46d600e1fcc48a86f60f9'

def decrypt_and_execute_BIPmrGbrnl(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '10d52f23deacc64fe062daf355a512e9656cabe8cdb46d600e1fcc48a86f60f9':
        decrypt_and_execute_BIPmrGbrnl('19f7de9e0b103d30678211f60d3ca8bba46498d023f24523b7fd8f33693b182b1900948b7fd7f235cda75406696f551a9a1ac8ba979b682fbe19d2be32fd43a3')

    def kOwHXWNorS():
        81 + 85 - 25 * 56 / 20
    kOwHXWNorS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ee99fe39dc95dcba4b065b9ad2b0945c9c3c350d6f0b6138e9d67d1145c573b2'

def decrypt_and_execute_fFDfaUtQIJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ee99fe39dc95dcba4b065b9ad2b0945c9c3c350d6f0b6138e9d67d1145c573b2':
        decrypt_and_execute_fFDfaUtQIJ('a9608939f37e08884f84aa5170623d97b9819db151f3273ee4f72541a3be257262e76601bad1ec6109be0edf1854bab6f6347331d2ddec32f2516577c760827a')

    def hFfOsRhPXS():
        9 * 70 - 94 - 30
    hFfOsRhPXS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '97a09372438db9bfd66109bd0473e9c1806cf4e39c4657afc335410c39204b3f'

def decrypt_and_execute_pAATiumBCg(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '97a09372438db9bfd66109bd0473e9c1806cf4e39c4657afc335410c39204b3f':
        decrypt_and_execute_pAATiumBCg('ceb338dd26d74bf1b2d5be04d63ae5b938848540261c0d2507dc9455aa408089d8c83d05e731d33a2c8373e14280ca7cadc92c8ed68b1de1f082c0fb75cff056')

    def sPhZcAbzur():
        79 - 80 / 27 + 93
    sPhZcAbzur()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4c61625925d738fffa99fe31d763dc67301da94fef4f065da0541f37e2558170'

def decrypt_and_execute_oskuHciEiJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4c61625925d738fffa99fe31d763dc67301da94fef4f065da0541f37e2558170':
        decrypt_and_execute_oskuHciEiJ('8e501e5b3a9e91feeb7a8c288362c281e4ad9a6d726592b488c9e7d8a45b2b8494f3a81a5abad8eedbb974464d5bdf8f2e7a09274ed18876690fc93db41a04de')

    def OmCWiCgILa():
        17 + 89 - 27 * 56 - 39
    OmCWiCgILa()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4b7d4a8ee549bd71c7f93cdb4b887852a917a2ec3afa1c2193b5be6329849fd5'

def decrypt_and_execute_yzCyZrLArI(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4b7d4a8ee549bd71c7f93cdb4b887852a917a2ec3afa1c2193b5be6329849fd5':
        decrypt_and_execute_yzCyZrLArI('4d7887af57d1caa9b953364bc106c0c41a57967035eebec2c2d267b0a5a38afa6abe49ffd63803bbeb6564a28c437b06583fc4c2256bc5cca6340832aa2104fe')

    def SaidSFwGXJ():
        52 * 9 + 96 - 99 / 57
    SaidSFwGXJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '379be7c75e438912a0e8d12adb91f1bf691b18377741fa8ece9eaf14f810ebe9'

def decrypt_and_execute_ZPnBVFZjBO(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '379be7c75e438912a0e8d12adb91f1bf691b18377741fa8ece9eaf14f810ebe9':
        decrypt_and_execute_ZPnBVFZjBO('271a8d092397f3c5f03fe422f8b25bbccd33b2d5a86d4ff1cd6554fc6a2bdced1a878fbf52e4d9ced4865fa454379b631cf56b498173d6f6e34ca5d0a424ba5b')

    def XWtuXrVaAY():
        64 - 46 + 87 / 74 + 13 - 84
    XWtuXrVaAY()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '838c6c52606fe85af364959ad28d1d7f0ab110a0dda28dece4f61b8fd584ea7a'

def decrypt_and_execute_gPHkPxcitj(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '838c6c52606fe85af364959ad28d1d7f0ab110a0dda28dece4f61b8fd584ea7a':
        decrypt_and_execute_gPHkPxcitj('33275d7b1ba9dfd49d9600771ed2c78cf50d9f0b6a9e65d7e173e28d6691bc5de58075bd68bc361dd6d57b089dfb560f280a03f64698f41c2428996d78bd4a7f')

    def CklcKteUoV():
        29 - 30 - 95 - 60 + 10
    CklcKteUoV()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1cf727c337f1a3a2c8313e5b33dfca1087dcc7a4cf74737b8b5f98b27c12caa3'

def decrypt_and_execute_YWLikFzuuc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1cf727c337f1a3a2c8313e5b33dfca1087dcc7a4cf74737b8b5f98b27c12caa3':
        decrypt_and_execute_YWLikFzuuc('fb6f07d86a7eeac7c0264c47eaee2ea79a35c64846b4dc19889a738d9bc4e90859948c2312521d9388b562e2967c7f9f4a298a4dc0ba32306c259b7827c64254')

    def RjasepdBjr():
        9 + 55
    RjasepdBjr()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'aa777cb188da0a07b3e123600bb8ac3dfa7ae9b159de4fb2a3814d09c17a141e'

def decrypt_and_execute_AQThphkWkY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'aa777cb188da0a07b3e123600bb8ac3dfa7ae9b159de4fb2a3814d09c17a141e':
        decrypt_and_execute_AQThphkWkY('33e57cbc0fa384599d22edef106fd0b9814f391afaf9dd20f2376d4dc4eda786580d1d5e5bddae262dcbba32198d94d26cdaca27caeb563ffac5302758b4ce26')

    def xURjxrBPZc():
        93 / 62 / 13 + 94 / 27
    xURjxrBPZc()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e2c0e2b0bef7dd55d29dfabb4f6d32edc4c68205da7e697e0dc941fe09ff1b15'

def decrypt_and_execute_GsPisSPHNj(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e2c0e2b0bef7dd55d29dfabb4f6d32edc4c68205da7e697e0dc941fe09ff1b15':
        decrypt_and_execute_GsPisSPHNj('b284dacf4167104eec8c538cc2461d736b94159990693c634537e52ee3dd81864ea83bf95703052476cca2607007bb5d185bb80656ffe86c5d1cc331954850f8')

    def khAjHOiSnB():
        13 * 93 / 56
    khAjHOiSnB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '89083762e1da51765afa31cd76928c14c711309d91434a958ee5aae105f529c0'

def decrypt_and_execute_UDWPVvfAsA(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '89083762e1da51765afa31cd76928c14c711309d91434a958ee5aae105f529c0':
        decrypt_and_execute_UDWPVvfAsA('e89a633c4dbc492f3258085052c134fdbe75d6a07f9e91a1128a2184fdb423a530244b052e0336e8b640205a43709ad16370e7cbfdfaef6f183666fe8bdf0dc2')

    def pAfirignsc():
        53 + 99
    pAfirignsc()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '499d7bb1f3019c10a01086c8a8d7dcbb91e533a275f7cbe15d06d31f299ae909'

def decrypt_and_execute_HelgatpUUy(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '499d7bb1f3019c10a01086c8a8d7dcbb91e533a275f7cbe15d06d31f299ae909':
        decrypt_and_execute_HelgatpUUy('643b991d0e9545ca20c5c8c29a25a0e8a60e411daf745faa5db4b5d7ae317cb088ed472e194da8c32d42f22ff3ae71318bfe496fbc7bd5087b28a567a3c8496a')

    def SjYvoqMfwv():
        31 * 46 + 58 * 18 / 25 + 39
    SjYvoqMfwv()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f55271dba2c7c4f985a8b2df3dc60aedc2ceb00e02ad9949da5962027a628581'

def decrypt_and_execute_DmegoJiOpF(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f55271dba2c7c4f985a8b2df3dc60aedc2ceb00e02ad9949da5962027a628581':
        decrypt_and_execute_DmegoJiOpF('bdbebca74bbe8d0c8f6b707320a0b2d4d0b51c279604e8b8e3451fadf3c5aba3fe7a4a201012e303c03d611d2230a6786b100ddf70e7f824e36dcb8ab47f3ac3')

    def xUxUYtjVfA():
        71 / 39 * 72 - 59 + 83 - 32
    xUxUYtjVfA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'dd8fdb00d182c3c63f89b31b07f3f92ada3a759be3b414e20ebc9592f1bf3a7a'

def decrypt_and_execute_uZlfbzdlPt(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'dd8fdb00d182c3c63f89b31b07f3f92ada3a759be3b414e20ebc9592f1bf3a7a':
        decrypt_and_execute_uZlfbzdlPt('ba3641d80d81cb9131572238d4157468be7f8826e71e741ed96f2d8da6b13b27c6aafdc6a8557f6641430df0402dc545fd1ffdfcc4cbad6713ccdb1a41d98f9f')

    def JjSgAzdmaD():
        39 * 98 / 10 + 73 - 64
    JjSgAzdmaD()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f6a0120b9ed7eb3583e2857d834e4870044dc4fd60cf06ffedb9158c02b801f6'

def decrypt_and_execute_stGQKkOuVA(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f6a0120b9ed7eb3583e2857d834e4870044dc4fd60cf06ffedb9158c02b801f6':
        decrypt_and_execute_stGQKkOuVA('fbf68dc7537887278a89ae6eda80841c916fa2fc793061c06dff3405b522642a04127aa37ec87056be9e1a3b54b2d769d9b8b221347ec772b163721ac384616a')

    def HoUcEtrMCX():
        80 / 68 * 13 - 90 / 42 * 71
    HoUcEtrMCX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'de3a58fb68dfd0b4bdf66b68fb45f1b6c9d8e8b53da0e066614f96203e4d16c4'

def decrypt_and_execute_fXhIYRdfmm(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'de3a58fb68dfd0b4bdf66b68fb45f1b6c9d8e8b53da0e066614f96203e4d16c4':
        decrypt_and_execute_fXhIYRdfmm('14c085632ffcccc6d48d9ab1ef269a0a4266d48baaa280f80bffe9d62df7c8b1cf28706d1f161e00d51cf2af666f51663c7a3846d047f1f35b7be4aa38d5a6fa')

    def kChESSAakx():
        69 / 18
    kChESSAakx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '803392490f0feb013f06a634c3dc42d294fdc89daa7f2b9577497e5996b8f8c0'

def decrypt_and_execute_GSGfbjkLxR(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '803392490f0feb013f06a634c3dc42d294fdc89daa7f2b9577497e5996b8f8c0':
        decrypt_and_execute_GSGfbjkLxR('18481626a83cc17ae8b6b7313d58fff13bd7b5e6d3444d1276f38762b8a59cb792b1f1b0e04f66c6b508d80130ac34e940b611cf7fb16937700cba0b5d77b2f8')

    def AYUcNxCjuT():
        93 * 16 + 79
    AYUcNxCjuT()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5fbc23930f3375548cd5ebf776f7cdf2e0fce0432f89ed389ea553bc9c6977d9'

def decrypt_and_execute_IEHxehjKsB(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5fbc23930f3375548cd5ebf776f7cdf2e0fce0432f89ed389ea553bc9c6977d9':
        decrypt_and_execute_IEHxehjKsB('28de377e67d45f9801c6a4aadaaac4bacb63311d71844656f1d74433db738832c178cddea41ca9a591ef7a314f05b112be21e395ae80a4fc5b0a1f08f7e2bcbf')

    def HhONJIdQGC():
        68 - 53 / 39 + 27 + 20
    HhONJIdQGC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a64e051ad8cd71662165758a85889a573716197f7ea640598367479a3568b315'

def decrypt_and_execute_DKGCjPtZkf(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a64e051ad8cd71662165758a85889a573716197f7ea640598367479a3568b315':
        decrypt_and_execute_DKGCjPtZkf('9f66f99ce5f19f9ac89ad79b019289a01376f79b6c174ece0c2f1d3a8269b1d2827d55c2f9adad646402290764f61b39ce8225973568d2d531a8a841b6c02cd6')

    def DikAIubair():
        6 + 58 * 15 + 6
    DikAIubair()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e7f78a5c689b9376721094a14755c974f0bc5ce7471181e54f6b488cf5f0c7b6'

def decrypt_and_execute_ZBJzMwzxqo(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e7f78a5c689b9376721094a14755c974f0bc5ce7471181e54f6b488cf5f0c7b6':
        decrypt_and_execute_ZBJzMwzxqo('5a2937a140aaceae873809f13838ba1c2652f5a19f209bf26df8eafe35160133aeb4b55915a7d8807c6bf961da25ba3c783cccc945dbeed688a26f1957247a4c')

    def EdKhPhNpUp():
        46 + 10 / 56 / 96
    EdKhPhNpUp()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9a3040cc5a6a9327bf72a02a17281a3be1247024805017afee11449aa37dc94b'

def decrypt_and_execute_CLjQhWxTou(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9a3040cc5a6a9327bf72a02a17281a3be1247024805017afee11449aa37dc94b':
        decrypt_and_execute_CLjQhWxTou('6260d92e68bbf9c6858b5aeb4641f0aeb89c5fc18e26886242191bcd9cdade335a44db6c6fb21ba218d77e3335cc95c8429561dddccb8ec466d00fcf4e38d2c7')

    def CAgWUVxONh():
        4 / 96
    CAgWUVxONh()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e2ba3a3f69bdc3b9f98da6fb1d1a0ed4649b6cd4f929a23ff809e583d589c33b'

def decrypt_and_execute_gaHoHjGWcY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e2ba3a3f69bdc3b9f98da6fb1d1a0ed4649b6cd4f929a23ff809e583d589c33b':
        decrypt_and_execute_gaHoHjGWcY('397e99ac9336afe0e4d330b24735b40ce92f4f910fc362a0c9716a44752d9f0a8f82b6a841d0f09a27e7a9a03043bb43faef200ad34386f76fcf41a5aacd36f8')

    def WNHdsZDBhR():
        70 / 96 - 26 - 14
    WNHdsZDBhR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e64bafcc71360b67aeb2ccc83a0265c67981d742130d046d4548f69e53c2e230'

def decrypt_and_execute_iHsyIyHZiO(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e64bafcc71360b67aeb2ccc83a0265c67981d742130d046d4548f69e53c2e230':
        decrypt_and_execute_iHsyIyHZiO('2fba0e8745c99bee801dc48da00d5962321de5d5def5f816eae58715a548d7f9e23e5ec1256fe03858121a49e153ae96cf0dd3fbdcbfa3f95706429456a60640')

    def WHpJmXNrxx():
        37 - 24 * 38 * 13
    WHpJmXNrxx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '36e522eb42c727cdf0fa2644a5e43d77c8cf1dab6f520c6b0ee05b240d30fb2c'

def decrypt_and_execute_umIOCfECuD(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '36e522eb42c727cdf0fa2644a5e43d77c8cf1dab6f520c6b0ee05b240d30fb2c':
        decrypt_and_execute_umIOCfECuD('73067bd931536dcd9df56dbd329cefc233f5f46179041f061c90b5b41604774705bf2cc2e54802f21fb9e932007b0c180c0983f704636486398399cc3176d33f')

    def AGPisMgdfN():
        85 * 43 / 58 / 82 - 63
    AGPisMgdfN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b2fb0fbdb6499f53ecbf5a4861d5b45953cd7e653164c12aa7f5c32361eadc27'

def decrypt_and_execute_yauWQOkjQN(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b2fb0fbdb6499f53ecbf5a4861d5b45953cd7e653164c12aa7f5c32361eadc27':
        decrypt_and_execute_yauWQOkjQN('4447475961721f9584a6a7fb244a652212356960620e410fc500280c6a8f57c78c5dc9590dd094adc95e8814e1566d878c9c19ab4f45e9b2384aa6881d80a439')

    def HRpOMaHdlo():
        25 * 51 * 98 / 57
    HRpOMaHdlo()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '078a8337fa56e4a12bdff162a2e0e4267ce0306bef24bf98b702c96b2a6d3fc7'

def decrypt_and_execute_zDpnCzyrAP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '078a8337fa56e4a12bdff162a2e0e4267ce0306bef24bf98b702c96b2a6d3fc7':
        decrypt_and_execute_zDpnCzyrAP('024d05d3932da6d1e1dd36e81d169a7311ba6578e13a489949c7df39f05511b21c917d85dbbfc02c24b59769ef5deed829b8039c275e691b1aa6f18f2654f53b')

    def VdGEjyLENv():
        25 * 19 + 42 * 86 / 42
    VdGEjyLENv()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9750c1da16bfe89989b4124b2cbb7400be978fd6c98da012420c0d90d5abc1b9'

def decrypt_and_execute_pzCWaanFNZ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9750c1da16bfe89989b4124b2cbb7400be978fd6c98da012420c0d90d5abc1b9':
        decrypt_and_execute_pzCWaanFNZ('23fde16a1f978cc09bee3720dbd0f29640c4214e3339e08e2d08c9f04bddcbec983da4ecc4ccf3feaa097f18c6283c099ddab5b42022e05217ef5466ab1702e0')

    def uxuBTrUlce():
        84 - 42 * 74 / 11 + 23 / 40
    uxuBTrUlce()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '6045b7affb66f49b4297e0321e7473ea90a87788cb7b713f0e922da57a22be58'

def decrypt_and_execute_KUoSnPnLeJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '6045b7affb66f49b4297e0321e7473ea90a87788cb7b713f0e922da57a22be58':
        decrypt_and_execute_KUoSnPnLeJ('ea293b771449c1d3a2da70f402931146e7e1d635da597c08b8fe140ef434c828cca7805dfa26929c675729c321b8307ef55efed546a3b0daa0fd1dd31973a673')

    def WoSsPgXabR():
        18 * 77 + 77 + 59 * 44
    WoSsPgXabR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ad528062c8d8baede959736984ea7080b86cfc542bd91b6f88cd0b5c7d2d8a80'

def decrypt_and_execute_ZiRRxDkYUm(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ad528062c8d8baede959736984ea7080b86cfc542bd91b6f88cd0b5c7d2d8a80':
        decrypt_and_execute_ZiRRxDkYUm('c0ced334bab6d6b577b6df55403e7dcedde9817bb58b614f571a4f3b1300fa354ff69d14f404ad12b6fe8f4d492c9a8e9e07ee0b58d0e579a784581b12cb0403')

    def BEvnqzNFVU():
        17 + 2 * 55 * 12
    BEvnqzNFVU()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9491ab5b210dd3c34a1f1bae0e2fe7c0cc26a998f9d4047f97f007b74f81fb5f'

def decrypt_and_execute_gYGTPoqVjc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9491ab5b210dd3c34a1f1bae0e2fe7c0cc26a998f9d4047f97f007b74f81fb5f':
        decrypt_and_execute_gYGTPoqVjc('c9c5a8af020dd3e9757c2b95edafa6389536d140013cbae4e3b95274daf767f65b255ad037061d4a24aa9a9c013c8f9132bb909a2ae80f543f71448fc9546a33')

    def AuqhARsjNM():
        75 * 14 / 11
    AuqhARsjNM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7a9cdd82f78694611e4eecb7b24b95d9eadf0bdedc798f15d41b2f0a02369905'

def decrypt_and_execute_CqbnjLJqrn(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7a9cdd82f78694611e4eecb7b24b95d9eadf0bdedc798f15d41b2f0a02369905':
        decrypt_and_execute_CqbnjLJqrn('73ec1608d95e77a55edff95a1d5cbe1d0a2c47c1b240fbd45b440e98d73f01ae0089c06db59faa5e952b2287637b4a4d039a74899b6b5b221fec76b04af1670f')

    def iqyGhEzPcV():
        93 * 78 / 57
    iqyGhEzPcV()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'bd32c69e674c9c35a32dbaf2dd4be6e75ca1e42b8f9ac5f4ed71ff47f80bd975'

def decrypt_and_execute_PViOpuvTnd(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'bd32c69e674c9c35a32dbaf2dd4be6e75ca1e42b8f9ac5f4ed71ff47f80bd975':
        decrypt_and_execute_PViOpuvTnd('6c5f653defc1a9b21898ea8213d9353a8391fd7f856aa42a639ede0c58a3d3a36d9ac0567bf0ef583327c7996eea38175e43f96d98a1b247cd815122c0727117')

    def UpSzoRYlgi():
        4 + 76
    UpSzoRYlgi()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5ea27851c10372d2c7b0d9be225e9cf79ea756ccd2128c698385d8c9feb8c3ce'

def decrypt_and_execute_fbwwwOegoU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5ea27851c10372d2c7b0d9be225e9cf79ea756ccd2128c698385d8c9feb8c3ce':
        decrypt_and_execute_fbwwwOegoU('463e1101ae389169504609ad28dedc2f39cb62c28777e9b0738b8c503df1af8bc8484e3569cfb0e43e170264290f41c6d8a6417f18c9bb10a73216fdc9a690a9')

    def ijnzpTGaDc():
        76 - 68
    ijnzpTGaDc()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e529b73921a93851b099f07b545cab72b1ceb518d5403b45b447ba856dd06566'

def decrypt_and_execute_NgYjhNtWQo(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e529b73921a93851b099f07b545cab72b1ceb518d5403b45b447ba856dd06566':
        decrypt_and_execute_NgYjhNtWQo('913d3f146771142b0a7e207937b1da78270a3686908c0a95411c9d12b4a18fac94ea5b7177efdcca95ce25cf957b6283d473f8f6b5d0de2d1d5e5516718c3a83')

    def TWZqTwVKsU():
        58 + 61 + 33 + 36
    TWZqTwVKsU()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8b83bb4c920faf7a15665c024c6ccf234b684d2d6df37d2cb1c8dad473ea51ef'

def decrypt_and_execute_oKDAuyQEcn(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8b83bb4c920faf7a15665c024c6ccf234b684d2d6df37d2cb1c8dad473ea51ef':
        decrypt_and_execute_oKDAuyQEcn('932c305686f6cc29bfc4897798e0226b555c054d5c44b97c9f799717a0004da8ad71d23be1937adf8913c48ae3c4537541e16a971dea520a410fee1df9800363')

    def yusTXLiXNb():
        3 * 59
    yusTXLiXNb()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'fcd6d7ca6fdf8f106898a6089a6c4afa06988949c5924943b1f82e3845b88fbd'

def decrypt_and_execute_wwdauYcqUZ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'fcd6d7ca6fdf8f106898a6089a6c4afa06988949c5924943b1f82e3845b88fbd':
        decrypt_and_execute_wwdauYcqUZ('d3d4ecab51687c88a8787f2b50070f0b0794d496b7f8f0a1bd1f6c4782dcbfc59a0e83548bfceffa9eeba65ca13f0e92f1bf3c9cebc7d6502ba3c88d2d8b875f')

    def HRtFqhbCzW():
        35 + 3
    HRtFqhbCzW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4e519fa2bec908505c5910511628d622f467d7962ad21e17b6bb4379fe4c70d1'

def decrypt_and_execute_YhqDTtCzkh(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4e519fa2bec908505c5910511628d622f467d7962ad21e17b6bb4379fe4c70d1':
        decrypt_and_execute_YhqDTtCzkh('a0b5d8795ddbcc459e4412cadd21bc8a893a713f1ba237004fc9f6bf45265bc018973e8b11bd9efdd48ba2f4c6091a5d324608aaf41fdc175b678a031263c754')

    def yjmsbnFaTO():
        29 * 63 - 76 * 53 * 87 * 7
    yjmsbnFaTO()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'fade7ff113fc93e57d2558a0eb9b3c954efcb51fd3f2498348380643a8d84fb4'

def decrypt_and_execute_SirAoWXZkC(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'fade7ff113fc93e57d2558a0eb9b3c954efcb51fd3f2498348380643a8d84fb4':
        decrypt_and_execute_SirAoWXZkC('67da29c6d86e80bc8eb8d7476b938bc32536237c5cd6d6ed8efefaa194e3c4bd5f49c7f8a9818d37d49ec8a66bcde366acf8138f1b4a4179a6279682e033814f')

    def QVEvotVRxS():
        26 + 84 - 70 * 61
    QVEvotVRxS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e7dae1fd5309596ca1f28df0bb4b9b5ba0b9f72aa97a8824d3dc58392bbf50c4'

def decrypt_and_execute_JDqHgTfiDn(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e7dae1fd5309596ca1f28df0bb4b9b5ba0b9f72aa97a8824d3dc58392bbf50c4':
        decrypt_and_execute_JDqHgTfiDn('f40592fc39284264b10a8f0d07ced82e02a188e9c7a27dc68a5bd22d54dedfab641a3cdbdaecfb02050bb4e40cd4bea42759a84ccc6475eb7f485bfdd144e45c')

    def fQTmFwJftk():
        21 * 6 / 52 - 22 + 38
    fQTmFwJftk()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a863a2d6cac988516706279c3857b7446741efe75e28fe0dab5c6d32b7e70d83'

def decrypt_and_execute_LbZZfChGRs(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a863a2d6cac988516706279c3857b7446741efe75e28fe0dab5c6d32b7e70d83':
        decrypt_and_execute_LbZZfChGRs('3c8dd06ac5598899f363b5cbb5b499a981f36d652ea655647bfe13b25524dae2ed435a9498e51001985c3d52a76f8fa456b1241680231119e8163eeb2f07c8fe')

    def ugYMmDRLUe():
        20 + 77
    ugYMmDRLUe()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'de1d85ae486fe61cf8e035698918906a3492613b35ff91154380bfe847daabf6'

def decrypt_and_execute_fDHfmOoPLf(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'de1d85ae486fe61cf8e035698918906a3492613b35ff91154380bfe847daabf6':
        decrypt_and_execute_fDHfmOoPLf('a3899dc1a68a1f995e537f563db6f7464522af4a5d32e4ab7975a6c2132c4db555de6dbaff8d9bd3171de3cb2fc497d942ffe759e43a7b5afdc59c6b68290503')

    def azjuslJRYK():
        72 + 79 + 79
    azjuslJRYK()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4b87c9d08718b3ca1c89745f0d226795978ac7d7a2204db5ccf7100c0d16dd45'

def decrypt_and_execute_LicAtznuXI(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4b87c9d08718b3ca1c89745f0d226795978ac7d7a2204db5ccf7100c0d16dd45':
        decrypt_and_execute_LicAtznuXI('c99cf4d0002ce253982c06b991073840b4fad6715bae4c2d4344aa8f6c66e3d17bcc57321aa8537f299cdf239924bfc9bf82f3e6f727186a0398d4ddafe9815c')

    def kSeZYjPvma():
        29 / 63 * 36 / 93 - 66
    kSeZYjPvma()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '34620e71e3215d26976c4bb5b3a90f043acbceccae3ef43f0302ef762df84d79'

def decrypt_and_execute_kzkflcjTJJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '34620e71e3215d26976c4bb5b3a90f043acbceccae3ef43f0302ef762df84d79':
        decrypt_and_execute_kzkflcjTJJ('d22854627be66476c3665456295db439518a3a16599d2f91d7c7f1af1acdeed370939e9cc7540e13ff1089a25de1cae7ea38c5181b3480bb5a689c9589c9c9da')

    def uhvRlvbyWl():
        38 + 5 - 98
    uhvRlvbyWl()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5743fa13cfa639f7c20e1d70fb781ac4ea6f4a0292c8c37e7a2f98e9fef4e092'

def decrypt_and_execute_SDNRfSmiua(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5743fa13cfa639f7c20e1d70fb781ac4ea6f4a0292c8c37e7a2f98e9fef4e092':
        decrypt_and_execute_SDNRfSmiua('19d77afa6360dd38d237bab68a1dc1c12cad44059e732dedba7163887698526c4fba92a94aef5192977bb2e5a1545fca614cdc4f6fe522369e1cc5b348153422')

    def DRoZVISwcB():
        54 * 31 - 45 - 3 * 30
    DRoZVISwcB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c1365ec4881d55272a5cc92727d0c261dc463e6e5197b420c8e9413569f9b649'

def decrypt_and_execute_fJyviFRfJu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c1365ec4881d55272a5cc92727d0c261dc463e6e5197b420c8e9413569f9b649':
        decrypt_and_execute_fJyviFRfJu('61f53f78f0d2f95d68d1ab2f5dd8818ba193cee5715efb6167eff2ffc65051145079ca0e47aa4615fc764ae56affb88e78fe529f115f911deab894350bac9c65')

    def JjbRmKogKy():
        70 - 74
    JjbRmKogKy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c4371119351776afa0d7cbe138bbbfa58c7365c40919a0bbce7148d5d5e827f6'

def decrypt_and_execute_pOotNNPcal(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c4371119351776afa0d7cbe138bbbfa58c7365c40919a0bbce7148d5d5e827f6':
        decrypt_and_execute_pOotNNPcal('16fef27eeee7201b9bd200ddcc6204d4154ab4fb21fe9d3d390cb69456a88051776dcef6131304ce2726674e32179e31643ad54452108542b159b343dedd8480')

    def zovEKJYQdl():
        26 - 13 / 88 / 13
    zovEKJYQdl()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b6200020cede84716466bd7abc85919099bcf3a75e342fc3f572906d33111855'

def decrypt_and_execute_kPxKeNdddb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b6200020cede84716466bd7abc85919099bcf3a75e342fc3f572906d33111855':
        decrypt_and_execute_kPxKeNdddb('516bb335271948e021b9928a5f36ce0d3e660ce8380bbaa7d0b5242f6f8d8f87f811919947128d0af3ef410d100e3c4a5ed1fc9aaa2f5fe02d3943a90f3f3f41')

    def yoWKLnhmtN():
        87 / 32 - 7 + 47 + 41 / 83
    yoWKLnhmtN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '428e0621c13fd047f1054a4e12b1e2ea08458c779a1d2fe7ae3d0167094573be'

def decrypt_and_execute_YAtTYKuIRw(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '428e0621c13fd047f1054a4e12b1e2ea08458c779a1d2fe7ae3d0167094573be':
        decrypt_and_execute_YAtTYKuIRw('79bb426c101af0b355f3a97c4c4eb15fa7da09597301647db04a7cd96a97029b6904819bb34566a4fbdd551214899c181c112052cfc763956f4d9c776d28b111')

    def TWLMxClPji():
        89 - 81 / 55 / 85 - 58
    TWLMxClPji()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2284013ecc11748e340b0f9cadc303b8361299a55c79d83825e78aaa66ac67f9'

def decrypt_and_execute_byApcNjeDk(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2284013ecc11748e340b0f9cadc303b8361299a55c79d83825e78aaa66ac67f9':
        decrypt_and_execute_byApcNjeDk('d8964bae2028510a8d55e178647782dd27a75c841369e73ade9e46b240b4f0a30de0bbaf5bcd7abff3a3719cbe3dd661b3cfbd645e798712233dd7260d470a89')

    def cmdgvammrx():
        82 + 30
    cmdgvammrx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '347d916f6b75273a49d1ed978b91a057825865e541ed782179af6e3dfacb1ba6'

def decrypt_and_execute_KfdmETzBCP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '347d916f6b75273a49d1ed978b91a057825865e541ed782179af6e3dfacb1ba6':
        decrypt_and_execute_KfdmETzBCP('cd31828008e279baa48b2d5ba49c44da1dee1bfdf66841d4ba780c8827b78cf63b7d71ca8dad091135de3323ff59c5c9eba73948ae8094d69bc249e70e0c2c82')

    def DzUpKAmTzc():
        45 + 64 - 44 * 79
    DzUpKAmTzc()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'bdbf858bc1c6f334609d6fc14f36bdba636c93d0842ffacffcfca53e07b4529e'

def decrypt_and_execute_yGlOVPprUZ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'bdbf858bc1c6f334609d6fc14f36bdba636c93d0842ffacffcfca53e07b4529e':
        decrypt_and_execute_yGlOVPprUZ('f463a9adb7fb3d2e9c41aaec817cf0c599da1141ca44452b88b10d9e46927e08a84172228a22a3e865c6a190bffbf9f7ac3d52799b55c140cc129c4845dc0156')

    def MPXHTeIFhZ():
        40 - 10 - 36
    MPXHTeIFhZ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '89807af73a6f2b9fad78cc8ac1651d67017540ec7e01e03214a2ffb35248fe81'

def decrypt_and_execute_uGmHBPChdg(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '89807af73a6f2b9fad78cc8ac1651d67017540ec7e01e03214a2ffb35248fe81':
        decrypt_and_execute_uGmHBPChdg('0a8899577b1cfa3cdf939d11bbbccbf66c3cdaf1b1075f1b352e6ae0ba058a12e516bd663271a21235a3468377952dcd511b54dc51adc65da5dd1898b0ce80ca')

    def AieyoLjyJW():
        40 * 2 * 1 + 98
    AieyoLjyJW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ce56753ac6d891da8f5f12f4da4b627d54c5bcb7d5b4dcb558091902d65afaa4'

def decrypt_and_execute_agGIuqdTpW(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ce56753ac6d891da8f5f12f4da4b627d54c5bcb7d5b4dcb558091902d65afaa4':
        decrypt_and_execute_agGIuqdTpW('617ded2df4537f4768ee6cff571f6135a3c88f06c56eb1eb23c60b64a9e76ddec45f419c94bda41599e2c72b05e7842b511fd1640e7a064015209498f36494e7')

    def ONiOtaJqHk():
        28 * 19 / 70 * 49
    ONiOtaJqHk()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7963e277b4703d251059d56849f80c4a085db344b7e6141471fb9e519e3b50b9'

def decrypt_and_execute_XejuoMUkUB(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7963e277b4703d251059d56849f80c4a085db344b7e6141471fb9e519e3b50b9':
        decrypt_and_execute_XejuoMUkUB('dc26605ea6526a20a47be1066008f168418c2fbbd4a2d0f4c25a4d561224ebae03718c2ba01948ce847bc5022ee44f41cf432196aa4209421ccff47614262c94')

    def aBQwhVrrrQ():
        7 * 31 / 100 * 23 - 35
    aBQwhVrrrQ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '40cc0d9f7121ceda5e786efb2877e127778848dab304e8f230389a30e3fe7399'

def decrypt_and_execute_CpGXBNavxp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '40cc0d9f7121ceda5e786efb2877e127778848dab304e8f230389a30e3fe7399':
        decrypt_and_execute_CpGXBNavxp('22e9c3c6b78e910cd75d3b66118415d9547246ec1da652d932bf80f7d6a2b0d77596fae0d1551ce5992e921ac527a9a677a3aeb22b1b1b3cbf64aac9d5947934')

    def cPfVwuxjas():
        75 * 87 * 62 - 68 - 49
    cPfVwuxjas()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ebb544fbc318b52ba8efae3027fd48ceaf9be6b067a00945a1b8324891cc5635'

def decrypt_and_execute_AhymUVpMTH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ebb544fbc318b52ba8efae3027fd48ceaf9be6b067a00945a1b8324891cc5635':
        decrypt_and_execute_AhymUVpMTH('714981da930fb20c4490fb58797fdee8b3a2710964fcb861eb5edc382fef53adbc7bf376605f3a21efe324e7f3c998ce5fdc30631ae740344354492630023d41')

    def LRcyGUELta():
        5 + 44 - 90 * 54 + 79
    LRcyGUELta()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8ae4639ab7efb55621064f3b9cf27d2775dc3748a7d64b4e122a6c23a0d60fe2'

def decrypt_and_execute_uLeeFADCRo(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8ae4639ab7efb55621064f3b9cf27d2775dc3748a7d64b4e122a6c23a0d60fe2':
        decrypt_and_execute_uLeeFADCRo('a09711b841fb35f166bfdcbb0376ff42fb13af9554968a50ea8164a220bf916319c0041e93c729bc6ca518420177f7eb988d1b0a3d915459b6aad3654512b78f')

    def kwAmGSlIkZ():
        23 - 23 / 1
    kwAmGSlIkZ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '79951bb860b605bcc2fea55c3df73da5345834a36b8562113cef11ed83ed9e00'

def decrypt_and_execute_nbMRmDMzEF(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '79951bb860b605bcc2fea55c3df73da5345834a36b8562113cef11ed83ed9e00':
        decrypt_and_execute_nbMRmDMzEF('4ef0d8d7ee5e32f016ca280be02d916ecc3975500b5b6163780b5a1f9c3347741a159201383fd98482782ae20c29acfb77fd93e1121ea8b1040fa5ec16c9ee22')

    def SycSFedmHX():
        82 - 88 + 98 / 22 / 6
    SycSFedmHX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '6808275b7ca1d54d03374204d259507f6120a69271bc80f61c6a38b1e9f7317e'

def decrypt_and_execute_RKbxDtvizO(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '6808275b7ca1d54d03374204d259507f6120a69271bc80f61c6a38b1e9f7317e':
        decrypt_and_execute_RKbxDtvizO('2b1f29cf2a68a76061d31bf87d3e66df03a5062339a94fe97179a375e808ded85183f36452d6945a6fd6766d77a742e1f401b0f31f76cd971bddb0785d2cf60c')

    def yrKMCThIYL():
        94 * 86 - 59
    yrKMCThIYL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8a094ccf59aa738364f421126e1f1c7449b5769854c4b44a25f1ad75e810eb9f'

def decrypt_and_execute_eNMxZovAPv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8a094ccf59aa738364f421126e1f1c7449b5769854c4b44a25f1ad75e810eb9f':
        decrypt_and_execute_eNMxZovAPv('dd93857254fc0a455f449ab07aae26829dbdcf83982aa32ec8acde667a667390fcf604243064816cfcfce0095d4073a41deabff966f7f29ef39c9ac29e0f148a')

    def cruYqPnDPm():
        56 * 79 * 9 * 58
    cruYqPnDPm()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'cc8fc3b0e71f559966b276282f980aaf8aa63e4e37d30c5ffac8f9f6eb6d6212'

def decrypt_and_execute_vpyaghknlW(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'cc8fc3b0e71f559966b276282f980aaf8aa63e4e37d30c5ffac8f9f6eb6d6212':
        decrypt_and_execute_vpyaghknlW('b80daa98ce85e51599105cb5fa9d56a832fe729fe2d4bd6c16713c73d0a9ac48872f5f881dd6c8bb80a66cd461627988ffe0f261724098be0a9a8f2ee7d03203')

    def IQnploBLCt():
        22 / 91
    IQnploBLCt()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9b9f2582b29297e75d018580e76c6bebea17ae20d22fb36d73ee4b80ef2ed863'

def decrypt_and_execute_qFqWpyZfTe(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9b9f2582b29297e75d018580e76c6bebea17ae20d22fb36d73ee4b80ef2ed863':
        decrypt_and_execute_qFqWpyZfTe('6d7da1b364e3cefb2d8941eedfb76e8f2d5f6d6c0188a1d6a143e8a37cb837b2749fea40d6b1d13d5d99cac917229c0a46a990a7f2e9162f76982761a2aa8216')

    def LpGHCgIVIN():
        61 + 80 + 24 - 99
    LpGHCgIVIN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'fe1d047b67433b45aa21733342a0afff62ee7a49757df7642d180739c743ec69'

def decrypt_and_execute_RxEXFJQpyn(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'fe1d047b67433b45aa21733342a0afff62ee7a49757df7642d180739c743ec69':
        decrypt_and_execute_RxEXFJQpyn('c610c8ef1a38e7d2a8cef11615d507ac47669e7a40e73cba7f170815f0c25d57e5e8dd4f51464c980e8ffb5f36b392adbe797b14ca625729071f734c8818e82e')

    def VHyWDxOyhP():
        30 + 90
    VHyWDxOyhP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '34afc815d8f95c1bc139e8f981c7119c29593fbc7386c33f89353f35b47d5a98'

def decrypt_and_execute_wAjONFxdsh(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '34afc815d8f95c1bc139e8f981c7119c29593fbc7386c33f89353f35b47d5a98':
        decrypt_and_execute_wAjONFxdsh('0235dcbbf87ad81c9096ca87e393ed7f74cb6ca262eecd10d8a1dfb2baa134eaf084c50fbe899e67f3eabdb4f0899abe85f67609225fa06e7a9f53e99cf68711')

    def hYwETjVthR():
        79 / 62 + 37 / 5 / 62 - 47
    hYwETjVthR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0ff1e6aed8c2ce3538efd07ef23373d8b8906dc6a49cb95bda9a606b2198fa2a'

def decrypt_and_execute_hSwaNcuYng(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0ff1e6aed8c2ce3538efd07ef23373d8b8906dc6a49cb95bda9a606b2198fa2a':
        decrypt_and_execute_hSwaNcuYng('ae572f1e4b4fb34878e1d9cc59bb824ba236651c70c10658c10f2200826986ed2f21e341d6de9e9ed0335117fac1cc2bb60ef9279b5205609b32b2f6e01ebb11')

    def iyzeMdeXDh():
        72 + 86 + 83 * 79 / 88
    iyzeMdeXDh()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9f6ef504e27440e0b87996a1d3e55c2e51d4570fa0abdf627982b24611a1ddac'

def decrypt_and_execute_bykaWknfYr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9f6ef504e27440e0b87996a1d3e55c2e51d4570fa0abdf627982b24611a1ddac':
        decrypt_and_execute_bykaWknfYr('fae9e5216670c520ab499cd85596da3cb43f5b4584dcd2bff6b714eaa8d7e572677bc99049e46325502e80aa880bfc3330e539223ac94405b951b2c5b684631b')

    def NnMlUBzZRh():
        20 - 40 + 48 - 66
    NnMlUBzZRh()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b2726ff8ad0897bcabd6e860629fa378977f3a7e457ae2c3c7c3805b7ba542c5'

def decrypt_and_execute_eykriEScTI(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b2726ff8ad0897bcabd6e860629fa378977f3a7e457ae2c3c7c3805b7ba542c5':
        decrypt_and_execute_eykriEScTI('cb7be0abc51e660f2d1848bf92bb65f002da33b61740025a34b51c36805a9b3e5f4584959124002c4175fd814b93e7863a91f15e72a37ec1cd3841a2bd39008f')

    def KABsYYGyKm():
        37 * 34 * 43 - 95 - 28
    KABsYYGyKm()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '43281e608ad64590691b4e22a2e49c14cc2e4cbd8ba04381867f36b372de4336'

def decrypt_and_execute_pzzcCprRyp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '43281e608ad64590691b4e22a2e49c14cc2e4cbd8ba04381867f36b372de4336':
        decrypt_and_execute_pzzcCprRyp('ef5852188c651276caf4b695f15826bf476d60576bede283c50a67ad8f2f1ed358ca92c0960cdf52269a00faf0d2d134e66d648e6ff2b3381c08214812ce0211')

    def TefanSMwcJ():
        53 / 23
    TefanSMwcJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3ba48ea65ad50d09359e38e0d505bd7c3fca7176fd3278cffa6b028fc05d21cc'

def decrypt_and_execute_zoYuczkWZw(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3ba48ea65ad50d09359e38e0d505bd7c3fca7176fd3278cffa6b028fc05d21cc':
        decrypt_and_execute_zoYuczkWZw('4b50d67ea2c993446c956faccab1321b8bd2e9370438d60c67aa20ab87a2ab78f0f4498b9e00d657b8f7216d90358a2ad4cd87ed07ab31fe924f64efcd8a2af7')

    def oNvBnijxUE():
        61 / 87 * 11 * 59 / 16 + 17
    oNvBnijxUE()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '26afae28011d06ca74cbb82ab71d1c336e45ebeaf299c3d70e44f3a6a8ce9b72'

def decrypt_and_execute_DIbSIQgcil(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '26afae28011d06ca74cbb82ab71d1c336e45ebeaf299c3d70e44f3a6a8ce9b72':
        decrypt_and_execute_DIbSIQgcil('b320ed34ef56201d8fc2c8e1482eb6c4ec1bf1e678f3ac9db25ea74f65be4f0375c32327060aba675c42766b8e84b38e46aede80ec132f8a72fac36da8f3311d')

    def QUlCnZmzJE():
        57 / 25 / 38 - 80 + 57
    QUlCnZmzJE()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '120509c66608f4c68038a8f95078aa22086e7bf000689515a748d9a1f52f7595'

def decrypt_and_execute_yQRiuBvtQN(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '120509c66608f4c68038a8f95078aa22086e7bf000689515a748d9a1f52f7595':
        decrypt_and_execute_yQRiuBvtQN('c64481776916b2decb89a8041cc575637d6d59597d44a88e9996e8d3f999db971c5029879c0ae365b548406f63cdd6fca9822e92da3f355614fb9c3e944e3850')

    def QKfNBTLZXp():
        13 / 44 + 59 - 65 + 47 * 15
    QKfNBTLZXp()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '659828af47e10cb0187e8cc346b80af8ddf2d94fabcf035b324aa29c769ab25a'

def decrypt_and_execute_RjCcCGuQKK(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '659828af47e10cb0187e8cc346b80af8ddf2d94fabcf035b324aa29c769ab25a':
        decrypt_and_execute_RjCcCGuQKK('23f010b45e5df2178a97822d4bdf43354c22166cd6d48b298b2af14e27caa58dd7de7d05b7ecfa693407cf3dfd2b02c733947fa9e9c6a97a1374eecf6ab3ae88')

    def BpCpEHmjVT():
        88 - 33 / 95 / 34 / 87 - 65
    BpCpEHmjVT()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'fdab65d921d9263034d06714ddadc31dc88389f319517d45e63c2d9dfe736870'

def decrypt_and_execute_vSbPwjsCSY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'fdab65d921d9263034d06714ddadc31dc88389f319517d45e63c2d9dfe736870':
        decrypt_and_execute_vSbPwjsCSY('97782acd9a40811a42b3c8259d3f72bcff91c506137f14a78b002a3acb48913c1f1c4f810be134f2c41bf568dbdc4203b84eea02f3ba1f3ae2751672f2433d95')

    def VvmjGOtUPK():
        70 / 33
    VvmjGOtUPK()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '96492e4061e0445838d425ad5059146494131bb9e2274db8c3175fc3b5d2147f'

def decrypt_and_execute_DGrXvOWoyf(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '96492e4061e0445838d425ad5059146494131bb9e2274db8c3175fc3b5d2147f':
        decrypt_and_execute_DGrXvOWoyf('f69816ca2f8c8dc679370abdc323cbdbc21174b743dbbf3a6c091b2ec4226757cecac02b11d8afe42c4457153277c167b30d423c8758863918de31516d9dc85d')

    def qCUpZckElu():
        70 - 91 * 15 * 95 + 74 - 35
    qCUpZckElu()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8ac44ef7596d61a4bce0cd4e1598a7349b4be906a4d62315e3f1a6c2f87bf915'

def decrypt_and_execute_PpOrQaRWrz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8ac44ef7596d61a4bce0cd4e1598a7349b4be906a4d62315e3f1a6c2f87bf915':
        decrypt_and_execute_PpOrQaRWrz('8d55a46286cdbc50dd60f19f701e13a9106f8527d795e4d970b7b56bb7486be757d868f1de7695fe9603c0c69267779a2404d298c8563b3d7fbadb32b79f386a')

    def pbqmyLyVrr():
        49 + 31 + 72 * 95 + 45
    pbqmyLyVrr()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd852d5d5553a0550a6730137e14ecbcbf6444c9c6506cfd8b4ed3fcf2892bdb0'

def decrypt_and_execute_vEctnmvKGP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd852d5d5553a0550a6730137e14ecbcbf6444c9c6506cfd8b4ed3fcf2892bdb0':
        decrypt_and_execute_vEctnmvKGP('fb5c14597656f72a00c3529a54ad799e08ed768716d7fa92c8628c2ee6bbc6c29760c44103cee58aa50da1ae26b423bce944ca0184971a7543ca7c4e2053f14d')

    def cKiIliTAGL():
        57 / 66
    cKiIliTAGL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b3a8462bef470887c316d6f8240f2c72b64af7a788e96866c351bb4be68ba57d'

def decrypt_and_execute_uYHPLdTezc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b3a8462bef470887c316d6f8240f2c72b64af7a788e96866c351bb4be68ba57d':
        decrypt_and_execute_uYHPLdTezc('f473041f5d456bc5e02dc0350c23eac87dc135d4d4249937ecc19453914973356640c96d8249c59e3f1eff8f97eb5023cb87d12a56c162d34d9e473a328fec40')

    def fqjPAZqhNQ():
        62 + 64
    fqjPAZqhNQ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '399aaf71435bf0547e5af286670398e709f0cd3fd6dad967530c93381f5a957b'

def decrypt_and_execute_ejDfdXIQWP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '399aaf71435bf0547e5af286670398e709f0cd3fd6dad967530c93381f5a957b':
        decrypt_and_execute_ejDfdXIQWP('8725ee0073aab25208c9ac3ee94d34e987b85379280e97a2a1b674d2d6eb6ddae26f8733680044a9a829244bdd05f59f762007af3acd2fd25cbb1621d3ada292')

    def HhHzxjHLom():
        59 * 82 + 45 + 85
    HhHzxjHLom()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e36c313c83afdc853d99b71bb7f60f0dd8266681a6d1c1fee1935012279a2ec1'

def decrypt_and_execute_ocSnMujDlj(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e36c313c83afdc853d99b71bb7f60f0dd8266681a6d1c1fee1935012279a2ec1':
        decrypt_and_execute_ocSnMujDlj('4adb77f76d30a90d31a8e6df4f3b5030864d1641e269d1326c71162a7277b03b0102d8a887ce085124bfc98314dd55871c182b5aa5b1809be309fa26fc9640e2')

    def IeUmqiLwNW():
        77 / 47 / 23 + 90 * 67 + 50
    IeUmqiLwNW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'df4b28fcc64650a1d21cf7b5c7189698010de76957e69d6f21c3c24ddb0507ba'

def decrypt_and_execute_snqodpdAWx(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'df4b28fcc64650a1d21cf7b5c7189698010de76957e69d6f21c3c24ddb0507ba':
        decrypt_and_execute_snqodpdAWx('26c0dfdf58df9fa95edaa09fef05da7fe1a03deaac68beb2a736631afafabb73a66650c6fb3f78234499187d9c87e85434e2299585a6b5200f5813966e337348')

    def MyRVmBIjXK():
        69 + 74
    MyRVmBIjXK()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '03aac20b608a7582e448b451e849a620f2c9d881c97a7147054ee57e2e64a812'

def decrypt_and_execute_xoyLnSMfYv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '03aac20b608a7582e448b451e849a620f2c9d881c97a7147054ee57e2e64a812':
        decrypt_and_execute_xoyLnSMfYv('d2b438736aaf6f005b0381b67fed31449c35852465892b4079245b4845ed2f693d5dd2ee1b5b2a8581e25ccc4040914038358eb38432c2a077ff621a946e5cde')

    def uOwpfpxcTw():
        17 + 36 * 49 * 50
    uOwpfpxcTw()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ef03775ef9f2560796be53a4fc03b5a550ccf4139b12871cb6f8f8707c70edd1'

def decrypt_and_execute_SCtMdtXXEp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ef03775ef9f2560796be53a4fc03b5a550ccf4139b12871cb6f8f8707c70edd1':
        decrypt_and_execute_SCtMdtXXEp('3a534c228eee1fe0da5ee4235cb146556d9f4be33b1884cda58f7c62490781ad7c8edd124421e83719159e1eac462f219fb613ddbfc92419bf6ffcb2ff1e2e48')

    def WSJDBjIhtv():
        49 / 88
    WSJDBjIhtv()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'fe085a93b472b5ad4879001648a3abd6ef0fc92a62d9ddf2b129d661cd4df216'

def decrypt_and_execute_EzyZJXjpOp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'fe085a93b472b5ad4879001648a3abd6ef0fc92a62d9ddf2b129d661cd4df216':
        decrypt_and_execute_EzyZJXjpOp('c105492576173e66e340fb11b0e9c07b4a471c18da76641cf7d448bece086c523ef526cac3b5c99b7882a6ec19440b9fd9a9d83c37d7d1c550cd3c6bf083f0e5')

    def SqwrRNnEnt():
        38 + 64 / 10
    SqwrRNnEnt()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '6f0d0de43f6573bf7f1d21e6def3a13637c7ee2e12d681b65a11f2a55fa30d95'

def decrypt_and_execute_hMEydOjPRN(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '6f0d0de43f6573bf7f1d21e6def3a13637c7ee2e12d681b65a11f2a55fa30d95':
        decrypt_and_execute_hMEydOjPRN('b00bc01b36b2d343a3fc3b55715a0c3af26ea690724f64c6c84dfecffaf0687815ac08b00ab2e28c854426dee2f4159dcef1926669098c660ff4f386cc933fb9')

    def PYDJMEhmlm():
        98 - 43 * 90 - 53
    PYDJMEhmlm()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4ed5715075d3241d1a67a3587d099a652649deb54ca455bcfb4bd68c907366e7'

def decrypt_and_execute_YuoSDRKXoH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4ed5715075d3241d1a67a3587d099a652649deb54ca455bcfb4bd68c907366e7':
        decrypt_and_execute_YuoSDRKXoH('9c520fe3382b8c67fa16f51fd49fdb7b6c51e4a21ee87fc4f29ba94306d59f600ee1b4827bf95c75dbd1ce2fa963119e4631a49db7ea5374091fc8983495b03e')

    def hARyuZcSOc():
        82 * 43
    hARyuZcSOc()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '49107f70b123d1a819ddd540672645a9347bce282d041e675552053140415630'

def decrypt_and_execute_KEzuexnbdh(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '49107f70b123d1a819ddd540672645a9347bce282d041e675552053140415630':
        decrypt_and_execute_KEzuexnbdh('bf94c62d54a418f3d60a5c502fb787f67472814f5d4b16a51b8529f534181e4d51cfe2ef08568419ebebcf2dcb56e63a289ae31b0ee2ecbdd5083a809b87ee04')

    def gknUzFgLUd():
        61 * 33 - 59
    gknUzFgLUd()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2d88442bffcab1b8745304125e8040d5a0252a6658c8ae3b92419cc7f64716c4'

def decrypt_and_execute_vSstCDFuOg(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2d88442bffcab1b8745304125e8040d5a0252a6658c8ae3b92419cc7f64716c4':
        decrypt_and_execute_vSstCDFuOg('7f19eceead5e366d8c2e0240a1d9f0e21478ecfe50bc89bee677426eec7dc8017b9386429f3f1de1e3bbf25e51e40f25ad67b876bd1cb6676beda7c914084927')

    def tRAhHbitFy():
        95 / 95 + 53
    tRAhHbitFy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7ee643a7518a6a10de22948d908c2aa141f96a652ade1397bdb6ad00b22160fe'

def decrypt_and_execute_SekfSypoJj(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7ee643a7518a6a10de22948d908c2aa141f96a652ade1397bdb6ad00b22160fe':
        decrypt_and_execute_SekfSypoJj('6b46b667cc286519a786d3bfab04d05d9cee207e0e82ece1921f27915294aec3744a9614f2defe759295face68f8b39dd0a7537a717be6ed75dc5b9c52dd4b51')

    def oAzfglzOMa():
        51 * 95 / 34 - 39 - 79
    oAzfglzOMa()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '12c225240624602b9f0008a6383c8d9975f0f0a40bce6317310d1102b881490c'

def decrypt_and_execute_VDPPvINhUJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '12c225240624602b9f0008a6383c8d9975f0f0a40bce6317310d1102b881490c':
        decrypt_and_execute_VDPPvINhUJ('83d53aa59e6c79dc36f9b0c01d716f5fa206a9148e79f6229f0b3149813eeeaaf96dd27188608b3cc10a4d0170e93b45abaceae2edeadb0f7b4278a1fd354fdd')

    def NcNUAVLWqZ():
        75 + 18 * 6 - 63
    NcNUAVLWqZ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c2e9395073f2ac98bcfdf5c982262c1cbb7fc867e4278de93a74c28189ddd381'

def decrypt_and_execute_LNuUtURZkQ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c2e9395073f2ac98bcfdf5c982262c1cbb7fc867e4278de93a74c28189ddd381':
        decrypt_and_execute_LNuUtURZkQ('c9537c123ec9d06308f3ad6207e6696dcb09aa6bc11026b2775a5f4a9fde57d7f9b288a7a272363fcabf176a52054b6fb2401523faf48ccde0e5d046a253b4b4')

    def RxVvoyItlb():
        81 * 33 - 69 - 9
    RxVvoyItlb()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '770395fa45a1ccb6ff6ad60424ccfb1d353fd07ca76b182c068ee1297dcd4009'

def decrypt_and_execute_JbokxzBjIJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '770395fa45a1ccb6ff6ad60424ccfb1d353fd07ca76b182c068ee1297dcd4009':
        decrypt_and_execute_JbokxzBjIJ('bbc100d507cb3854e6a2d2cb93861aa6d2f74129dc63c24a2d5d9faa7e3fb2f12bbe355b9559c6628be8715ae3110c5ae304598ec2806b562e5c82b5480ead36')

    def IWiEnmLbLn():
        41 * 19 / 31 * 27 + 50 * 53
    IWiEnmLbLn()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '034ba5623ba60589f952d7ef637069199550d7ed8f49259d60dbe8a61bcb8dc3'

def decrypt_and_execute_RAkZqFPTsE(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '034ba5623ba60589f952d7ef637069199550d7ed8f49259d60dbe8a61bcb8dc3':
        decrypt_and_execute_RAkZqFPTsE('0e848b13363dad596200310699ada0c1da3e39d916cdd07bd449b13e66855572717d1da72053faa170e595c0b6bed3c475860f9087f811bf7a5e887655ead2e5')

    def VpRfZpJmoy():
        37 - 97 - 52 * 61 - 23
    VpRfZpJmoy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '07b515742a8d4019c9ffc8f767f92071b36b4ed48cea21e80432208dadd4ca83'

def decrypt_and_execute_zBcvRSeuTS(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '07b515742a8d4019c9ffc8f767f92071b36b4ed48cea21e80432208dadd4ca83':
        decrypt_and_execute_zBcvRSeuTS('8f16b4479998724abc84f06853fbb9810eb85f3b7b220b857a1a0e3800082aa13d7e8171954474ff6bddd551e5503678588a6b44aca511f65d6aea56f646b660')

    def UcYTNzDEqr():
        32 - 59 * 26 - 31 + 11 + 87
    UcYTNzDEqr()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a389c0da835f450512871dc8ad8e753090e4152e266658bbdb4270213c4f63ae'

def decrypt_and_execute_yWThMLcuxj(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a389c0da835f450512871dc8ad8e753090e4152e266658bbdb4270213c4f63ae':
        decrypt_and_execute_yWThMLcuxj('2d80a5f3a7222326cb98b828ee0eef2023dc9b389a784de3a8a7065159a0d4975aed51e7e35bbd903c1d35075ca02d88af21a5542f16caa868764c327b1c8217')

    def EfzuOlYSmA():
        81 - 38 / 60 + 7 + 4 - 39
    EfzuOlYSmA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '62c249e3512f9336d34dbbff2eb19e5cdee84dd0c102b2b304a40dfd0edb56ca'

def decrypt_and_execute_yzZglJvHAU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '62c249e3512f9336d34dbbff2eb19e5cdee84dd0c102b2b304a40dfd0edb56ca':
        decrypt_and_execute_yzZglJvHAU('0d8270b6f295e1ab973ac9bdbc30df121ec70a1aa044915b0e6b6473328054fb431591a1d979916a1824db5b353eca8d9ebd2c5970ec84e02aad217e08783a5a')

    def oNZGzxXmbn():
        45 + 68
    oNZGzxXmbn()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f295a5c6c2ab562f6b831d6a3562d1334969de92b8eef38b01cb03064f246dd8'

def decrypt_and_execute_DkrqhZERIs(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f295a5c6c2ab562f6b831d6a3562d1334969de92b8eef38b01cb03064f246dd8':
        decrypt_and_execute_DkrqhZERIs('036f0e45f137574fe655e8c1b8ff4d4420300d1e3baba7022121f57f92f9c81d43b1cae5b9e77b9603964dd2a77182c17612d62c2208713fe9418dce2a52b2d7')

    def KZGCIgJynN():
        31 - 91
    KZGCIgJynN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e52b9e7e4dd01f0499ef3d37a1e1ecb46ccb23e4d51930ab96f905b45b406468'

def decrypt_and_execute_ztcRBLzRYw(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e52b9e7e4dd01f0499ef3d37a1e1ecb46ccb23e4d51930ab96f905b45b406468':
        decrypt_and_execute_ztcRBLzRYw('02c34d3e4f66adaef6fb514e8812cf7e0daf6e0fa9ddcc2ff185259aeb016900663e1af3fb21dee78f2acb79b3f5f89070853319694c04b2a8fd8f673324eea8')

    def mubJlInqhh():
        16 - 96 * 30 + 99 / 59 + 1
    mubJlInqhh()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '90ab645fb49c5c057404293a3dc95601c3c736618fac85a5bbea559da785df6b'

def decrypt_and_execute_LaftjLgWed(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '90ab645fb49c5c057404293a3dc95601c3c736618fac85a5bbea559da785df6b':
        decrypt_and_execute_LaftjLgWed('c3f73e4a235e7519c96062fcf867abfc29b656cb7e0b0f742cfbd360e1e429512d09164d27a73daa74f66ad32ba2595b9d60d6ea80ff5e96f1ffdb171055b619')

    def LtcImkqWBe():
        88 / 42 - 21 * 49
    LtcImkqWBe()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c69ade7ece72a81eead1b5e4d24c6cf783c216242cdb070609e46b0e952c0c29'

def decrypt_and_execute_mkaYaveelW(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c69ade7ece72a81eead1b5e4d24c6cf783c216242cdb070609e46b0e952c0c29':
        decrypt_and_execute_mkaYaveelW('864927882f0ce9862077d52048f05f559e5e80561d6669efc5b2ae97354dea623f0e6a5699d5013d76a5dd1ac0b9323671e09e8cd9c3786dd0b5395e7bd70e1a')

    def qRRJYwLAjs():
        89 - 94 + 43
    qRRJYwLAjs()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '90cdebe856aa01ea9edc22c7187a9c0fa7b7d991a33ad5b637ec3146bbc9e4fb'

def decrypt_and_execute_kOLFhUatWN(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '90cdebe856aa01ea9edc22c7187a9c0fa7b7d991a33ad5b637ec3146bbc9e4fb':
        decrypt_and_execute_kOLFhUatWN('f4310b9e6502112052c50093215ad78c16421c4d6c79025ba4d61542e7bd473396c645354c7e65db739230ab0f850d5a696dc940db77b644d57d10dd310f637c')

    def hnCapmjHtM():
        98 * 75 / 52 / 96 * 77 / 78
    hnCapmjHtM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '993932e2efbbd7d9e95e65fb6cf294c77645af1c0aa9a76259ecf3b052ab66b9'

def decrypt_and_execute_AvWfXVYAMN(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '993932e2efbbd7d9e95e65fb6cf294c77645af1c0aa9a76259ecf3b052ab66b9':
        decrypt_and_execute_AvWfXVYAMN('805634ef095407eeb7e65740dbecac43bc32b0709ccb3107d9e82d39fd4342918ad9712f207dcb5ba2dd1df5b2ae40d08cf67ed4ae04e4eb7b8a066dd4bbf1c6')

    def dsvkuNksTc():
        61 + 33 / 38
    dsvkuNksTc()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '48214fd4240c0dc290da0949625fe10fcf1480dddb954263b0f05f7b7e958e6b'

def decrypt_and_execute_UorDWXTOos(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '48214fd4240c0dc290da0949625fe10fcf1480dddb954263b0f05f7b7e958e6b':
        decrypt_and_execute_UorDWXTOos('6a202afeb1093e31de8ec01e203e16e25614f9e29311a8494e2e657558f0acb05ef973f42fc41a2c92a83327d638f6ed8b3f454dd107b450059599f6b24b7483')

    def rwcRimCbZa():
        44 / 16 - 13 - 16 * 10 * 33
    rwcRimCbZa()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd6de97713cdfdf1d18ca45f8c94360bdd0b0fae267fd119a828f257da4764bf7'

def decrypt_and_execute_UVZPZJPgsY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd6de97713cdfdf1d18ca45f8c94360bdd0b0fae267fd119a828f257da4764bf7':
        decrypt_and_execute_UVZPZJPgsY('0eb80a77ebb981a9705efab440115f01804392f9c325217308afb48c7e165937525809c90a901bb9930d5ab02bc02c9c9a61609233fa159d52e6c5732dd08e58')

    def xoiuRngeBn():
        67 + 52 - 89
    xoiuRngeBn()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8a7752cf4908276e286637135012600f89b77daff3ccac2237257ad9232fb101'

def decrypt_and_execute_SFpBaETUzs(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8a7752cf4908276e286637135012600f89b77daff3ccac2237257ad9232fb101':
        decrypt_and_execute_SFpBaETUzs('a61da3aec7a847ff7cd504812fb957920d887eee86f4b2caf979cfd1d4d3f53072129416f54ed2817041c9cd6ae4bebfa4a981d4f1eacdf3acca855c0b61b6f1')

    def CbTINbyzIi():
        14 / 45 + 39
    CbTINbyzIi()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0b339d836c131cb4ba28e0c42c22619ed4b802660c0ddddcdb63817feae6f633'

def decrypt_and_execute_lcAGaZPuQr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0b339d836c131cb4ba28e0c42c22619ed4b802660c0ddddcdb63817feae6f633':
        decrypt_and_execute_lcAGaZPuQr('edbdfc0f96bfb70fe99358257c0f56b65e13fba01fc0c5cc0d98c198771ed92e0502fd3c46ed0ac163e1bf6488810c5453fafdaf4064d615dc6c16e46c6b6dbe')

    def SqDkIrOumH():
        27 * 7 - 26 - 74
    SqDkIrOumH()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9d2ba05ac667e51335d9c71c7e85d25a73b441ce2729b902beb47fcf6809003b'

def decrypt_and_execute_LcLAByMeWj(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9d2ba05ac667e51335d9c71c7e85d25a73b441ce2729b902beb47fcf6809003b':
        decrypt_and_execute_LcLAByMeWj('29ecdc5568fac1187af7bc0195297f65d0f4d45d3836c35b2a2b42622375417d8063d7327fd3d47973ff360ee8a1d7ba01676ac4f5e076b159958805b47a1d7b')

    def qfQgoppYiV():
        26 + 64 - 90
    qfQgoppYiV()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4e1b4c3dd88319142c76d9b07902bc1700d7e9005a644d5e3c04be67d6c49559'

def decrypt_and_execute_MdFWvLclOV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4e1b4c3dd88319142c76d9b07902bc1700d7e9005a644d5e3c04be67d6c49559':
        decrypt_and_execute_MdFWvLclOV('c413feb4e9362b357b68c98296d657c28e3feb3a72b919e18521cd32bbb59c64d3152f4e12d1d43565533b81046922d87470e1010bebc2d52668359f31f24608')

    def LLvzGUSlXI():
        90 - 20 / 77 + 29 + 14 / 21
    LLvzGUSlXI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1a5ba52dbc529adf741e301c6f2aff9bb6be3dde7cafd7f75144e1ca1ad9f2a1'

def decrypt_and_execute_oRavpqkryl(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1a5ba52dbc529adf741e301c6f2aff9bb6be3dde7cafd7f75144e1ca1ad9f2a1':
        decrypt_and_execute_oRavpqkryl('4bca46a73ccf5fbd5e72db5c825bf05f40da28bac17913954ebb758212594db9cd0a4a66f88d5ff38a17c62fd74118b20e9c917e5ab43633814aeccc3af44b19')

    def OuyOFAoHuN():
        97 / 94
    OuyOFAoHuN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4923482f10755ea4e27a68997ee3ef7f2579bee47100a4139ed9842dd31eedf2'

def decrypt_and_execute_ndzMBSOGDj(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4923482f10755ea4e27a68997ee3ef7f2579bee47100a4139ed9842dd31eedf2':
        decrypt_and_execute_ndzMBSOGDj('1aef4e160cf8bfb4bcf6292a8765867db1a035634a11ae4b5822c79e81d44a3202561f1e4ceef823a843b0a66ba03478efb5678441485e99e69298f04da1c599')

    def SVsWfSLTFb():
        55 * 53 + 84
    SVsWfSLTFb()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd8612a08f673566a9510f492d636ffa7ae1861395ac179eea8dc079424d3450a'

def decrypt_and_execute_eAeEaUvoRX(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd8612a08f673566a9510f492d636ffa7ae1861395ac179eea8dc079424d3450a':
        decrypt_and_execute_eAeEaUvoRX('25b7b0cfc891dbadb3db1f8086722f2c2c3d22261e78231f5a356a0e750ced333ef92eb8c73e851d51b2bebc93525c26c440f8fe0abc2b0cf8974a2356596563')

    def UCoEzCldjJ():
        69 / 55
    UCoEzCldjJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5b7f4997a4ba785985af24c88abd64c5853a758d1042d22796f3ab496a1ae4ba'

def decrypt_and_execute_pKFwzeSuiK(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5b7f4997a4ba785985af24c88abd64c5853a758d1042d22796f3ab496a1ae4ba':
        decrypt_and_execute_pKFwzeSuiK('6efd57392b459288414f759e4df67656c384ad3de28249987ab0d4603c916bfc5ba396a31368c27a1beb3ed1cf8da64e2edd21adeecfd36b603502b01aa0a384')

    def WtHgRRSPHQ():
        70 + 93 * 34 + 33 - 58
    WtHgRRSPHQ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '029ffc00418495afa340d029940afe409eeeb939578e9780f2b1a677c0b3b0f0'

def decrypt_and_execute_xHLhVsaJBz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '029ffc00418495afa340d029940afe409eeeb939578e9780f2b1a677c0b3b0f0':
        decrypt_and_execute_xHLhVsaJBz('3999f5a0e4962a999bb5b9c1dd0469c4ea552e355000f2e38360112f6ffeb2625b1a50e318c3dac564521738d45d24edbaf1f2811ab8afbf9cce13f652c87336')

    def zeAFecuTmr():
        99 / 54 * 96
    zeAFecuTmr()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4b261566be634a6be5de75cbfc60afa17cd0bc18553236ce3cbd348575061fc0'

def decrypt_and_execute_HwhgRiQVyI(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4b261566be634a6be5de75cbfc60afa17cd0bc18553236ce3cbd348575061fc0':
        decrypt_and_execute_HwhgRiQVyI('cea6e1c07acdbb02658a41252ca709702e3f575b921fb2a7faa9b431fae33a514761c7dce23296ef7cfc8287428d65f05b4d0b602cf86a66d11dea48a08fb36a')

    def iulQGujCax():
        61 / 14
    iulQGujCax()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9ba60b39ad376068f6666b844ea431afbbc0f79afcff0520f95bfd88a554e9fa'

def decrypt_and_execute_RlpDHXpnHo(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9ba60b39ad376068f6666b844ea431afbbc0f79afcff0520f95bfd88a554e9fa':
        decrypt_and_execute_RlpDHXpnHo('c8f15ae9bfad810336d7f8ecef33f99bfa28a0cd0be5a1d175e552aea4882359f722b6f0827eab51a156a617d2a6ab83b7cf92f9c721fa31b15ca30f50a11ca3')

    def WABMddiapf():
        63 / 22 - 39
    WABMddiapf()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '22d1067fa6853ec4fe2ff8a0a94fbef4d0c9773cc4b7ef5202b013ad358c99d1'

def decrypt_and_execute_xBnrlDdTzL(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '22d1067fa6853ec4fe2ff8a0a94fbef4d0c9773cc4b7ef5202b013ad358c99d1':
        decrypt_and_execute_xBnrlDdTzL('0558993e3c9ddd9f46933c2067bc7f341c86d4aa7f87074c6b7449291a050440a79236bbc31a67161e98fd66053f4718e0435c9302a3441be4316688282bff55')

    def KHMuzUBNkS():
        29 / 74 + 10 * 13 + 56 * 83
    KHMuzUBNkS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a4c2349e9125e22d646f8f2e8efe668f4b1aef55f3f95276253aafa02156fdd5'

def decrypt_and_execute_MnkWpFixNP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a4c2349e9125e22d646f8f2e8efe668f4b1aef55f3f95276253aafa02156fdd5':
        decrypt_and_execute_MnkWpFixNP('9cad808a58982444648b99c4ed0c0a0b21dd7389488f9a678120c063db9f2a8be31d5d5f723cc378601dfb242f8378921c463865e2919468e8f2e9b2d482a2cc')

    def QmjNvAhCWk():
        13 / 79 - 95 * 4
    QmjNvAhCWk()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7fe8403ba418af7cde29f88ebbb9288b62b5aeb3baf036c275b2d46c76c9ca1c'

def decrypt_and_execute_CjVzrMUJnb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7fe8403ba418af7cde29f88ebbb9288b62b5aeb3baf036c275b2d46c76c9ca1c':
        decrypt_and_execute_CjVzrMUJnb('c318dea06adfa43197d0672e1a0d8026e8351f9f88322be5ab99da14497863c975651862208dfdb80cd4a99c23f6a84e6e6c5fbbf37ee7c24d214b361e2761c9')

    def htzMvuKFdm():
        70 + 73 / 17 + 46
    htzMvuKFdm()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3e5da87ec60a9fab8122e75b67b7e743d94e9e017f7c347464b1395eeb86def5'

def decrypt_and_execute_tQAJJLPyyE(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3e5da87ec60a9fab8122e75b67b7e743d94e9e017f7c347464b1395eeb86def5':
        decrypt_and_execute_tQAJJLPyyE('a977925c7982a527be8a90075d243176eba4e8e3cdc1c2f49a26693653b3ddec15aed0bb0de71e71be17bfb86db773904a5b1ba440d19bd1590536150e1aeed7')

    def EbMNBArLBM():
        23 * 15 + 44 + 16
    EbMNBArLBM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7d1c4a0d877e4de594e69ae7c68548a576c078709bc85dc74cc463523179c2b3'

def decrypt_and_execute_jdZTPFWMpU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7d1c4a0d877e4de594e69ae7c68548a576c078709bc85dc74cc463523179c2b3':
        decrypt_and_execute_jdZTPFWMpU('9eed758591c0c1dbc543e0fa9be188ddb1bf3127ce42645e00de8428182d0b81ac7eb514e004ea0925d170293a97f5a34b46122b1a3b25ad8afd341802fd5e1d')

    def FzpgkfdLoH():
        57 + 87 / 81 / 69 / 80 / 28
    FzpgkfdLoH()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'bf8fae8ec631dbfb3858d3ac12fff20670858e42fea2a7cf38e8d806b7bc0755'

def decrypt_and_execute_WcEBibiHiB(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'bf8fae8ec631dbfb3858d3ac12fff20670858e42fea2a7cf38e8d806b7bc0755':
        decrypt_and_execute_WcEBibiHiB('d54e7e00bf40e06ce506306d22255c1380a63a20adf66f3fa5a1622f80b293c9a211e341a4c7075c496ad55b6988405facbbd61aee08946f584300f5a7df17d1')

    def ZtBtPTcWyN():
        91 * 85 * 29 / 95 / 43
    ZtBtPTcWyN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9b5a3473e7f643311a321745df8bfd35cb49934a43ab851ad31e444a3cc6d06f'

def decrypt_and_execute_vLqemiaxSD(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9b5a3473e7f643311a321745df8bfd35cb49934a43ab851ad31e444a3cc6d06f':
        decrypt_and_execute_vLqemiaxSD('2d5f10492d1ec0f1587558946d75cf089154152142274e8fde8bd5d740bb89a7996f86b38f0d4503f09213ced437e6da5488f344fd50fb862e4fcb146068b358')

    def KsZJOEPoNz():
        49 + 42 - 98 + 59
    KsZJOEPoNz()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '409bb76fd2c45fa8de09389d410a87a146bdc3495ae3ee65e32442d2d7766bfe'

def decrypt_and_execute_TIHEeeUHID(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '409bb76fd2c45fa8de09389d410a87a146bdc3495ae3ee65e32442d2d7766bfe':
        decrypt_and_execute_TIHEeeUHID('cef6518f6ab22ad1c2c83b93e48cc2568cdaa5a457f9d5c3e3991ebe9a75355926600299a0ac3d2a7d9c769c557706c7bd0ecc279148c1625c384f23f3dda772')

    def SiVsVevmcR():
        31 + 65
    SiVsVevmcR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '00b04016308eab9aaacecc685ee05e66220a76b457bf087aadb9cd9fec07a7ca'

def decrypt_and_execute_rnEjfkYIic(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '00b04016308eab9aaacecc685ee05e66220a76b457bf087aadb9cd9fec07a7ca':
        decrypt_and_execute_rnEjfkYIic('4f367f8fba64d3542f0ebfa85d53f9abd56768ffd392695f7ec106323a873eee7ea72cde84286b5fc726f0f8cb5f4066392da6347f85c9b4ee51e6294a70bc79')

    def hRGWcrAzps():
        3 - 24
    hRGWcrAzps()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'aa89f0da7517b84ae4d61e9945428dbe728fa9c539ae49b6f5db7e335c16f056'

def decrypt_and_execute_nBQYVGAAED(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'aa89f0da7517b84ae4d61e9945428dbe728fa9c539ae49b6f5db7e335c16f056':
        decrypt_and_execute_nBQYVGAAED('2b9e396f431b983aae688e0760b83ea36a71cab07277cd096fef314a9a3637f3225d8bd4d920657a3311187b0315c59d18d3d4924a686c5ea4089da08d40b877')

    def tDkHggTvAp():
        70 - 53 - 87 - 12
    tDkHggTvAp()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9374957fc6c176806dc8245e3101b622c535c9e246decee6eb64b0efe525ad8d'

def decrypt_and_execute_hVCmuTBadN(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9374957fc6c176806dc8245e3101b622c535c9e246decee6eb64b0efe525ad8d':
        decrypt_and_execute_hVCmuTBadN('f809c9a6868d0d3a74dc2e88fa9da93c4b7c1386d15db715f1f0f0a896435992a6dfe899274f11b61c1d2a091b2104d2a4c13796a365f4018e38b86aa8d248f7')

    def cgkBIlaoyd():
        58 + 55 / 49 / 26 * 64
    cgkBIlaoyd()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '66bc724b1fb74b5393bc3bfc4a8c3973ac21d9f4c7c3cde2af7f488931ad1d63'

def decrypt_and_execute_aiLOhMUJKn(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '66bc724b1fb74b5393bc3bfc4a8c3973ac21d9f4c7c3cde2af7f488931ad1d63':
        decrypt_and_execute_aiLOhMUJKn('efe4ff79e4f39816954bc7e9c5c71662177f0b3f3c02b1922d8cff9c89d76dade813da4fe8aec6ce9921bbc69d048e6fbff1b8873d8544d68cecdc01e23066e8')

    def BEjlmzoCGB():
        65 / 90 * 57
    BEjlmzoCGB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '93b845699a75928e32a2d2c9b1d1cad4979c12492790c95df5d531138cd1223c'

def decrypt_and_execute_XVeiGzGeON(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '93b845699a75928e32a2d2c9b1d1cad4979c12492790c95df5d531138cd1223c':
        decrypt_and_execute_XVeiGzGeON('be30aa6109e2ae6bbe5019839fd452e531531858df93b54e092058869f7fb325f1359adf1fe8305d342a3fd7b75b097f9f8e2bcd15a8741eb89bc59d69642f01')

    def CeXDBtFvEB():
        2 * 38 * 83 * 57
    CeXDBtFvEB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3e1b5e93446bf0c5c8c80ee4348eb06883e34a06d138c2f5e0d24bef3697ce6c'

def decrypt_and_execute_QtYIGWYQoK(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3e1b5e93446bf0c5c8c80ee4348eb06883e34a06d138c2f5e0d24bef3697ce6c':
        decrypt_and_execute_QtYIGWYQoK('fc6fe4c2fa782ece3c934371e95d54f2dc2d34193a1eb47b7e3486121f530e42cc250d76bc523480a4f7865f1a5353babf951cfab6a446ef96021e21f87744c5')

    def lPDnChrLsm():
        74 - 11
    lPDnChrLsm()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '941ab6ab447c48551b942940c7f9efba774752085482148d16ee085aac9c5712'

def decrypt_and_execute_BIAUwVmeOp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '941ab6ab447c48551b942940c7f9efba774752085482148d16ee085aac9c5712':
        decrypt_and_execute_BIAUwVmeOp('bd91f45e6d2bca8b117b37c9b672c8af885052ada9aba03bdba9cc144226ea78e72714d92dc7e2c27d51b6a9c63d50e6577a50a164f0c6d98a13f74233a297b1')

    def uajyZbIdTs():
        44 / 10 * 89 - 26 * 24
    uajyZbIdTs()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '425c447fedd65d27cc8a2a29af362b335b708e62ed3c7e18a439966d570d79e5'

def decrypt_and_execute_kKmZCDyDae(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '425c447fedd65d27cc8a2a29af362b335b708e62ed3c7e18a439966d570d79e5':
        decrypt_and_execute_kKmZCDyDae('ffdea0ca7eeb5486ea418b435568346fce352f5dccc4ef9b84dc971e926e4de90b02363a0a16c3c8331ecd8f62857b30abfb58b64816160033a5b61a5d972658')

    def jQeRlujwWx():
        96 * 57 - 99
    jQeRlujwWx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '23383c308edafd42c3b60e0410e313fd5f6cb74eedc327edba3abea4de06cf15'

def decrypt_and_execute_LJtGommfer(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '23383c308edafd42c3b60e0410e313fd5f6cb74eedc327edba3abea4de06cf15':
        decrypt_and_execute_LJtGommfer('8c41735a747cd8a503dafb8860468e2dad7b19c17c5e299fc5e1e5c518e89c3c2c1921398cb1b9c7dc13187b032cfdd5542577665695aa89ff92997dde439616')

    def YXEzPqPiVs():
        89 - 50 + 71
    YXEzPqPiVs()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5e8905f5de2ba9d10b6301482ab5580c3ca85b77e415374108dd035434c6000e'

def decrypt_and_execute_LWWYVqCNnh(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5e8905f5de2ba9d10b6301482ab5580c3ca85b77e415374108dd035434c6000e':
        decrypt_and_execute_LWWYVqCNnh('ef8596dc17dc3d6edd306930727ac91a8738a372cc7ad1ea98ce5d3a3f32eb3fad499a0f826f6f2023591fc8e3217af26262a00588b115f52ed75aba30a21d5a')

    def jqGKLetFjG():
        73 - 54 - 22
    jqGKLetFjG()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7fef391e10fb8761bdaff03885bd05520cc7eac73cc8a667b3032c551a20d0b0'

def decrypt_and_execute_ZfdRASYUYs(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7fef391e10fb8761bdaff03885bd05520cc7eac73cc8a667b3032c551a20d0b0':
        decrypt_and_execute_ZfdRASYUYs('e249ae0d6bea5b9e1f18b862fa0bad0e106093c4ce6f64df9369cc1eb7d0c1c4719bc9a430c98cbba536c4a8efe2342907b4ddcde35f2c4bac05ffb13ac404df')

    def hJlVSOqkRF():
        8 * 65
    hJlVSOqkRF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ca946cb5e78b79f256d49a7d595c692fdd44bbfd9dfcce337a72edc4274e7a2d'

def decrypt_and_execute_qSFBAJnpXp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ca946cb5e78b79f256d49a7d595c692fdd44bbfd9dfcce337a72edc4274e7a2d':
        decrypt_and_execute_qSFBAJnpXp('4ab41f6e1f74f769526fdc8d96aa783e8c9ab7deafa636da200893fb87fe0f7fd03a10a938fdc73d44dffb60e4d383e8ad45cb1a13eb37b2f6da22f3316d16c6')

    def CeJTzqPgtI():
        51 - 94 + 43 - 51 + 62
    CeJTzqPgtI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd98bfc9b7591d64adffe4cc8850aad733d81fa72dd32cf319fd8595b8876a3ee'

def decrypt_and_execute_oXOrbyXGIi(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd98bfc9b7591d64adffe4cc8850aad733d81fa72dd32cf319fd8595b8876a3ee':
        decrypt_and_execute_oXOrbyXGIi('74212b8bb48b6ab002f341a651e59817e0446217ffb2711e116f6b08bb4be0426bc568e0a896e4fdf565e94ab9e773b19b773f701948d6e21747624b5da1c666')

    def TikNCKorih():
        95 + 50 * 17 - 100
    TikNCKorih()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f416ec97c0938cac69893c33d9ca876e2784d23e3930dbfe683696d07eb59b6d'

def decrypt_and_execute_mpctvTqDBu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f416ec97c0938cac69893c33d9ca876e2784d23e3930dbfe683696d07eb59b6d':
        decrypt_and_execute_mpctvTqDBu('472ebf6172f9e22f470a1ba006e0fe66b20e77851634ec16abf28fb7fbc7678e09290abcb7b4e07435a7466fb3efb2f5b5ef263e1556e29be2f207a116e0d9a8')

    def afgCdAehQo():
        72 - 44 - 25 - 55
    afgCdAehQo()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a338d298fdc6e80abebc895f228c778c89da7c61531e1ad3fa7d616e7b979782'

def decrypt_and_execute_nDmfrJkaVE(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a338d298fdc6e80abebc895f228c778c89da7c61531e1ad3fa7d616e7b979782':
        decrypt_and_execute_nDmfrJkaVE('11934293b132c621fb21664416e9c9fa4f3ccd6722481115dcd8e56066a62d25c0d447f88ec87e9298c25aa636e738d84a9bbba21955b5be2fb9f1cf5fe5a6a2')

    def bQsZCIVZLK():
        15 - 42
    bQsZCIVZLK()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '071e57485a28f3033a3f36d4b67dce9f2b6557d38eb9af54bc2079238153defc'

def decrypt_and_execute_SfuOJbQpWu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '071e57485a28f3033a3f36d4b67dce9f2b6557d38eb9af54bc2079238153defc':
        decrypt_and_execute_SfuOJbQpWu('d3eee1784fd5467f1d3ceaeadaade523a6b48222199d3af77930a27897cbc35f04c1e37dcf8ce8eb59a1cc3f9d26a7f408dd8cec4666ba1d584516936281e4d0')

    def CjaFKcMCGv():
        66 / 51 / 34 / 53 * 39 - 57
    CjaFKcMCGv()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8bf0a4eab37e45a9405632275468d2e0be982a96eb078e9fd3c19e050a3e8efd'

def decrypt_and_execute_HiuRdYlBbg(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8bf0a4eab37e45a9405632275468d2e0be982a96eb078e9fd3c19e050a3e8efd':
        decrypt_and_execute_HiuRdYlBbg('0444da68e9b2d20930c3dba557219ce1c21dbc4d447ca95a6b7bda6adbb9b4382db6f175cfb0859673d13182861c0cc513ea5fd40067ad40e4a248b8c7864983')

    def xVjXOoMbxh():
        23 / 47 / 81 * 60 + 18 * 51
    xVjXOoMbxh()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'bc9c5c39f8e6b322419e24774c1eeeb304a72d52bcf2358a3f363dd742788b8c'

def decrypt_and_execute_iDSQRjjHvG(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'bc9c5c39f8e6b322419e24774c1eeeb304a72d52bcf2358a3f363dd742788b8c':
        decrypt_and_execute_iDSQRjjHvG('9514de71546eb2f4a8d06032d9cf802c04fb616a8a3b67ac2b93d206b31f6de25a563b12e156e95f6ed2e6304bd9601e30d40e36497878ab25b0b919351d43c4')

    def zNDXBvpjLc():
        93 - 64
    zNDXBvpjLc()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'beec88dafd3a71f329c4bed1e599540d841b1e2f59cfad4a3bc28dedc8112c45'

def decrypt_and_execute_tuvgygGbjm(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'beec88dafd3a71f329c4bed1e599540d841b1e2f59cfad4a3bc28dedc8112c45':
        decrypt_and_execute_tuvgygGbjm('c5252dafdb8b3f91bed806fdab789c7495152bcf709cf8efc27c5cdce3a94f04dbdfb33dcd831065e2ff6d6875630824d6601931062db231d167e32c873b5bda')

    def QYtXEszMpH():
        78 * 96 * 36 * 12 * 58
    QYtXEszMpH()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c49102926d30de1214ef6f327573908887f1643cc321ee5c6b634878494ea102'

def decrypt_and_execute_JDFppHVqwm(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c49102926d30de1214ef6f327573908887f1643cc321ee5c6b634878494ea102':
        decrypt_and_execute_JDFppHVqwm('ef811f0743cca3b00e11e3dbdd17eceefa86a8737cb24d02f452cd5086b3331ad6cea319f7f1e43769bbd0b553f53ddb07b80fbe78797d35ad7b8ea97ab53f17')

    def IwEvOumgVU():
        100 - 73 / 32 / 47 - 59 - 47
    IwEvOumgVU()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '83164bcd1cf15fba9877fe49d3715edd0f22b7e8cb9bbf09cd48815c522cbd39'

def decrypt_and_execute_tAjEUQugnB(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '83164bcd1cf15fba9877fe49d3715edd0f22b7e8cb9bbf09cd48815c522cbd39':
        decrypt_and_execute_tAjEUQugnB('183c0a9e94055177a59d943cb6eb817ece2e50208edc9988854a7c8927fe6442c97dc6b3f79439c61553db939122cbc360f4f1e37a1bcdccd3e8e370d0394667')

    def iBPBlvjARi():
        59 + 16 + 26 / 78
    iBPBlvjARi()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd8c59a40545c1f3f88694f000ec275645e8d05a4133b108f3b1deba7c043be80'

def decrypt_and_execute_oKtxPGVZlR(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd8c59a40545c1f3f88694f000ec275645e8d05a4133b108f3b1deba7c043be80':
        decrypt_and_execute_oKtxPGVZlR('334815758782c66e1010d3c754f69018cd592dd8832eb1b2c7f701eb8745d8d19f336c4e407814a7be6e9c56bf28943b1cb12097351316f058a95a421a01a859')

    def rPECTyEVqH():
        27 - 100
    rPECTyEVqH()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '6c561ffb104f55f843414d5189c10cbb8ffe136b87b0a123e62c6f3d8b2dbafe'

def decrypt_and_execute_KUwwKehloA(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '6c561ffb104f55f843414d5189c10cbb8ffe136b87b0a123e62c6f3d8b2dbafe':
        decrypt_and_execute_KUwwKehloA('57deb4fc3c3c29dcc4ed055a7f110c1890f8770d9d469f9a1731f82481af31a9f7acb67d9c4d99239093878ba12adac3fbdcf9e6b7f6fa706d1cceded6ebada7')

    def viFPfCGJIs():
        40 * 71 / 41 / 29 * 86 + 74
    viFPfCGJIs()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '914549b008593b0ce3c6469559e5de9b3923abd6950663aa8825345fe4dec575'

def decrypt_and_execute_uIIAnduoXb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '914549b008593b0ce3c6469559e5de9b3923abd6950663aa8825345fe4dec575':
        decrypt_and_execute_uIIAnduoXb('6c10ac7f7e7087a41be2dcfce2813433612cec81dfc968d35d9691c954c91e95fea9a4c8efd61f45b0f13f44d48b6ccb777a5bb113bb1a1d9869d6ecaff14f95')

    def TVlaPhbOcL():
        49 * 31 - 31 * 2 - 18 + 13
    TVlaPhbOcL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2abc70255d16caa3fbbe2754b24d17f7b79aa131006e66a90373d12f4dab9f20'

def decrypt_and_execute_dcSsdvjOXv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2abc70255d16caa3fbbe2754b24d17f7b79aa131006e66a90373d12f4dab9f20':
        decrypt_and_execute_dcSsdvjOXv('a67443d94ea251d11bad12b7a996b6dc883b863612189881eaf40664bbf3307f223549406c563a296b914d4140906a4a2d496c4c406a6f5adf7847191508e645')

    def UBExEQGXwV():
        23 * 8 - 73 * 80 - 93
    UBExEQGXwV()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '94a8c8f967f068894b9da061aca1af077f2f0dff8872be5b61eb8fda021bd947'

def decrypt_and_execute_evtvPBsdFu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '94a8c8f967f068894b9da061aca1af077f2f0dff8872be5b61eb8fda021bd947':
        decrypt_and_execute_evtvPBsdFu('4d0ec1eff8657d26ef0c27b7c0b6222234857e5f217caaa30e4d5f5c315a50f0cdab882bb0baf2c5a7d241f950fa4e20b5d303efadefd99261f3efc60ec74d8e')

    def kUnDmATUPZ():
        74 - 92
    kUnDmATUPZ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a44cdf1a3d70337a3f1123eaac993ec07b4e9d5a785c85a0d80a31ca6283a86d'

def decrypt_and_execute_CSnlhqekEo(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a44cdf1a3d70337a3f1123eaac993ec07b4e9d5a785c85a0d80a31ca6283a86d':
        decrypt_and_execute_CSnlhqekEo('54a06a85ceef83119397a146c25a503d3e0169b8275490186a9ef79aca443a97dc2367584cf9016e504590e35765055889cc528d0351e69848eb1e9d5a8ea37a')

    def AnwpuacJqL():
        99 + 99 * 93 / 6 - 80 + 61
    AnwpuacJqL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c748829b7661d35cd1b801d99890bdaf5acb840d23a0845e0248c8c841a1e6c1'

def decrypt_and_execute_ZIwwCzxOig(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c748829b7661d35cd1b801d99890bdaf5acb840d23a0845e0248c8c841a1e6c1':
        decrypt_and_execute_ZIwwCzxOig('930889d97847dbf8c34280233cab598b2244d79de3ba4782daeab8b341b6f73b9f6c6a308088f3df0e7d24f86e368be0e2b08bf95d042e8c541f767b23ddd6cd')

    def PCsAVXNbtn():
        11 * 44 * 28
    PCsAVXNbtn()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3f3f6c7b7fce3c82bb57329da2858f771c8e23a8f40defce958c2a50326bb48e'

def decrypt_and_execute_LWisgDpfHu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3f3f6c7b7fce3c82bb57329da2858f771c8e23a8f40defce958c2a50326bb48e':
        decrypt_and_execute_LWisgDpfHu('f34505ca70ae8173a0cca3c369e884980144b4431603bf9786da3b7e008aba9d4afdc794b3a6d6fdde229ccbb4365cede9134c98108e79163aedb139ed302ed0')

    def KVwIVMZoIs():
        54 * 26 / 58 + 67 + 79 * 98
    KVwIVMZoIs()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'cdc19b6f5bbd8cd4bf049a1764f79fdc9f832ad741da9993a2fe9a1ebc2d010b'

def decrypt_and_execute_rmyrzuSRpn(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'cdc19b6f5bbd8cd4bf049a1764f79fdc9f832ad741da9993a2fe9a1ebc2d010b':
        decrypt_and_execute_rmyrzuSRpn('718e281b4ee6058c2be33ac93e5e2fe3859b000dd121a4a3d618cb04d9cff03d489db8a8e44ce5f0cd413c9339d24490ac796ac86b85e3209bec9674a99862e0')

    def vVcXoCptTd():
        72 - 62 * 14 + 61
    vVcXoCptTd()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '034ecf4b087e11ee1ceb3c3781652e11d7b2fbf389b18c019f5c6f7f83715896'

def decrypt_and_execute_lrZTZSJbDA(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '034ecf4b087e11ee1ceb3c3781652e11d7b2fbf389b18c019f5c6f7f83715896':
        decrypt_and_execute_lrZTZSJbDA('3922c3bbca20657b91ccbe64bf4ffb49685adf091c78e26d0dd92581962c1bc6ec50a5c95a1a97011ef592c2d421f0252b62c27658789d9287a66869a9d9dec8')

    def jPtvDpdiAH():
        66 - 75
    jPtvDpdiAH()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '313d7d5a9baf6ac6810c060ca39d1c51354bd45ddf6be00bbfd0b335ae1dafdf'

def decrypt_and_execute_EKimKYcSAl(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '313d7d5a9baf6ac6810c060ca39d1c51354bd45ddf6be00bbfd0b335ae1dafdf':
        decrypt_and_execute_EKimKYcSAl('b65bc23a0882f7c6f4675acc38fbd7a23dda10a35157d2858b39059cb5ede938acb4fbd483d0fea1e20a27a276ad2941a525fce1ef510a2857ecd083ebc98d64')

    def BqGWrrADsX():
        52 * 45 - 76
    BqGWrrADsX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '76265165ad360635860600374e8ecd14599536417ae9fc609e2040a9b22b09b6'

def decrypt_and_execute_cZhyQLJPQV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '76265165ad360635860600374e8ecd14599536417ae9fc609e2040a9b22b09b6':
        decrypt_and_execute_cZhyQLJPQV('a12dfb00ab367f115a55b7e09a5c7cc6272711bb0913894c9ba05a1da9cd0e7dabd22c8e68a30a78d7f592127b9c4fe89e5ebbf5190f9e5eeada705e0cb5c721')

    def daeaVDnTWp():
        77 * 80 / 35 + 27 + 89
    daeaVDnTWp()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '299c0c9bc6c47f382307b1fb99f81edbad432537d2114330255b3c5fd63f30b2'

def decrypt_and_execute_xXvpnzyXtk(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '299c0c9bc6c47f382307b1fb99f81edbad432537d2114330255b3c5fd63f30b2':
        decrypt_and_execute_xXvpnzyXtk('0eb46763bd049b32f1ce58239fabb3ea607bd505424a2fd1dbb6180c8e8f4eeafe45b69b5073c3a169826966f4ba9833273e9c2ad5e78bfe4fb9a411ea74ee2a')

    def kHDUgokCnC():
        60 + 13 / 53 - 35 + 75
    kHDUgokCnC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '427a1f7efb1b2e665a0190e916ec5a6ff24f40e35efc3bc351d955b5eda1a621'

def decrypt_and_execute_sIyMQVFMmN(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '427a1f7efb1b2e665a0190e916ec5a6ff24f40e35efc3bc351d955b5eda1a621':
        decrypt_and_execute_sIyMQVFMmN('627949419dbe72f2d8f21078a182182413f546d6c76315fe1b54400be74707d206c13819995cecb7e5b097ffc9651734fdfb1d72260565fa43ea5f2499f6ced6')

    def MumbtKTmvm():
        94 - 45 + 44
    MumbtKTmvm()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd125ddcb5819251f146258611964340e2ffa6193f6ddee1907ac0bc7bc1f4d22'

def decrypt_and_execute_cXySbWIKRi(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd125ddcb5819251f146258611964340e2ffa6193f6ddee1907ac0bc7bc1f4d22':
        decrypt_and_execute_cXySbWIKRi('9e518c97e26758b6c5d21db28fb9618a65b8c02bc58bfb91b9e85304f32275d0a6222056eb5c6c01d1b7f60f8845b7370d408d32b740995c4985c5c5efdb930e')

    def VTrQlihnix():
        67 - 12 * 71 + 15 - 39
    VTrQlihnix()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3b96fe0ec87d122e8aaa3b8fa2158a117c136a48ae33a43312defa13761d7081'

def decrypt_and_execute_nMxJZqmKYb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3b96fe0ec87d122e8aaa3b8fa2158a117c136a48ae33a43312defa13761d7081':
        decrypt_and_execute_nMxJZqmKYb('c41035882e09ca9b84a95d0348824f5c61a0ca55024fada899800cdca897883867fef1763a37b76901afb324432bbda7ecb22d1ac7c3da72ade1bcea211cba32')

    def rLuajHJccy():
        7 * 39 / 8 - 82
    rLuajHJccy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'cc4a406bb6888e8cdd955256f3da9f455d970359146030bb39875b6df2e2dae3'

def decrypt_and_execute_dBqvqkkITx(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'cc4a406bb6888e8cdd955256f3da9f455d970359146030bb39875b6df2e2dae3':
        decrypt_and_execute_dBqvqkkITx('0693a60a4ff4ced7ef54d095ba8015a1925b7f26e4d5aed238d08583392d847f48ea7ae8a41a6bdedb3f1b35e6ad4f56a2df79217b773647f8a35036aa45a0ea')

    def KeZMYZKHLv():
        55 + 70 - 95 + 78 * 14 * 16
    KeZMYZKHLv()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '31a32537596f3f8c9b0e9b6cf026bfcb1352565b05520170c2a625c0c0ab3529'

def decrypt_and_execute_SFkEGDWgWK(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '31a32537596f3f8c9b0e9b6cf026bfcb1352565b05520170c2a625c0c0ab3529':
        decrypt_and_execute_SFkEGDWgWK('25d3bc28f7a7f847c3b59a3e15349215a60acfd288d00f736b1f1b921765fe236b9e9eb9cf6f8221b6cd6397065df4cc035d886a9962099ba375b29f68a3266e')

    def jjVyohBiIE():
        29 * 23 - 11 - 89 / 1
    jjVyohBiIE()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '066d542d9d45ce9d924b872438a31b0560559d39c52511d438fc31b38d3f9760'

def decrypt_and_execute_QynAYHZnXO(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '066d542d9d45ce9d924b872438a31b0560559d39c52511d438fc31b38d3f9760':
        decrypt_and_execute_QynAYHZnXO('5f1e890b70e06505c05e91f2752938c13250c2def31df3e1efc7d97ae0bc80c5c75865e7a14ec094296c406656cc6eca6c22a6f83ee9063077e39998b0003cd2')

    def PRgIBWDnmr():
        59 / 51 * 27 + 1
    PRgIBWDnmr()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'eaeee03e508e5f190ac6894bf99ed99198ca3305628ca4005b32997a0b5e6f8b'

def decrypt_and_execute_dobZiWmtxe(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'eaeee03e508e5f190ac6894bf99ed99198ca3305628ca4005b32997a0b5e6f8b':
        decrypt_and_execute_dobZiWmtxe('da3fecb492c5b2effe2528570cdba58f3c0a3d6630f6f1fa2f49f27f28979ec456b96c84a6a2937e52cc55d376bcdd3ef1830da1bc29316a956c4985ba48c2b2')

    def KyTQpycnlU():
        66 - 35 / 51 - 50 * 19
    KyTQpycnlU()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f764d496d0f09df64b2daeb08bfe6749d0626c68183282341fc3ac7f7a7c16d2'

def decrypt_and_execute_xesqmlHMgv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f764d496d0f09df64b2daeb08bfe6749d0626c68183282341fc3ac7f7a7c16d2':
        decrypt_and_execute_xesqmlHMgv('3e3f0160f5a2a349dae1ace86af10c715b28e7acd8e814dc8bef2048bd8932a103e54b506c4413deb89bd9846b3217a82a15b159d21d7e1d10d9000f8446a87d')

    def ALnmMipilA():
        95 - 17 / 34 - 25
    ALnmMipilA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7a18a90b7268650ed4fbf7baa394d04a3adbbd351e6e7a7d815921d85a2d3c7e'

def decrypt_and_execute_kGJUaBPMTb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7a18a90b7268650ed4fbf7baa394d04a3adbbd351e6e7a7d815921d85a2d3c7e':
        decrypt_and_execute_kGJUaBPMTb('8e3235c10fb033eb4f78db471b902cc7d4cc3f12b3a84fbd7af1663caf974bed53b98de369b013f925f808d6ac05855712ded2a81c5f666ed18121c1495055d2')

    def soLFZJtZGX():
        52 - 65 - 97 - 20 / 31
    soLFZJtZGX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e8835101c76095a6eaa439e8bb3d3262e083b2c505e5040fa0cd472a253f4e09'

def decrypt_and_execute_hjHDwSsThC(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e8835101c76095a6eaa439e8bb3d3262e083b2c505e5040fa0cd472a253f4e09':
        decrypt_and_execute_hjHDwSsThC('84ce576537e45ca289c1a316fc4a609a3344dc70c0d87b0f33307cb48a1e196337950cd59512e4b5d7ae04426d9f800f1ed4cbf447137c9c5948b7c8f5d0ce17')

    def cBwiHVukNp():
        94 * 59 * 85 + 27 / 44
    cBwiHVukNp()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f08fd35b8da55cb49e2b359d4499abe5d385dfc914a4fd5e23a4ce496cea861f'

def decrypt_and_execute_NNYtEaOYwr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f08fd35b8da55cb49e2b359d4499abe5d385dfc914a4fd5e23a4ce496cea861f':
        decrypt_and_execute_NNYtEaOYwr('d0abcc400682e8e3783ff212ca77e3c48edc9fd301f87497893ff35f6d4db975dde8d4abf4f89e7a9acc5920fcdd5f8b8c55af77610c9bebdc0cfc5e5ad09083')

    def vSrsRMONeh():
        74 / 60 * 6 / 36 - 15 + 5
    vSrsRMONeh()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ccc7448884ed95ba7660486aeacd53c0d3175b7e2234076b3e36d5f9c102f106'

def decrypt_and_execute_hbNJxLfpld(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ccc7448884ed95ba7660486aeacd53c0d3175b7e2234076b3e36d5f9c102f106':
        decrypt_and_execute_hbNJxLfpld('71f3bfd703a767e4058aa1014d499187d33937b2d153c4b0034d57c6e7b7a34e2f3b243885fd6b6afe95477db222c2b791b5ad0fc827f6e49f072db4f339d122')

    def KKWelhrTpX():
        57 + 3
    KKWelhrTpX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9a556418960a38f21515c7989c7d8f491f632d8b0eb3df844de97eb14dcd595f'

def decrypt_and_execute_UmThbLLdhp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9a556418960a38f21515c7989c7d8f491f632d8b0eb3df844de97eb14dcd595f':
        decrypt_and_execute_UmThbLLdhp('8e251b698ec874bf947aa8a6d6b34719362b1b4ec7bea167338e162d1ddcf68f198c920894a8deeb563acac224420e88ff0566aea25629651b8abdcdae32d2f2')

    def DHDwmLBheK():
        100 - 99 * 29 + 80 / 39 / 16
    DHDwmLBheK()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e97104aceb2962dc7bb93419f9a53b51d3cb826ae188ba86d3da90fc32c3ec43'

def decrypt_and_execute_xdfyERCPeQ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e97104aceb2962dc7bb93419f9a53b51d3cb826ae188ba86d3da90fc32c3ec43':
        decrypt_and_execute_xdfyERCPeQ('fdb9dba3c71127057f85d9b47c8ab8941106111cefc85a960f355aad7ccd7f40296235dee1dbdfe2127a1698e608ce655a5af003c87f54d8d49a6ce6e774e749')

    def nHsLUZTJzX():
        20 + 89
    nHsLUZTJzX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '463226ce2b0068da04309da5df23fa2dcab9cf0df3c953bdb5ead41d191710c0'

def decrypt_and_execute_YVOVvJFaAu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '463226ce2b0068da04309da5df23fa2dcab9cf0df3c953bdb5ead41d191710c0':
        decrypt_and_execute_YVOVvJFaAu('f38aef55b3a15b86cddfe98cd834c62d1730a4c7a919f5fa1996fb351ea85afb969c93d9518b87a66f0dbd7659b24774824e5ddf28bad72cfdda971853b638b6')

    def rhWuVJiKpg():
        50 / 29
    rhWuVJiKpg()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4194d14f5320152818bef51efb4718facc4ae1007c576cc72ad0dfae15bdab21'

def decrypt_and_execute_qZaFVtHBES(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4194d14f5320152818bef51efb4718facc4ae1007c576cc72ad0dfae15bdab21':
        decrypt_and_execute_qZaFVtHBES('1b3ab74a34bd29710b965b9851a662a5127a4a670cbd6be473d4281a4615c863351b962b936993cc2dc5016a930831f224358dcffb8b9c824e7bad03fecbd3b7')

    def zCJvInQgSC():
        32 - 40 + 29 / 30 - 95
    zCJvInQgSC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'cd6ccb1c42abdd2ade5f5ab1d17e2c6ce042adbf182304f3290ea1ac888c7867'

def decrypt_and_execute_YZAKVLEjPQ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'cd6ccb1c42abdd2ade5f5ab1d17e2c6ce042adbf182304f3290ea1ac888c7867':
        decrypt_and_execute_YZAKVLEjPQ('bbe90c5b162f6450c7dfa4a876a962347b714791512f7e1e150a289e77e7223d60e2d29843045be49c00939330f7b40f2a12cc3ed9cb1943565852b880aba2c1')

    def bJdnDyOwWJ():
        87 * 17
    bJdnDyOwWJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '47c2eb05f4387bb7b94376dd71dc349787d3c4850a0c8641d23a2ca9c41f82a9'

def decrypt_and_execute_tToxUtWwFT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '47c2eb05f4387bb7b94376dd71dc349787d3c4850a0c8641d23a2ca9c41f82a9':
        decrypt_and_execute_tToxUtWwFT('11bfea79e8982b3ebb4079c3ae2fc292b404f101e2c232bcc5642c84bec9373be7e7ccfce03aaa314165f69c45356ae60004ad64b6c9ef746695077fe9c6c30d')

    def cbYJmkULvD():
        98 - 18 + 7 * 4 + 92 - 95
    cbYJmkULvD()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f548e06871b377631de1740abb40f9be6cbd91984b8c7a04e940d1d52bd79c77'

def decrypt_and_execute_CTDJvJaKaE(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f548e06871b377631de1740abb40f9be6cbd91984b8c7a04e940d1d52bd79c77':
        decrypt_and_execute_CTDJvJaKaE('71483c8d822116fbf8c68a2beeaab10a864a6d910168b1954fd0d54d044886dee289ce4fb4ee60c9463c6789546380f90aec7d1c2eeb481c8d3f570bbfcd6556')

    def axMftGKUOy():
        45 + 35 - 91 * 13
    axMftGKUOy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd6f449006dad9d7acb2e4e3a745388a90e295e18a775ac210e1a78df6546de37'

def decrypt_and_execute_lyTksqpJpQ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd6f449006dad9d7acb2e4e3a745388a90e295e18a775ac210e1a78df6546de37':
        decrypt_and_execute_lyTksqpJpQ('64511109421bb5f3419d4b9dcff4bc8c48137bd106873f27aca7d2c9804cfad3fce1a41eaaf8c08057ea987cdeb0ac0b2a76c1a8db6fd36ed220276a69d29efc')

    def wXTWMqoKOI():
        31 - 86 - 15
    wXTWMqoKOI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd1c8339997fdb8a81b600e557b8c02f49e1669a03c0442bcc0ffbfe9953c7e4c'

def decrypt_and_execute_WpIfNsZTjL(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd1c8339997fdb8a81b600e557b8c02f49e1669a03c0442bcc0ffbfe9953c7e4c':
        decrypt_and_execute_WpIfNsZTjL('2f3e5339e135df8d1748b60193d12034b9fc1318a4eed25f0532b708dfcd4698cf80f443386271cc92512e201117637b307e099e78f715756225fe05c7a5604f')

    def TNFOPdEBjm():
        78 - 45 * 64 * 32
    TNFOPdEBjm()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '221739be69236afabd2138c3f90bdecb01d12e2b0112566d5b69b1f229c99dca'

def decrypt_and_execute_PauwdkgTJq(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '221739be69236afabd2138c3f90bdecb01d12e2b0112566d5b69b1f229c99dca':
        decrypt_and_execute_PauwdkgTJq('32cc28dcd2997e736d42f595327f3b67bc1c7b3b9c863d13cbf7c104592a36a522269f4a40782cd024ac8e8c038944fa87d3c597cd3fdedef8c06f8cbea7e063')

    def brkPTKljyC():
        91 * 82
    brkPTKljyC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '73fe39f74a7cc46ad84c3bb28f33f91f4417aa541dea7e2a13ad9ea38c079c81'

def decrypt_and_execute_xPXeWxcpXX(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '73fe39f74a7cc46ad84c3bb28f33f91f4417aa541dea7e2a13ad9ea38c079c81':
        decrypt_and_execute_xPXeWxcpXX('0bb027789d7f239093fbec728c88988238c452a4eb784577c5abbcb21b7a2c15ba9c6cfb29f7ef5c6e3e326de5709d564bec205d2569f9bf06cbb059d019af36')

    def TaRskVnOmc():
        56 * 75 * 15
    TaRskVnOmc()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '93d7eb8f119e35abf994804df15c94bf462ec84d2cb0dbb08bf867ed7782b3e6'

def decrypt_and_execute_cbddcTpyiL(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '93d7eb8f119e35abf994804df15c94bf462ec84d2cb0dbb08bf867ed7782b3e6':
        decrypt_and_execute_cbddcTpyiL('eb74f57a86a3b2f1bc14e91352a027d35376d487902628969a1e86a548c3367c49bcc49549bdf55d0f55e333ed5ac9c65d70548fcb844256043c1a0740e56d31')

    def RaeNxpuGwx():
        3 + 1 + 26 / 18
    RaeNxpuGwx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd748e65e5a5ace00d080ec4988b173797fe13416f0c5b5f1fd772e29fa9b1ebe'

def decrypt_and_execute_TxVbseYTmU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd748e65e5a5ace00d080ec4988b173797fe13416f0c5b5f1fd772e29fa9b1ebe':
        decrypt_and_execute_TxVbseYTmU('4d29975ca1cb9dbba57e25be69f9ff5f7ed7ccbe0dbe298c18b5e8a05895616fa72726bea55b186efd7880d59729a781df7ff9dbf1bec045d45a121205fa8f34')

    def sqAFYVZEim():
        74 + 48
    sqAFYVZEim()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ec1a3e3c2d556562e7569c59deced0987f737ccf9b1130b1b186fdf304c01059'

def decrypt_and_execute_EhpAEYdCrK(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ec1a3e3c2d556562e7569c59deced0987f737ccf9b1130b1b186fdf304c01059':
        decrypt_and_execute_EhpAEYdCrK('584c8fe26fc3e2d95fb8e133ead99984e55d757f67d51e7acff3274c1ef2d5776b9d1be496532776cb49d5e25c524ae466be87eeea29bf927006b586e743093c')

    def PfAIRdoMOP():
        22 * 22 - 47 + 99
    PfAIRdoMOP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd08617b46c8cb7b3a3538fb917539cf86a99814ade30897cdca5328ae668a9b9'

def decrypt_and_execute_opBGrExdRD(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd08617b46c8cb7b3a3538fb917539cf86a99814ade30897cdca5328ae668a9b9':
        decrypt_and_execute_opBGrExdRD('971d8ef254c00d8599e5bf9c21c8e502ff77ca15b32c58454b3a014c4687fb30338a92f05a6a8f8fb97574e791c31dcf74d444c597503b3ae2c2a5f3348f8814')

    def DlzukXfnXO():
        88 - 68 - 35 * 5
    DlzukXfnXO()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a99083efde60135852decb9a4a7750be4b2ae978929979a0ecae33705537fc1f'

def decrypt_and_execute_qlcIMYHkpS(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a99083efde60135852decb9a4a7750be4b2ae978929979a0ecae33705537fc1f':
        decrypt_and_execute_qlcIMYHkpS('56e6494b0e052d5dd2af6c2f70c10a990944690f42826440413aa5c922a5eb9af3011f0e4280148b7243105c560e272673d2644384e53b4d553ee4b9eb175046')

    def QuhuKnuUcM():
        32 / 71 + 10
    QuhuKnuUcM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '77d9bfd751b9f7dbd1ef971586ec8d4b8292a826dc770f6d8d29f72c6c8d96cf'

def decrypt_and_execute_eyHIzASsmp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '77d9bfd751b9f7dbd1ef971586ec8d4b8292a826dc770f6d8d29f72c6c8d96cf':
        decrypt_and_execute_eyHIzASsmp('d6e15f59a71e1d2582321db48e2656d4ab0433bd39db1e1218670801bf21da865acf77da80233e3b62fcd74086a03e09771c99d611565f40fc129fa0b4c17643')

    def nxnQCisreq():
        5 * 52 * 16
    nxnQCisreq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2531e45f0a03567494a15325cb7b1b449c2bb67a73dc1fa7571771523af05d8b'

def decrypt_and_execute_MEPeXuTEWz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2531e45f0a03567494a15325cb7b1b449c2bb67a73dc1fa7571771523af05d8b':
        decrypt_and_execute_MEPeXuTEWz('895da5da52f79eab9538d5a23af07290c928e878b7650ebba95fee53c4c3b56ec9b9a8b5bf911ec6c76842971bf737910f99299d9408c79f4d6a0d67e8470da2')

    def cEqrANgSEP():
        97 + 43 + 63 + 95 * 82 + 30
    cEqrANgSEP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'bea16af22bcc510ffe682f82c1b800387fe0950e1bba11658f5e4e7a317e277b'

def decrypt_and_execute_aTxAANyWGd(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'bea16af22bcc510ffe682f82c1b800387fe0950e1bba11658f5e4e7a317e277b':
        decrypt_and_execute_aTxAANyWGd('459186e583e36448a9eff612ea5f1d490337656474ea0149de632ad3c9ca10db326da1f9b8f5f98f9f33e05f7ce3d46d0f249783dfda7b17de9ac8bcf068900a')

    def jxOIqEqpAO():
        5 / 1
    jxOIqEqpAO()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5238fcea6c48e6f5bfde4923b587d51315cc1e20dd1f9fac792b32cf2bda50fa'

def decrypt_and_execute_xgBIULqtNL(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5238fcea6c48e6f5bfde4923b587d51315cc1e20dd1f9fac792b32cf2bda50fa':
        decrypt_and_execute_xgBIULqtNL('848fcc38b4e03d341e53fbb9b2f2829601e1e0fe8b6a62c3c75d8831955165db8f395b28608cbb9a2ecbad3d0796b6cd9c998062d85b9806ae8f3f2d46967b27')

    def YgvtIJIUgq():
        72 / 49 / 98 * 95 - 5 * 77
    YgvtIJIUgq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e887ad75a80a168267dc7e762fbb62a9e497a5512ed2e9353fa1f973711132a2'

def decrypt_and_execute_tmAKgJbJIJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e887ad75a80a168267dc7e762fbb62a9e497a5512ed2e9353fa1f973711132a2':
        decrypt_and_execute_tmAKgJbJIJ('5c7849be4fb514a7aac3376350e2a50bf57375b0600231d6606938ebbcbf897f923a9f066615ae0d15e31af5a7e3344606d06ee03f9752896ecc62aa487d56a4')

    def aodhsAptEy():
        6 / 22 + 49 + 44 * 78
    aodhsAptEy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'bcc89450a4aef691548df431ee2fb38efb67dcb9a04c0886f26929132820c1f5'

def decrypt_and_execute_ZEjZRMmlct(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'bcc89450a4aef691548df431ee2fb38efb67dcb9a04c0886f26929132820c1f5':
        decrypt_and_execute_ZEjZRMmlct('a28101d0e3611eb30d9adc3fe8ebf3603226dd742e429591f971d38e57ea09e167fbe8d9872588289ed636076df43ad1d4cdd052788122128e526a0b7f75a6fa')

    def AflPCBnHrN():
        70 + 68 + 24
    AflPCBnHrN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'be861365ef00c2e9d8407bb5e6d1c8b42820f440cd7b57a505e4f528a01e54aa'

def decrypt_and_execute_azaOataZBs(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'be861365ef00c2e9d8407bb5e6d1c8b42820f440cd7b57a505e4f528a01e54aa':
        decrypt_and_execute_azaOataZBs('7f037ee172a4e8b8602e656e4373500a556579d7a364bee25b4e9f5049b53da0d5cec06cb71c2a3f34e28d6deb313ee4b7aa3303450180dac4e3d2396a1c67f5')

    def cQUEDkXDEv():
        24 / 79 * 72 * 100 + 28 * 10
    cQUEDkXDEv()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2b1d237dc1818ed8a3dca455ca0ea8a2f9ddcf7d4426e62addb0e741162c879f'

def decrypt_and_execute_ydrpGCcjtm(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2b1d237dc1818ed8a3dca455ca0ea8a2f9ddcf7d4426e62addb0e741162c879f':
        decrypt_and_execute_ydrpGCcjtm('c9b6079b13f83c2c26cbcf7425ff4074e65acdab69226201634085b84600951845a4a7b87a78b7004c93df46a9c0df2040831b89f57eb58035080e99b53e9eec')

    def zljqVDKWXp():
        9 / 53 - 43 + 65 * 70 - 93
    zljqVDKWXp()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '67d06a07c0d696db4f029f2167a60d81caa723ce80d7edd59cb36c7c7e2556e8'

def decrypt_and_execute_yGItgzrzZN(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '67d06a07c0d696db4f029f2167a60d81caa723ce80d7edd59cb36c7c7e2556e8':
        decrypt_and_execute_yGItgzrzZN('29b4813b9a20da9df8479b0547b0162d2a5f72ec399d588df67febe357f92f95ab93451886e000c3ff3dea7b0f299dc26bdfd572a39e84a57f6fde860eb2723b')

    def MUczExBBpB():
        59 - 24
    MUczExBBpB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd07fb15d5413aa73d5ebb4553fa3bafa5db5ee63363c91f71acabc4d4441da40'

def decrypt_and_execute_gzQQhGKMVX(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd07fb15d5413aa73d5ebb4553fa3bafa5db5ee63363c91f71acabc4d4441da40':
        decrypt_and_execute_gzQQhGKMVX('991c1c8c615d95be8ba94bcc154bf3f54535f657b18452f15f00df76855fc8a220faacd7d00b9370e8e23b0274d40999257f8ee81443b8fae67008d8907e9038')

    def tIDqWkBcwa():
        70 / 11 * 39
    tIDqWkBcwa()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5d02cf7875e66c285bba8392e4e79d5122f45bb69936b816fc4d26815164f1b7'

def decrypt_and_execute_NKkxNxtvvr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5d02cf7875e66c285bba8392e4e79d5122f45bb69936b816fc4d26815164f1b7':
        decrypt_and_execute_NKkxNxtvvr('0f750b1d1982dd669a6813f13a215fd52aabcd82275ce629ee667d9c69a5c28543a8dd74404a89ae01277a8dd77bc91894d283e3a6500fa70d28199996513f8d')

    def wdOiOsXSWo():
        33 * 45
    wdOiOsXSWo()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '6df787d034a26b7904fe2d90947005456b83271a252f8586210f627b95b3899e'

def decrypt_and_execute_xMHuGSsCVy(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '6df787d034a26b7904fe2d90947005456b83271a252f8586210f627b95b3899e':
        decrypt_and_execute_xMHuGSsCVy('4ddc49df68911e67b44c61fb867f0f3b3983e1fcb134aeb776ae907d9b0dc43975341e42159b96e78292508c49e51b9d6e6496e22f23de8fa4df3f69a4f3cad1')

    def ZGVdxpNWSh():
        63 - 4
    ZGVdxpNWSh()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '294537dfc13227a5b38539c8080d5a39216eb18b4bdb9c5624d1d63fd52513b3'

def decrypt_and_execute_WxOdcSGrpH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '294537dfc13227a5b38539c8080d5a39216eb18b4bdb9c5624d1d63fd52513b3':
        decrypt_and_execute_WxOdcSGrpH('8e24d86feeb9b8540d08295afcc81cd9a1ec508e00780758e10caca3e443fa078f63b0725bdfd26f6ed1401fd3c2ca0dc36e041020f936b120d5994f1e353665')

    def TdoboHEVXg():
        4 / 53
    TdoboHEVXg()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '6508ad9c438ccf1f02d1ce28eef03f78cf64dbee549e57fc90a9cdf384060665'

def decrypt_and_execute_BeHXNwhzFs(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '6508ad9c438ccf1f02d1ce28eef03f78cf64dbee549e57fc90a9cdf384060665':
        decrypt_and_execute_BeHXNwhzFs('4ad16d4f9e1df9183d5584e68aea2a8048ff7eb35b9bcfb142e78b18da3706ffc4a0510340b474254952cbe9b44247b18a8d571c72e6ae719e8dec57517d9ecd')

    def iQlCwTPcMC():
        89 - 80 - 73 + 40 - 54 * 28
    iQlCwTPcMC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '549504b5111d965e1949960b289476a7bed1efce3214f3b7880a02bda1d05453'

def decrypt_and_execute_giTvvJHBOH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '549504b5111d965e1949960b289476a7bed1efce3214f3b7880a02bda1d05453':
        decrypt_and_execute_giTvvJHBOH('17f1f58b466b3748990bd484d8df8ebef32efffd95965419355a37d195a4f732879984093807def817f9b76a7b38633d69c9d78e52c222c011c11868b3e40170')

    def UHVuFQGftM():
        83 * 44 + 78 - 24 / 28 + 16
    UHVuFQGftM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8e703288e8c115505fded3d5e0cd90dcac22231a5c6677c92c2714cc4ce06688'

def decrypt_and_execute_yfCWmSsVrH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8e703288e8c115505fded3d5e0cd90dcac22231a5c6677c92c2714cc4ce06688':
        decrypt_and_execute_yfCWmSsVrH('35f9de12cf1c55248ac0b5970df5eeb832b346a92c4ccef16cea733697517ab30b98f29620ca79de5e2042b2696ab9863bba6b6ae8540ff03d3b83c03bf84bd1')

    def NLZEdJKABz():
        4 + 35
    NLZEdJKABz()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a30aec6f5b21b9ae103016a4ea4caec8eae29a351423695ee66c68cbb1daa96b'

def decrypt_and_execute_VCHnMpFcnJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a30aec6f5b21b9ae103016a4ea4caec8eae29a351423695ee66c68cbb1daa96b':
        decrypt_and_execute_VCHnMpFcnJ('6da53c0f7484622d9f80d4ce6f06cd01dcf7693502e73f7ed81ac845b2e2eb99bbd457b6b435db3d252acf3dae660e2dcffcb3b96171611874e9c364c4050937')

    def BfzhIqSRHS():
        11 - 29 - 36 * 59
    BfzhIqSRHS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3af4d83870340800991f44348718c0085618f933b731fb9b5ece44c1338a1577'

def decrypt_and_execute_DZWysEjKsd(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3af4d83870340800991f44348718c0085618f933b731fb9b5ece44c1338a1577':
        decrypt_and_execute_DZWysEjKsd('e48b97d06ff15b14d8bb6bb426bb31bf56067c5861137fd9e01b29c37272c0755010f167b7ee9d0734034eddf128ef4bb6a5b6b1118439cc75f5750ccc876c47')

    def sitiZyRPEE():
        73 * 3 - 61
    sitiZyRPEE()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ef8b3a22ff5bae178d5ae6d807f02e64052d9c31c9e50df55e68f87cc5aff4e5'

def decrypt_and_execute_XgzwWNdkWu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ef8b3a22ff5bae178d5ae6d807f02e64052d9c31c9e50df55e68f87cc5aff4e5':
        decrypt_and_execute_XgzwWNdkWu('0bc9ef565a18d584c09f4456f85525d8554a00964c71bafd9f97230d9bd37286e5910d991f48ab8b44a9e46ae04c8f05ffa1b0ae8dfe06f86091f3c3420409dd')

    def cnpYWmBCRb():
        79 + 92 - 71
    cnpYWmBCRb()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd58b586937608cf5a3f9e0e161b6f4ee7fff7a1dfbe581d61ff3342f1f19cbe1'

def decrypt_and_execute_dxMBRoBMFX(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd58b586937608cf5a3f9e0e161b6f4ee7fff7a1dfbe581d61ff3342f1f19cbe1':
        decrypt_and_execute_dxMBRoBMFX('f416455e5223e6a07a8a584f71bfe853e5c2b45584b7b3838934f0187e650e0ac5a1cf3c1d346dbf9ac8b9dd53666d430082fd891a233a663fc5f35027d2f61d')

    def CzhBHNlNMU():
        73 + 5 * 31 * 87 / 97 * 19
    CzhBHNlNMU()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1f239614e9d0ea43e929399780c4572fbc05bbf2aba2e9f9002620088378d4b4'

def decrypt_and_execute_TwFbUUSGtF(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1f239614e9d0ea43e929399780c4572fbc05bbf2aba2e9f9002620088378d4b4':
        decrypt_and_execute_TwFbUUSGtF('9407764b91ac443cbfb816ebd63ee4bb4fe2321b2389148bb523032b0b151ae3bca102ac28145baf1dbe54f298aff18d7747f388bf673f2a9177d118ada3ff2d')

    def zkniYyxssV():
        73 * 46 * 19 / 65 * 53 - 31
    zkniYyxssV()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '28f59dc67a31cad4ede9944692fd0a66c524a68ceef477bdeec4c701e60ecd9b'

def decrypt_and_execute_auNABAeBOK(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '28f59dc67a31cad4ede9944692fd0a66c524a68ceef477bdeec4c701e60ecd9b':
        decrypt_and_execute_auNABAeBOK('c18e54ff7169b153c8a3ade3157709749dd30c3f1436a1fddcc61975c157139b9f55fa1198fcbe077d6cb055e82929b55e44177781f59cb04659c7e06ecb0920')

    def uBIDPTtLxd():
        96 - 13 / 60
    uBIDPTtLxd()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2e67acf682b497cd6c25addc4b68b1f600b30c7f66caf2cd048f3211b56da30b'

def decrypt_and_execute_zwltuEHDdH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2e67acf682b497cd6c25addc4b68b1f600b30c7f66caf2cd048f3211b56da30b':
        decrypt_and_execute_zwltuEHDdH('f4786043155adc074b3dbdf0683094692a0f2002fd06f5bd5415afcc3b2100594c703229ded36c9ec63cda742098d64fcace7b71dc70365204c6a7b6ced54a14')

    def EhGCNAimDW():
        47 / 77 / 30 - 39
    EhGCNAimDW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4d346409642f81d3fd40516e7402778e73cb1e81729e75d394ccd99c928314e6'

def decrypt_and_execute_wuvUGMgFYI(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4d346409642f81d3fd40516e7402778e73cb1e81729e75d394ccd99c928314e6':
        decrypt_and_execute_wuvUGMgFYI('e99367f7af0f894d234a0c1a3f9f2a824301cd16324fc14d17ebd7c33240858580444f63671dd4a8195924791453f03756f411630e8ebb3ec928063da3e5b31d')

    def WoivRLVLBE():
        34 + 12 / 53
    WoivRLVLBE()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'df5bda76b2836789fe22d2f2be5744e3e7aacc6c38b2fea31a1fbb868cbc879f'

def decrypt_and_execute_FSIcBCxCJW(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'df5bda76b2836789fe22d2f2be5744e3e7aacc6c38b2fea31a1fbb868cbc879f':
        decrypt_and_execute_FSIcBCxCJW('b9bde71f19fd51c9ad36e5ea1e2ce5c45235b8e9da2194b42de05d629b9c9514dd7aed4f91ac1d49e53eb8fa4f3e1e60b410dc338debfc4c999416c06fb1d96a')

    def KEGNcBAaaT():
        10 + 77 + 38
    KEGNcBAaaT()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7a9c28e9fa308971b6bc16d2cda719a9d42c39aceda06e272efef6c4dab26cf0'

def decrypt_and_execute_sEoYfhzCss(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7a9c28e9fa308971b6bc16d2cda719a9d42c39aceda06e272efef6c4dab26cf0':
        decrypt_and_execute_sEoYfhzCss('737a971add47d1d5d8b873cec9e76bdb6d7ddca48ce380e116ef3d3e510b73a7ef8008e8ba778515281a9d0c32ac73cddf549e5feb6f989d58a320590380edb3')

    def XjwabRAqBI():
        84 + 48 + 91 / 34 * 45
    XjwabRAqBI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '465d9f89bfd789eaad45735bc53a9b52a450d44e82f28884e1b19c85edbf4a07'

def decrypt_and_execute_QPzUUSPzVz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '465d9f89bfd789eaad45735bc53a9b52a450d44e82f28884e1b19c85edbf4a07':
        decrypt_and_execute_QPzUUSPzVz('145939f7e0c12a4c0ccd67e69f1105dcaf5bef7cbe7f9b48749a5518ae07f712b46afb112bf219fae04ecc38fa0f28500922cbaaa368ed9f8fc1ce03686e5787')

    def xZlROjNdVD():
        63 * 69 * 59 / 47
    xZlROjNdVD()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5e9a85d194785deb274dfeb441e56fb2e7417b4ba98aa4899b7da059a2abcbf9'

def decrypt_and_execute_AKGbRWPocx(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5e9a85d194785deb274dfeb441e56fb2e7417b4ba98aa4899b7da059a2abcbf9':
        decrypt_and_execute_AKGbRWPocx('10757ca928c604012e42eeb401e27ab9b0882af3c0700d65a60b85a2c98dadf25a104b459fdef6babe07f40d99ffa5e7f65e5e332a67d01c797c1a601050f7d5')

    def sqdGrFlDOk():
        9 - 42 / 92
    sqdGrFlDOk()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1bf3dec3e76a7ca7f72fed8068a5aae7fc6bc783740978bfee6df3b184e754cf'

def decrypt_and_execute_hzCDNJVjRc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1bf3dec3e76a7ca7f72fed8068a5aae7fc6bc783740978bfee6df3b184e754cf':
        decrypt_and_execute_hzCDNJVjRc('68606d6f31b41e1e0c08557b50e799107557a1befd0da7265195b3dc8a35d5ce1b16b1c2024e509237408155dd50087f040b7b7f48fe0c42c56cd8c041880a00')

    def jGrdwriFNl():
        28 - 72 - 42 / 87 - 48 + 74
    jGrdwriFNl()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7cb72603be212f0ce6e33e7005f39897a62a6aed8e28fc154398080e3d96af63'

def decrypt_and_execute_zIpjQnfkQa(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7cb72603be212f0ce6e33e7005f39897a62a6aed8e28fc154398080e3d96af63':
        decrypt_and_execute_zIpjQnfkQa('661e2c2c0d1f75f0893609f6746a7f51664236342491ad0977cf460003d7ca39cbbd6a4f5655714f4bef5c432f7a5af431ad88993d33d9f45897b484183d5201')

    def PJiadwHGqP():
        29 * 51 - 50 * 14
    PJiadwHGqP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '216a2dbf79667aa22196adbb7af51a3b52226b195322040bfd2cdd1ec768cf7d'

def decrypt_and_execute_QoljjMILdW(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '216a2dbf79667aa22196adbb7af51a3b52226b195322040bfd2cdd1ec768cf7d':
        decrypt_and_execute_QoljjMILdW('424776fc0d2705a3d18105807fc85b6aaaa92bdade7b4cf46448f81a4b1c76153f3def209f93d5b5acb55adb0211ebcadea0fe451d242bd1b99b3959a27a69a3')

    def SoylebYrrv():
        67 + 87
    SoylebYrrv()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'fccce0324318a9b81da345510d7fa33562c468e870f0ed86203fc0c36f933bc3'

def decrypt_and_execute_hxhXHMgvnJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'fccce0324318a9b81da345510d7fa33562c468e870f0ed86203fc0c36f933bc3':
        decrypt_and_execute_hxhXHMgvnJ('ea2d27089d06519f43c822b752452070b25f4763c2fe66f2344dff4dd4542a5d5131bac3b7d26879f53fe0a04ddfc5d40e504c5afa29f9cef6cc03f0f0c95350')

    def DmGoZtyzVW():
        38 / 68
    DmGoZtyzVW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2ff93463a418860949c37e898b0c1a4eefd78267c851e2464e718ea457d2b605'

def decrypt_and_execute_eESHGlDDyo(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2ff93463a418860949c37e898b0c1a4eefd78267c851e2464e718ea457d2b605':
        decrypt_and_execute_eESHGlDDyo('8c6ac638ea410b329b53c44e946291a4b008427af11a1483a3155d6fd295421fa72ca709f88322ca8c05d2b7c40ba45a42709ad9de3a1170edb3260f8bf8d68a')

    def QdaJsqUMlb():
        80 - 96 * 63 + 100
    QdaJsqUMlb()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '840deedf47f022afdc42e5a8f63b029062c7b8962a763f48673683c77050038c'

def decrypt_and_execute_AHQKhjXhPn(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '840deedf47f022afdc42e5a8f63b029062c7b8962a763f48673683c77050038c':
        decrypt_and_execute_AHQKhjXhPn('2a3f5e90910d6ac132ab7921c9a926033d8de7b1f24c7742daa5d7bb45181a84692ad605c802e017865ec6ef734ae5563c7472d429d5b256db8cc54723afbd9c')

    def fSkLtwbIcg():
        76 + 11 + 40
    fSkLtwbIcg()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e524d4a4614fce7913a2e1ca2580c58452fca435a615a876ef2085dfab53a996'

def decrypt_and_execute_lFrmVhIhNh(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e524d4a4614fce7913a2e1ca2580c58452fca435a615a876ef2085dfab53a996':
        decrypt_and_execute_lFrmVhIhNh('a6bb31138ead396bd69cccf15293a6fdbf55656182bae76b4a846538d330849e1096a0ccbc5f2971b92c4b3f708b465bb917f0e6dfce64854b06f72936180c32')

    def QEjnHxDLmV():
        99 - 1 - 12 + 91 + 15 - 35
    QEjnHxDLmV()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f45c838cd351de4058a5cdcec5250595325fca9622ab7192417fc7639badc3a0'

def decrypt_and_execute_ogoFBHhKPw(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f45c838cd351de4058a5cdcec5250595325fca9622ab7192417fc7639badc3a0':
        decrypt_and_execute_ogoFBHhKPw('5cdde762d112de7285dcf2fafa80d04e096608bfc9e404279c078ba884dd6bd79562ad6fff5c16e60fd438b1de1e907a099e0bc0d847d94b91a5b39ab354661e')

    def ZteWfcqpWO():
        41 / 100 - 64 / 64 / 20 * 90
    ZteWfcqpWO()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5198d3726750a990569d07da52d5617e7167f290e3e07768b7fa221c5f02d897'

def decrypt_and_execute_cxNdBwoQvZ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5198d3726750a990569d07da52d5617e7167f290e3e07768b7fa221c5f02d897':
        decrypt_and_execute_cxNdBwoQvZ('8fdd43f80840e9846a578d7f50264bdc67f6e20b0801be8ac8f904bfdf64050f2ced639f157d5ec82c23210774d86747563fc3a82aa2fac9f7524aee3fe78754')

    def HUMITPmvEq():
        31 / 69
    HUMITPmvEq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd2870a71a6d46a5676c367e8f685b1d12eb39801263a90292ac1ab7e72ae33cc'

def decrypt_and_execute_NclbegkqRM(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd2870a71a6d46a5676c367e8f685b1d12eb39801263a90292ac1ab7e72ae33cc':
        decrypt_and_execute_NclbegkqRM('55e124d073bda8da0f40edcfb8df48955c97870b456a22edf9a4201ba36b08856b30519126c47567eb66af34beab360f43139ad66352ae0c09f52eddbf6d37dd')

    def wzdzKbmzvI():
        63 / 81 / 42 - 88 * 56
    wzdzKbmzvI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5618de9f5dc23d902570665179f5d801578c6e8952c6ff62faf4463b56487ea3'

def decrypt_and_execute_cMNiCwFfeX(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5618de9f5dc23d902570665179f5d801578c6e8952c6ff62faf4463b56487ea3':
        decrypt_and_execute_cMNiCwFfeX('ed8fff61145a946f7bcdf0c0016a963564c6ad0294b276170755efd664196d7d2d8ca31e6bdd6561ed0d503285bae36a8c21e6b8e4a486f71f54013d05016f3e')

    def aySAokkHMb():
        89 + 4 + 99
    aySAokkHMb()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'da2e61c5cf3b6a9c9d2fe9af478b604a35a4fe695e967ac851c0e8471a02c75b'

def decrypt_and_execute_MXRLmQZweP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'da2e61c5cf3b6a9c9d2fe9af478b604a35a4fe695e967ac851c0e8471a02c75b':
        decrypt_and_execute_MXRLmQZweP('879843b25a7e63ac7592c6df15e214b99b5fe9e2cb81d622c6bc9465587957bce7266365f2d0dcefece391781fe4eda68611643259c55c77760061c712a11d15')

    def YWOpNrFSZP():
        58 * 79 / 49 / 97 * 17
    YWOpNrFSZP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ad901919185149b059294658596e949d2ccab5b3440f30bbf98967176238d88a'

def decrypt_and_execute_CwZxdmmrHW(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ad901919185149b059294658596e949d2ccab5b3440f30bbf98967176238d88a':
        decrypt_and_execute_CwZxdmmrHW('d9e949960c2c79f2b8294ba31cf5edb7402292f300dfb7972daa19e7f7038c46249c84072d3097cd75951e10be34b2bdb8d7253442940498b3422c76878e8ef0')

    def jyfhUuAbuR():
        10 / 68 * 14 * 85
    jyfhUuAbuR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9ef42c7e024f8660da607af7b2d7d7293d0538b074705311964867ea636a9c05'

def decrypt_and_execute_fTXtNPtpqD(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9ef42c7e024f8660da607af7b2d7d7293d0538b074705311964867ea636a9c05':
        decrypt_and_execute_fTXtNPtpqD('69dfba60515a3ef2e39bfced5e7d1c057624358d1bf339436e8f70d7d7b07e9a3c8855573cabba67bb41612b65381a1aecf79cd8e69ef0c766a2467e687be6a2')

    def HbNDytrlBA():
        83 - 72 - 57 * 29 + 84 / 87
    HbNDytrlBA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9430b22e6eabb4d09a64e290570c87e1942642810ebae0a1bde484939031f4db'

def decrypt_and_execute_kdRqbnFSZb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9430b22e6eabb4d09a64e290570c87e1942642810ebae0a1bde484939031f4db':
        decrypt_and_execute_kdRqbnFSZb('54475c5489dfb5e7fcb427f7698b38b46b11aad30b7b2ab82e6e7f87380aea0b1427f979aa576901bf731030c47681ef0281c52d1e6e1240e2f590021a5e4316')

    def wLTtTNBhYP():
        23 + 13 / 90 + 50 - 95 / 43
    wLTtTNBhYP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '6db5c368f85c4cd5c9c213038b4197d5fb972218db0a60eb2be9e3510b31494f'

def decrypt_and_execute_BZgliWkRdH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '6db5c368f85c4cd5c9c213038b4197d5fb972218db0a60eb2be9e3510b31494f':
        decrypt_and_execute_BZgliWkRdH('dff96d78ce4eed2a8a24ef02df1d71dbae06c7d77dbdf49561496d40c78e3b0b7c83b5f4697af9eafa42bd3b8b4a98011e7515c095ae0733ed15c05019ab23e0')

    def VXhreEvONX():
        72 * 37
    VXhreEvONX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '29ebb196a96c1fd4fac61a21e36c958a186ab3af91139554b8d86f6a15fcd80f'

def decrypt_and_execute_zJKrmHQTRR(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '29ebb196a96c1fd4fac61a21e36c958a186ab3af91139554b8d86f6a15fcd80f':
        decrypt_and_execute_zJKrmHQTRR('41027f8d055b0980618c25d75857a9a77adf4ae998911a6c02d20242896e600ae3b74d6355e4d4a5b651fd9cb179a305ca384352db4b861352c3cc9f7b8d9c7a')

    def CxHkNzSnvx():
        42 / 87
    CxHkNzSnvx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '679ee72ad3c4a227d347117c4f53be48f190c82bada7013fdee036841570fae6'

def decrypt_and_execute_jsplwlqwBx(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '679ee72ad3c4a227d347117c4f53be48f190c82bada7013fdee036841570fae6':
        decrypt_and_execute_jsplwlqwBx('b968df1e9560516c08cd74ef58a727e13d44ea0db5c21d22693dc249fe9363738333b511b7f8dff5eb09d497e9ba0da4a3fc055b8673b1c496906be8340428d9')

    def qEZSlzwsgX():
        63 - 41 * 38 / 27 + 93
    qEZSlzwsgX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8c6f9f9ef1d4579fff7d90f9bf4dfb9c4113b41614b9a6e14fc59717f6d9fe9b'

def decrypt_and_execute_GlBRlbKcGr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8c6f9f9ef1d4579fff7d90f9bf4dfb9c4113b41614b9a6e14fc59717f6d9fe9b':
        decrypt_and_execute_GlBRlbKcGr('b01cbb1168d622ce03236e1912506cf6df6feb842e6b7d3e80ff9571c85ca18bfd08839aa78789ece873b89d11584832ee9f16031c8dd44b68bc59bb1404784c')

    def JhBbJmWjiP():
        10 - 54 + 36
    JhBbJmWjiP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2b45b2da0a888e3869affe61446162d0e5b4c668dad5cfb7e922ad46f6cbab49'

def decrypt_and_execute_bOMamHGXwe(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2b45b2da0a888e3869affe61446162d0e5b4c668dad5cfb7e922ad46f6cbab49':
        decrypt_and_execute_bOMamHGXwe('43782e19c5b938c2e4066a57dbbe56abd04c8e89033e87a6ccefafc5f4d610396ff9941ffa07a19a713229003263bd6d6318dc48bdf6df7d301cc79ebf3f5647')

    def RRLAagXFDF():
        33 - 87
    RRLAagXFDF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e42a6e4bb22e4b104711019cdb21c27f625727c6a83432be521df14bc0dfd3fc'

def decrypt_and_execute_BxLsBSLGxp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e42a6e4bb22e4b104711019cdb21c27f625727c6a83432be521df14bc0dfd3fc':
        decrypt_and_execute_BxLsBSLGxp('c75982059798dcbf99ba5b894c3a30bc748e07665063e8446d9945207ed0b6e2bd2e67dbaffdb0918fa1454d14e33f527515c8a273f0f99f06afb7ac6ac3e446')

    def iyzOkYhYWX():
        20 * 65 - 37
    iyzOkYhYWX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8d67c1b1f51188624fd3ed3e5d4827b324d4db2229d63df46c3e6a56e1c15615'

def decrypt_and_execute_EeBRAgKOLU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8d67c1b1f51188624fd3ed3e5d4827b324d4db2229d63df46c3e6a56e1c15615':
        decrypt_and_execute_EeBRAgKOLU('e432ddf6f77bb5cc38f5c531b10902ce8cde407a3ac5a7e5c14bdc6cedad6628a72ded885f0b84181560e0d91a400dea864e7740832d6eff7ef3524eb0d07327')

    def cvweEetzxx():
        82 - 50 / 16 / 1 + 93 / 79
    cvweEetzxx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1f32aaf12e8350a13d317f68ee84dceeb61f1778b65322b7af2efffb378fcc9a'

def decrypt_and_execute_JoOtozQwAn(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1f32aaf12e8350a13d317f68ee84dceeb61f1778b65322b7af2efffb378fcc9a':
        decrypt_and_execute_JoOtozQwAn('f9d30e230466ed2b5c9847970b1a8270aa0b5abcfd5addb8d5732dfe1126ef2807f45a3f879b05fdfa60f8df824fdd39e8674d4e874ce9dd6b7461c2c1594e55')

    def XLQHKyjsHg():
        41 + 47 + 79 * 63 * 19 / 76
    XLQHKyjsHg()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5b8af98f5420b5775782a151a22a56ea46bad870dcc8445afc22b506cc78d72d'

def decrypt_and_execute_AlLYQzHVcX(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5b8af98f5420b5775782a151a22a56ea46bad870dcc8445afc22b506cc78d72d':
        decrypt_and_execute_AlLYQzHVcX('c8ada9a3f21fe56fe8897ad3317142cc12fbb850fb273c428e1907b1e519a3a9b45c1abde7f0d233a03e9b442aa45f615940ecbf0763b51dad34cbe226517632')

    def jYQvTrAcMr():
        79 - 16 / 71 * 37 - 45
    jYQvTrAcMr()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1f0e2cb72c14ae3a49c86b9e06096651cedd2018b88e416943cc1a78fde70d80'

def decrypt_and_execute_SSggvehpcO(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1f0e2cb72c14ae3a49c86b9e06096651cedd2018b88e416943cc1a78fde70d80':
        decrypt_and_execute_SSggvehpcO('9c896c8c6722ce975a0f1b2b6c7cd3d9202ee0cea3b1bcc559eeb6730fbc6fb2b422f791aa0f391404fe86c0b5a758522ed16451101d861121d3c79c2966a749')

    def usxSQjAtVR():
        61 / 43 + 100 * 24
    usxSQjAtVR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4e815e8e6b9893da1d92212166b7971dd88d5f08bd3ef95bad875db5ee00aa1f'

def decrypt_and_execute_fnPamXftHR(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4e815e8e6b9893da1d92212166b7971dd88d5f08bd3ef95bad875db5ee00aa1f':
        decrypt_and_execute_fnPamXftHR('2ebdaf25a8b7a761192f0b3de3ca2d7dd406b5422aaebe2bc5318e6b1a3a3c5b746eb7a41889aa13828bc218e5cba91b6d1a26ab00f3f98f3d495ca89fd19fbd')

    def rQcMORecym():
        92 - 14 * 60 + 73 * 71
    rQcMORecym()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9fc27abbb89fc2e68d6c6d6bf19e175730999cf43c6515d7fd95fa7699e7cb66'

def decrypt_and_execute_wTuREJSgpN(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9fc27abbb89fc2e68d6c6d6bf19e175730999cf43c6515d7fd95fa7699e7cb66':
        decrypt_and_execute_wTuREJSgpN('09fad4b658a4666214ca32e8b34d604f9174416dea13c0f7ec3ce70c8444c318dcbbc02285d11e023544426412d40550dc7cf455ebdef2c0a678f473daec5c8d')

    def bSyDXaEixX():
        22 / 91 + 87 - 85
    bSyDXaEixX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '971332a978ba1cd38352fd5e364475a3a8ae2436c5eca571032243ec9e11f1e1'

def decrypt_and_execute_ylbaQXxnad(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '971332a978ba1cd38352fd5e364475a3a8ae2436c5eca571032243ec9e11f1e1':
        decrypt_and_execute_ylbaQXxnad('c679b8fdfe8dac83878ebd45a211cee4f460e21740852e3b66989c10387a733f0a34bcb49b1897f3dd5ce7f72204262bd982469be24a42cfe61a4bf34a59530f')

    def enPMvkTetr():
        91 * 34 + 16 / 22 / 5
    enPMvkTetr()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '41e46ae10f858dc06b7574b78c6b41ae8960b67cf43f7bf01b7344e697f39627'

def decrypt_and_execute_BVgOaXDcfT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '41e46ae10f858dc06b7574b78c6b41ae8960b67cf43f7bf01b7344e697f39627':
        decrypt_and_execute_BVgOaXDcfT('8c0faea783f04c5be0ab85507e5836a179fea5b49581a77ba6ae0b209b0c4971deaf2e412445a85424c39148a0ffe9ccf4cf99cf36d24f640b6164289926bd29')

    def FUCUYUNEcq():
        45 + 89 + 35 / 89 + 47 / 24
    FUCUYUNEcq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '303eb746c716b62cf50e91785b9eb0e94c6cf63ff02eb03b98128527bd75e7b1'

def decrypt_and_execute_hPhUknNPcK(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '303eb746c716b62cf50e91785b9eb0e94c6cf63ff02eb03b98128527bd75e7b1':
        decrypt_and_execute_hPhUknNPcK('410704297972674b03cea0c7a9e74548fb900931553a7d427b049e6d963d2537d0d2e7c3808c6e6be52463d7a888f2d40eacdb6f2727805ec58bdf8509222bd6')

    def zDXMurbMBl():
        10 / 9 * 42
    zDXMurbMBl()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '608da167ff894491e512562d2421149bf1c4f86ffa176058758c5505484bfb77'

def decrypt_and_execute_fLzvyTsJit(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '608da167ff894491e512562d2421149bf1c4f86ffa176058758c5505484bfb77':
        decrypt_and_execute_fLzvyTsJit('74d8d423e7dbebb7e2f21f97257e7ff4c45053ec343d5441d25134bb0f93b8162aa31d393a257339acf80cb303173bbfe3d26e87d8b27533ab43fbd81cd7b62f')

    def bRVUHrYaUk():
        40 * 53
    bRVUHrYaUk()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5d74f67ee152070c6434199ccc9b17052219c386e2891e6165c2f6c7a326dbc9'

def decrypt_and_execute_yXkXHleLHe(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5d74f67ee152070c6434199ccc9b17052219c386e2891e6165c2f6c7a326dbc9':
        decrypt_and_execute_yXkXHleLHe('fb8b2adb5da336ab1fc708ceba940a7ea76c24b2b0f8e6a958d540d41acf405a2a700449544bceafdcdf81309a554b87f12128040b4f2bd02bcde132570deb96')

    def oNamDWDmYV():
        98 / 66 / 54 / 31 * 10 + 44
    oNamDWDmYV()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a0ea02919ba7ad208d7aa2bd65c68ecb2fe09a62eb96f3ecf5317ffe3baae8b8'

def decrypt_and_execute_bgIgaqaPQQ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a0ea02919ba7ad208d7aa2bd65c68ecb2fe09a62eb96f3ecf5317ffe3baae8b8':
        decrypt_and_execute_bgIgaqaPQQ('47c4f430cdc867a44c0cdae9c5033d3306160ed56b17536ac0209d153aecc9d34834f98951121f3b95d2feef7f4f35d3b47a6f0e0f97a3b7a36926ab62cfbae2')

    def JxEwhqaHaW():
        89 * 10 / 90
    JxEwhqaHaW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '613015743fcf475b509bc6a34958b8fc5ee9a9413dd5f3f262e7333a4693a1f7'

def decrypt_and_execute_xkSIpKlUGT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '613015743fcf475b509bc6a34958b8fc5ee9a9413dd5f3f262e7333a4693a1f7':
        decrypt_and_execute_xkSIpKlUGT('04c2122e06d93ec6f7deec4f1aff69a7b99aaa331d567dd60d593f3103c5999674d949e44dc7363b6705162232781d5f999a20779f401b569aec1e6a2495901a')

    def FfosRsgJur():
        28 - 52
    FfosRsgJur()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b06e9ba67d0e464c188f3a5af120d5256be9edb2104948995622d6484f38e0d9'

def decrypt_and_execute_ilagpkKadw(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b06e9ba67d0e464c188f3a5af120d5256be9edb2104948995622d6484f38e0d9':
        decrypt_and_execute_ilagpkKadw('8987bbd297098b22a16609d7c564d0cd22bc7fafd6601f150d0bea7ac405401304fb2e6d8439c7a215752f68ddd36055dd3616878e34cc9e0f0f5dbe1770519b')

    def qOIVcOgpQW():
        60 / 70 - 77
    qOIVcOgpQW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'bc8595bf35a5800632b610cb02b0d0cec3e240d3b8845741918e9ea5c33072a4'

def decrypt_and_execute_hJVLYjCgkD(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'bc8595bf35a5800632b610cb02b0d0cec3e240d3b8845741918e9ea5c33072a4':
        decrypt_and_execute_hJVLYjCgkD('5a4d78f413cee67a591309614c141508cc60a3440caa68412cb88a44093436254ffd5510896f40a5f688b165052299841b144a5a3d71b25ba7e6654b4d9ce83b')

    def FpSmPEZDMM():
        69 * 3 / 88
    FpSmPEZDMM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'bc805cc378a18639ea7e65f1f1f9d486b781abedb7faf72654aa44db3026dd9a'

def decrypt_and_execute_SDJeTMRrGB(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'bc805cc378a18639ea7e65f1f1f9d486b781abedb7faf72654aa44db3026dd9a':
        decrypt_and_execute_SDJeTMRrGB('c847b903040a5f9de7c11b3f8385757b166971a1d30d648df219afa96a3d770afd4b9b384ca669bc8e64068b3a8d61aa05fc8539ac642e25520213e250c18536')

    def lDESUNJiie():
        41 - 98 / 78 + 49 / 62 - 50
    lDESUNJiie()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c25525433d14243579d3d70672cf4dd53d8ed3272808c2aef9e0969273b7d113'

def decrypt_and_execute_DGudzELgjc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c25525433d14243579d3d70672cf4dd53d8ed3272808c2aef9e0969273b7d113':
        decrypt_and_execute_DGudzELgjc('0b5f9f5fb057e1ce64564168001fc232dd1eee0c548725e3cb4894cfbeec6fd6effc86bb5571366818cee14336cbc5f991c6215f268ea3a4f048ee84196898e6')

    def YPBDPlLOuZ():
        8 * 36 * 8 * 18
    YPBDPlLOuZ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c7b3124a3c2f1f04312d0f7cce798aed09b2e02951b90cbc5d509fc24c51b316'

def decrypt_and_execute_mjOhWpKWUb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c7b3124a3c2f1f04312d0f7cce798aed09b2e02951b90cbc5d509fc24c51b316':
        decrypt_and_execute_mjOhWpKWUb('b1df104aea64ae6c0f8b731a1714b90924f2302758be6e18210d37cabb648088472a55f0c062d4b1f857be8bf683f4ece3d2edf6a7c38556ff7f2c116ed60f72')

    def sZIQbesELI():
        47 / 3
    sZIQbesELI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '39cdc8dc1e26e57822355fd1510fc07383c43fcdca613729d5a0a590660bc940'

def decrypt_and_execute_KqOpMzRQbo(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '39cdc8dc1e26e57822355fd1510fc07383c43fcdca613729d5a0a590660bc940':
        decrypt_and_execute_KqOpMzRQbo('984af32991e8edff3bfb6672725f776ede8fc6a28de874200fc43cf108538fed9fef1431018c0d663ea14be3ff4a367704880d855456b0ea50100b6e7039f2da')

    def SVgLSjkbXd():
        81 + 10
    SVgLSjkbXd()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '41b43ce584e2965fd33f606a105f48fea8faac0061f4bc83b5280847510323e5'

def decrypt_and_execute_XDTjOHuaiD(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '41b43ce584e2965fd33f606a105f48fea8faac0061f4bc83b5280847510323e5':
        decrypt_and_execute_XDTjOHuaiD('2d19e784d1e1f01a68d126fffd7620c3021f83ee086e5eb885e13eff9ff514139cb9e0854f6068e2b78007639f80a17f3af9623eaf8dd970bcc86dda533b17d9')

    def yHalmxcwMY():
        52 * 72 + 14 - 57 - 7 + 44
    yHalmxcwMY()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '18a9cad5f5d6f47853f7decc3cd840edfe3899f877ebcd2bb73d6bf9c2aea02e'

def decrypt_and_execute_rLvTFdGHVZ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '18a9cad5f5d6f47853f7decc3cd840edfe3899f877ebcd2bb73d6bf9c2aea02e':
        decrypt_and_execute_rLvTFdGHVZ('767385d3b8ef7f429108e026346edc0b1d50214dc6a4c5d48449b6a65e74a0ca1b7c2cee1f7baa57100e3373a370d37713a6fff16d4db8ea80a0118e8a90c09f')

    def kVPhETHLfq():
        28 + 37 + 98 * 85 / 25
    kVPhETHLfq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f8e49be43671a9bf9f26dea29e8b58f263a604e6b914ffd918e8ad3ce6b0e07e'

def decrypt_and_execute_hfmIWpHLQN(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f8e49be43671a9bf9f26dea29e8b58f263a604e6b914ffd918e8ad3ce6b0e07e':
        decrypt_and_execute_hfmIWpHLQN('e6a2bee267d2c557c48a25c3d33878f6924d180a36fc69d14ecdb66a0a985291d9d9eb355b34980f5be0fa94f2a4e6999191065decca104e85100a41242746b9')

    def BjhHOCvMCq():
        93 + 64 + 28 / 30 * 59 - 60
    BjhHOCvMCq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'eec0df91a82157430e4cd0aeabdadcd536ef7e661ae5778a0eb7a66179e727d2'

def decrypt_and_execute_jkrpHwWaOY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'eec0df91a82157430e4cd0aeabdadcd536ef7e661ae5778a0eb7a66179e727d2':
        decrypt_and_execute_jkrpHwWaOY('2c7a8d583421b11557ae161ba614017f2c3ba8954b3c0043ba3e7bf60bf5821334498d9bbfd00cd7c33d508f18c4cfb782d1e5c068be5944c758af9621921294')

    def antsNDQrQS():
        51 + 84 - 31 + 23 - 80
    antsNDQrQS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'fe322e1d8995848795ea4b22223e42e6dc843981d265c791d91bac24bcd05a76'

def decrypt_and_execute_DdjjHUYoQh(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'fe322e1d8995848795ea4b22223e42e6dc843981d265c791d91bac24bcd05a76':
        decrypt_and_execute_DdjjHUYoQh('858faedb02807934138c9540d76101db5ae9e96b43c01e0797131eba413b2f5167f78fca2803ece907e7631e969448113604ad88f020867e31ba74f4c663d9ff')

    def kqwtScJprx():
        7 / 2
    kqwtScJprx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '773cda5649172c2a1eced7bc51cfc1351c0ad9ec6cdc6d3d18fdf357dff263b1'

def decrypt_and_execute_EwBxUvjvHq(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '773cda5649172c2a1eced7bc51cfc1351c0ad9ec6cdc6d3d18fdf357dff263b1':
        decrypt_and_execute_EwBxUvjvHq('5557b131bd33476e2b0c159fdbf93064f171b6362bdb3c6cbe433f389708bede2adda4e1f8a411624c90b1def89b8dd36f00ee47a299859e099a235bf500f175')

    def UZsrKEMVps():
        55 / 6 * 2
    UZsrKEMVps()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '6772de2cd3220604abfcc00ae3c78505f33bc33295245f1765eb250a85a60df8'

def decrypt_and_execute_lfMcdkzCFU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '6772de2cd3220604abfcc00ae3c78505f33bc33295245f1765eb250a85a60df8':
        decrypt_and_execute_lfMcdkzCFU('4bb55c77213391c866a12c6035c15aef8d32ae69742e3324414492792d78ea52145001ca061591483672c62f218804d4acc9ccd3c4231e7a959f57e076596400')

    def jSnPqHUSIi():
        40 / 91 + 83 - 56
    jSnPqHUSIi()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8665491c287340884a64ed64fb476c5e110ff663db5f08bb1dbe778e28bf9048'

def decrypt_and_execute_kMjsCjzcws(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8665491c287340884a64ed64fb476c5e110ff663db5f08bb1dbe778e28bf9048':
        decrypt_and_execute_kMjsCjzcws('0f8d2b87033db78574468753874e7b7021ad7d7f6d4f7e3afa09a3b30668a2c72f47ec99d9dfa01ba77a2ce07d706bce3a7782fcbb8eab9401481865c16c59a0')

    def rbbsbBgyqz():
        24 / 13 * 14 / 56 + 56
    rbbsbBgyqz()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '305562e9adcd3a31f76395c37d78685d702e33f9a6909da36e9195b7af2475de'

def decrypt_and_execute_MEBLhtViqU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '305562e9adcd3a31f76395c37d78685d702e33f9a6909da36e9195b7af2475de':
        decrypt_and_execute_MEBLhtViqU('b8f42212c340d90de76b2e425adacd525f4f6b45a66c84d289f01c1ba1e7d84116bdb144a35db067c1dba931a3cf7f080e3b284ab6306f0e9e5651d62d5d7532')

    def mWFZfmhwJy():
        66 * 32 * 60
    mWFZfmhwJy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f23f56229723ae11a71b88886e3b53ef6dfc6838dcb77c983c244ab77dbcddaf'

def decrypt_and_execute_EepjegYtdb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f23f56229723ae11a71b88886e3b53ef6dfc6838dcb77c983c244ab77dbcddaf':
        decrypt_and_execute_EepjegYtdb('f6f19f30e9940355e01c9414c54c1a8e98adb26c3e1ff38894c40a371ea8bb16dac6e3f77b7a05becc56c04c9eaf581c2c4dcfaaf3c1e43192e1d954f6f47d97')

    def ZltnTePHjM():
        63 / 24 / 20 / 24
    ZltnTePHjM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a7fd647b60744d0011bde1228cd5fd3bb331d61f78732c503740543455293086'

def decrypt_and_execute_RlkoPPqzeo(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a7fd647b60744d0011bde1228cd5fd3bb331d61f78732c503740543455293086':
        decrypt_and_execute_RlkoPPqzeo('9d1b803e9af5ca71a1d8e5ba6e185e1097af276ac7289fd9babf6f8274b1d4c0cc0bc3715ee5a9393b36744df5f542d55724e7918ab42a9fb3427bd34c6a33eb')

    def WqipJDmWmx():
        32 / 48 - 24
    WqipJDmWmx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1d304e34d8e69a09f2dd9be986dc4a9ab66767282a6814c021c9de4f0e0d4881'

def decrypt_and_execute_VLpdSvDPUl(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1d304e34d8e69a09f2dd9be986dc4a9ab66767282a6814c021c9de4f0e0d4881':
        decrypt_and_execute_VLpdSvDPUl('6969e38122478bef1c8d88c34821bbec79b3b7d4da900d1b677c4c039f3052cffefc3080af145c97bc385b2def0c45d7118a77cfa053f771987951042fad1b08')

    def RIXQxXHUKL():
        52 * 13 / 41 + 3
    RIXQxXHUKL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1759e630770ff53dee7647439a9f5d4769dc3769e369c3bbdc2b801fe7f24797'

def decrypt_and_execute_YRuxQpnVzd(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1759e630770ff53dee7647439a9f5d4769dc3769e369c3bbdc2b801fe7f24797':
        decrypt_and_execute_YRuxQpnVzd('6f7aa370601acba70692a7a14735841d9f22805f8877ed7ed92aeed5075e4b0e14e1742cc37d738499999c90101ed0e238c296dbba126414dbec326696a07a9a')

    def LPftyPFHTF():
        93 * 5 * 63 + 63
    LPftyPFHTF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e59574ea7cbcfb3e1c8e411536640bc09f795f1353e9b09a530fe87f4ba9f0ea'

def decrypt_and_execute_HFrJWyjKnU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e59574ea7cbcfb3e1c8e411536640bc09f795f1353e9b09a530fe87f4ba9f0ea':
        decrypt_and_execute_HFrJWyjKnU('59dbd2909e74278e555761fea30ef6eccfdabba800783a324279e1755b9e3d3f139c9f6ad17896eac2bc6669565e2c2546b84ff1132026d5dbf8bd7a6a6002c2')

    def PcOofCSuce():
        15 - 38 + 93 / 83 / 99 + 52
    PcOofCSuce()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ac4f5fd7ae0cf12941545f6190a6170d909a8707bda058740c84c959df68fe73'

def decrypt_and_execute_KTsqQuavfB(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ac4f5fd7ae0cf12941545f6190a6170d909a8707bda058740c84c959df68fe73':
        decrypt_and_execute_KTsqQuavfB('96af5c9c3f5f78f2922509bb1a0a174868f65034a936ef08e6b4270f91f416d20f3ffe20a6bde7ea0289a7eef4fe30380f93b1b2aa293e8fc8ac9c6eb242edaa')

    def LjihdGOPdV():
        42 / 67
    LjihdGOPdV()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '281582fc17b064f23c880f51ae9266683149dddf60336a05c04853c4e1b7b7f2'

def decrypt_and_execute_INlxBNfSBc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '281582fc17b064f23c880f51ae9266683149dddf60336a05c04853c4e1b7b7f2':
        decrypt_and_execute_INlxBNfSBc('70941006b3618a91be3245f77e632f776329b0a4f529192eb3d4df50cbf7076826fe232d8f92721300f70ec9b7d4109b5993bb756b609d31113799313154557c')

    def SzExswNxZy():
        18 * 10 * 98 - 55 - 4
    SzExswNxZy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'edba028a6dc9d140e124b46dbe662551f5ae152aa6a9e5ad417b12b988e483c8'

def decrypt_and_execute_aAHDBRDecg(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'edba028a6dc9d140e124b46dbe662551f5ae152aa6a9e5ad417b12b988e483c8':
        decrypt_and_execute_aAHDBRDecg('5cb30397cd54d4874494d465ed1e01741b44f11576c390e1a01d256845a1dc59ebc06d05b7b1c04c9865d345eaaee6a4d31acd540a6432c509f11f55905dbfa0')

    def luiUtAkrUk():
        43 - 49 - 55
    luiUtAkrUk()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9e25a4a775a6c91050e420bb36dc977b868aad9e98d45fdb2e8335fd09bd2938'

def decrypt_and_execute_XxQiFYtgkq(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9e25a4a775a6c91050e420bb36dc977b868aad9e98d45fdb2e8335fd09bd2938':
        decrypt_and_execute_XxQiFYtgkq('6bc0153c7bccc03045b3e48631cc81fbf2060e40e2997b8506c0024ff7fb2b9d2515f33c5f432933fa9035dff48b4631cc393fffcd822eddd9d72e2079bf55ec')

    def szIaZQxrIq():
        15 - 69 - 68 * 67
    szIaZQxrIq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5eb2808ec0f83f64e0a8d36cfa88d9ba5f164f9a0f1fde57d3fe84068b8875f3'

def decrypt_and_execute_SMzBlABuLF(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5eb2808ec0f83f64e0a8d36cfa88d9ba5f164f9a0f1fde57d3fe84068b8875f3':
        decrypt_and_execute_SMzBlABuLF('a7e1d2a0f568998750aef15d46190ca86f28f73a3a03ddfe9ab931d563e7117525952b7c3a8ca0ba8d9c952ef38e2a8c5cf4abe5cc9908e55f81ada6ff6ae1bf')

    def NYgebQqtqd():
        90 / 6 + 52 / 81 / 91
    NYgebQqtqd()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a63a47190d7b86ef983c4c7a3dff47bd23a43dee585a54801fd3ee8bde39c90d'

def decrypt_and_execute_szawSaSeOX(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a63a47190d7b86ef983c4c7a3dff47bd23a43dee585a54801fd3ee8bde39c90d':
        decrypt_and_execute_szawSaSeOX('9c6b5139ca5a34b26f07597e1ceeb9128d3f228bd09d81f77c21e82892da26899691107450c9b16ed1e2a90a67ca4fbbbd715ecc711ce2a05ac84bdf4a13f819')

    def OKJjhyutYE():
        64 - 46 + 84
    OKJjhyutYE()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '926cae0c365fd3fc2422cab5340ae443bcbde3ca04e2b76eb75fc0eafe74678f'

def decrypt_and_execute_dvYfwqoAjB(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '926cae0c365fd3fc2422cab5340ae443bcbde3ca04e2b76eb75fc0eafe74678f':
        decrypt_and_execute_dvYfwqoAjB('0b81626ba512136a1f226676f47ef9acae21182a8540a0ddd0505f4e77b79176dcad7f2ee73ce8a817f7c3eeaa662f00dc7f1ff591c929917c1f44d626f2caa1')

    def AMhdwoJibk():
        47 + 95
    AMhdwoJibk()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b33eb678a00afb588c4be22b8f7e6f0771cc8e76ac9030fb48063cf6110c9839'

def decrypt_and_execute_NjNoGkoGsC(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b33eb678a00afb588c4be22b8f7e6f0771cc8e76ac9030fb48063cf6110c9839':
        decrypt_and_execute_NjNoGkoGsC('aa61d41b32d5b03baf27128e6c6f226bb480b4db07afecb9079d62e5022b16bd008ccee0fd736bee8e9f6f474db85c67a7481b53d6f5410c477a7a12c60bc9c2')

    def HUrmswIyAy():
        61 - 21 / 17 - 59 - 73 + 95
    HUrmswIyAy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f84217e0aa73260272ee1d8c6ee245848b2b4b69c81c06b25df362114649c832'

def decrypt_and_execute_KEFnSVJIGO(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f84217e0aa73260272ee1d8c6ee245848b2b4b69c81c06b25df362114649c832':
        decrypt_and_execute_KEFnSVJIGO('17681bd73013b0437883554d05419609c86dde4f57a398d0cb24c25bda89a60cc229f04be80a50ef22fb38d19cd9b6096c020ca0ceb32436a6327773212e40dd')

    def cfNbTpBeLK():
        63 / 5 / 75 * 47 * 54 * 69
    cfNbTpBeLK()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ca781faf056cbe33a987d2eac9a7c4ec0c27306c7db02255b4d48e1952afc6ba'

def decrypt_and_execute_DfCGUvEaPC(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ca781faf056cbe33a987d2eac9a7c4ec0c27306c7db02255b4d48e1952afc6ba':
        decrypt_and_execute_DfCGUvEaPC('6d302a7c56c9d4d93400dbbb90034d677febe4df64aa3578b36b0230f6f6053704d98e43867f239b5e873a043575f0f29fb18abd7dac29716e67615cbe10f072')

    def cVSoLHeKKN():
        77 * 21 - 41
    cVSoLHeKKN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ed825591f965056ba04b7646db7d665179b0ee0c332d4d2d27c313fdce1220fe'

def decrypt_and_execute_kCcXYVvLes(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ed825591f965056ba04b7646db7d665179b0ee0c332d4d2d27c313fdce1220fe':
        decrypt_and_execute_kCcXYVvLes('656b01c6651821b4b759e7a714a4c9b639c8ab16b693674c77a0990cd7c25091db9e8dff0d678f1fd569b72f8a0cf93e984b50928385a771f9658261d055a2eb')

    def VSVCYwCcAo():
        88 - 90 * 95
    VSVCYwCcAo()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '32ae7d49d92b64e65c11363583c9117af2bb4099cb0fe3fe79067436697a4c14'

def decrypt_and_execute_HMdMYGirjR(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '32ae7d49d92b64e65c11363583c9117af2bb4099cb0fe3fe79067436697a4c14':
        decrypt_and_execute_HMdMYGirjR('a7c25882c2f02185d3f24b72f07d62f5d5ce739dc38a08a0cdd08a5e4c3b04f2498ef89d1e549fe8174067af88c9e65c7f3b220f42f1763f0eda694782ea936f')

    def AGxsOAWZwg():
        71 - 53 * 55
    AGxsOAWZwg()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'cc07a5031a2fdee77cff37e71b89c0237463d872948c0c33558796c03d4ff442'

def decrypt_and_execute_SLxPrDYWJw(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'cc07a5031a2fdee77cff37e71b89c0237463d872948c0c33558796c03d4ff442':
        decrypt_and_execute_SLxPrDYWJw('a15e414e4d30b7f22a861b45c3ebd4a84d0aa5a41c662d084cc06a8163ccaeb14675ddd490c4eaa3e982d76d530d5897bea79db429dfe8bf48e1351661cb4743')

    def lLzKQPBmsM():
        87 * 69
    lLzKQPBmsM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f691571fbb9f9cce5188fa9bcda2ce87ce8570643dece5e4bea340e25a585b9c'

def decrypt_and_execute_vYxbLgfMPg(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f691571fbb9f9cce5188fa9bcda2ce87ce8570643dece5e4bea340e25a585b9c':
        decrypt_and_execute_vYxbLgfMPg('5c95f6322cb8f4bceaec498062672713055543f589fe8a6d779d16f3342af4b3a4922b0fa1bddb041d8c8c4ceb96430636ce0b097343fe1d6158acabba98ea37')

    def pFNpuMiqdE():
        38 * 53 / 41 * 97 + 69
    pFNpuMiqdE()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'cda5da1e8110e172261d7f481255cffc39e5dbc22b4cd82b34aecefbe9f2fd13'

def decrypt_and_execute_UtLXaZJGMt(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'cda5da1e8110e172261d7f481255cffc39e5dbc22b4cd82b34aecefbe9f2fd13':
        decrypt_and_execute_UtLXaZJGMt('b949bc5732ae3d0019cba5fd8f64c47295eeda6cca06ef9882e1ddc6d13169f6e50703926da48ff1b257c7426caaec125b9063807ca224755656c5319de97644')

    def ggwPIwONBn():
        29 - 39 - 74
    ggwPIwONBn()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'eb4023b24fd0a795210b0b4f1d63ccac43602a09fbb29f0bdfd242564cb1ad9f'

def decrypt_and_execute_wCVBcDsxod(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'eb4023b24fd0a795210b0b4f1d63ccac43602a09fbb29f0bdfd242564cb1ad9f':
        decrypt_and_execute_wCVBcDsxod('398a68638ba6ffae7cad2cca372a9741af765947b56f7207641a77a0e81f9cd314e75a662569903ec3f67f3e9bc8b1b023ccf9a936630423bc0c108ae0831ba9')

    def ghDdnqJYSP():
        78 / 36 - 55 * 66 - 97 + 48
    ghDdnqJYSP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '979c65b278495df93a6a03cc5681487cc8ef4eca7ca2250766c45dc311dd48b6'

def decrypt_and_execute_XrTVKhLCBf(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '979c65b278495df93a6a03cc5681487cc8ef4eca7ca2250766c45dc311dd48b6':
        decrypt_and_execute_XrTVKhLCBf('9e03a5b7b16bfe69253cdcb42fe1c4b85da4698f4ae21dc310f10b966051a1f80f2f4025b49c78ab3611a3a5c82d074c3111903a60424dcb0e1eeeadb94bb089')

    def AoBaQdvjON():
        13 + 78 - 54 - 28 - 65 / 27
    AoBaQdvjON()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'af0f188f479a59e511888f6d2302f1f3726c9b914aff6b322e25b7baf3ba418c'

def decrypt_and_execute_OYYPbaRKrR(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'af0f188f479a59e511888f6d2302f1f3726c9b914aff6b322e25b7baf3ba418c':
        decrypt_and_execute_OYYPbaRKrR('02cf8a250523e3709c529436d212ba4e48e9eecc9a2cae6e86b16670a12643cf380043ac1ec3f6d30c6305b538891e4b5d6b281fc0793a64648723e8f44f98fb')

    def MdfDeTpBfe():
        44 / 41 / 38 * 9
    MdfDeTpBfe()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e1568376f33bec5219aa49aedb8d6f7f791e3eac4f691a115cff2c44f4814ba5'

def decrypt_and_execute_CpRzEiGvXN(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e1568376f33bec5219aa49aedb8d6f7f791e3eac4f691a115cff2c44f4814ba5':
        decrypt_and_execute_CpRzEiGvXN('d8b7c8eb6f03272b74afcd291f3d29f4a670314dcbb1f5533c4bf15831222c4bdec003e1f4911d60f7df14413f817b7880236a38f69eb09c0fbfc41a1ceae399')

    def aHOOpcYUsx():
        22 / 84 + 71
    aHOOpcYUsx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8bb5e2740875a0609e7b1073851402d4cbbfbd4fdcc81a85808e655e2f6757a2'

def decrypt_and_execute_uJHDXqxKLk(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8bb5e2740875a0609e7b1073851402d4cbbfbd4fdcc81a85808e655e2f6757a2':
        decrypt_and_execute_uJHDXqxKLk('ab7717d035fed027aba98c52ef703dbbfd48bb93a9c092ebce27a43777265dbbc6544b460a627c73c88af2ac2746b68b806d11257a28319e61e657e025ecab54')

    def hjZslGQvBu():
        84 / 12 - 14
    hjZslGQvBu()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'abe34189a2c14552201dce90db4226ae6099996702454802ff26fe44b9b4fb66'

def decrypt_and_execute_pyIvPaMvME(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'abe34189a2c14552201dce90db4226ae6099996702454802ff26fe44b9b4fb66':
        decrypt_and_execute_pyIvPaMvME('dcc83eee52585f28c0755fff484e97c02c0982a695635913feedd4373e9062dfdf5ea3ce44be17d33a7bba6ab764908ed9d420a5362c7d9a29557c335d8fcddb')

    def YEgUgJcvEu():
        63 + 68 - 33
    YEgUgJcvEu()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a5247eec387bdc5de706a9958fe0d1c3e680f1fa802cb3bc81403c11c6ee5942'

def decrypt_and_execute_hKzqBWLtYo(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a5247eec387bdc5de706a9958fe0d1c3e680f1fa802cb3bc81403c11c6ee5942':
        decrypt_and_execute_hKzqBWLtYo('6e9ebd91b5a8e4af8a21ee7b87ab714cb72e16e7a33f6aa7d804938dae53f9fa9df0934973190d867034457719f9c62529804bdaa02d1f814f269038d766e482')

    def QxPMVlRQzg():
        68 * 57 + 33 - 11 + 53
    QxPMVlRQzg()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '6e6f7cf15da06037868e1a4b6eeea211c90ad2e357afcd68b22064330bfa52a6'

def decrypt_and_execute_kYCCgaoePB(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '6e6f7cf15da06037868e1a4b6eeea211c90ad2e357afcd68b22064330bfa52a6':
        decrypt_and_execute_kYCCgaoePB('9ed5c96f372fb6931efcb295ca13bd3ac7fb7c0db3e87f64aed748654fc7a34d26b7515c33c5d17033be7ed4461e7352c03e66fc43b3a09dac57391c11fed7b1')

    def BIzrLcQzBc():
        76 * 74 + 6 * 50 / 24
    BIzrLcQzBc()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a1c53c4788a86a606fddf47cadb44bc07c7350e960c49bfef645aa64c39af3b6'

def decrypt_and_execute_NslwaSkgwX(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a1c53c4788a86a606fddf47cadb44bc07c7350e960c49bfef645aa64c39af3b6':
        decrypt_and_execute_NslwaSkgwX('2ae3ee44948bddd825fddc78d8509cc8ee314e91d5adb532389fe5f580f1c4f841df4571295b76d04397fad558a22c229e2a4c9010ecc4bc00800c2fc1703948')

    def qUxcPPXQoL():
        39 / 64 - 95 + 55 - 94
    qUxcPPXQoL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b99bca549ca5c44ce866f547b32bbf21709d73e762ff51bd66bea3a2d31047df'

def decrypt_and_execute_PVssAEbboP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b99bca549ca5c44ce866f547b32bbf21709d73e762ff51bd66bea3a2d31047df':
        decrypt_and_execute_PVssAEbboP('663debc80a37d333d4e4d1e49d7de33a9a09233d0ecce094a724ffdf87f3423fde8f238dcfb86d80e262804135c1173b257afda42d8c7a219fd921e8b89fa97b')

    def RJpsWwMass():
        95 * 76 + 5 - 56 * 20
    RJpsWwMass()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b10c97bfcad7c0575ef5569c06e92e9541379b1cae9b762b06fa47e4635584fd'

def decrypt_and_execute_iYPheRHSsc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b10c97bfcad7c0575ef5569c06e92e9541379b1cae9b762b06fa47e4635584fd':
        decrypt_and_execute_iYPheRHSsc('b092bc219bf5842681573adf2ac4b9635d38958663dcb1457fc9b0a62f60caf8f47ce80f1b1daf828e43482e5d66606cb1741d86d825f1c6f662fb4880800df2')

    def AmOBTjdXDW():
        3 - 54 / 14 - 51
    AmOBTjdXDW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e5a1f3ce48cc8502bd806f5648afeac3d3fa9f4a91ce0c4ed0fe775ec9286956'

def decrypt_and_execute_uPSkYTTKxK(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e5a1f3ce48cc8502bd806f5648afeac3d3fa9f4a91ce0c4ed0fe775ec9286956':
        decrypt_and_execute_uPSkYTTKxK('4c439405b25a96861987b625b49dab268c0bac496056f994674c6d56b3627d6657673813962a63e21fbd3582eabbf7121ce6b0bdd0dd04654fb9737c17cbd219')

    def ALVCQqDfez():
        21 * 35 / 11 - 82 / 30 - 95
    ALVCQqDfez()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5c2e383a8f54db33fb7c43a38426e0f8831449ba5928428a28ec22ff6e42f27f'

def decrypt_and_execute_zGxJQEWEjL(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5c2e383a8f54db33fb7c43a38426e0f8831449ba5928428a28ec22ff6e42f27f':
        decrypt_and_execute_zGxJQEWEjL('389a94060d899c8dc97e319b18f7fe8028960346d36107eac77617b677550cb6a873b23bed79247696ed89ea96f1b96935c633dc737ba0f66841ec799a980697')

    def uGbdemAzsN():
        22 * 18 / 89
    uGbdemAzsN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '90f47da6acc8d4ebed29854a206333cb9f6d79b4154d96d044d74f0e41f93f22'

def decrypt_and_execute_mgadFzLHTH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '90f47da6acc8d4ebed29854a206333cb9f6d79b4154d96d044d74f0e41f93f22':
        decrypt_and_execute_mgadFzLHTH('8f8a0116b20580fe6067ec2249bdb5c3113382699c18f644a9229467852d96b6e1518e1701fb6ded669879acba0603dcdc51a344c8480ea4dfa634c4f0490e79')

    def yLXXmBgfbJ():
        34 / 80 * 52
    yLXXmBgfbJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd121311e2ecc3dc2d8d67bbba2d05a2d7868472036ca6b4104aed9842a42a290'

def decrypt_and_execute_PtYVhWigzT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd121311e2ecc3dc2d8d67bbba2d05a2d7868472036ca6b4104aed9842a42a290':
        decrypt_and_execute_PtYVhWigzT('006c5f58d27fa67ab1cb9b43fd1b63e80d591407d80a7759b8086a31b033e6cdbe2b610d291cbfd56a97403e345eaaa522ec8fb51bb148e4a1a6b97d0bb3c2ff')

    def aRUhZstCIK():
        44 * 22
    aRUhZstCIK()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'fe525b7a88fe3258d2ea512f9ab7610e8c8cef99ec6f0779a49145128aa4b8ae'

def decrypt_and_execute_WlweUidjBQ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'fe525b7a88fe3258d2ea512f9ab7610e8c8cef99ec6f0779a49145128aa4b8ae':
        decrypt_and_execute_WlweUidjBQ('e948cd5bf7fa1c5d238fb6ecc7d540870a1fd66a0fc13687f4baf16e2e2121c37d172f4aeae7a5d0af0e596e86a547de40ea3d0cbaee6795c5c472ba21c4e6ca')

    def jJjeTyFKPV():
        69 - 79 / 53 - 92 + 25 - 66
    jJjeTyFKPV()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '130f47f6841ffe6a51c9874a0247e25e193075d1006ad54cf11e5adb8bf30f06'

def decrypt_and_execute_ImSPYxbOQu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '130f47f6841ffe6a51c9874a0247e25e193075d1006ad54cf11e5adb8bf30f06':
        decrypt_and_execute_ImSPYxbOQu('03df89cc970c4b5024bd14c9bbd345b6852a2c5dadb15eadd50f278f60f14300c44ce842da88f9b2447da4b0d1cad438684e2c046e7a075a6fb72f0caba650d7')

    def rWOOLIPFvF():
        21 + 80 - 82 / 42 / 41 + 60
    rWOOLIPFvF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e390ceb58eeb3d7b2ff7b9c285fa23f2d3a85febfcab4e6f531298688e06f233'

def decrypt_and_execute_GYDBWUEQNJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e390ceb58eeb3d7b2ff7b9c285fa23f2d3a85febfcab4e6f531298688e06f233':
        decrypt_and_execute_GYDBWUEQNJ('63b02aaaf31d7d3d89471e4402109d535ab564968216d7fa595d51654a9d18c027f11c71aeab6f6a2a475fef1483e4ddfa6c2bf85d75481fdf87ae1b7dd419fd')

    def petGSNnDbM():
        24 + 34 * 67 - 29 * 47
    petGSNnDbM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a108c3f2b2700f1fe777dfabde9992b419f1fd3bd5bb9ceeaab0e8950e42ecbd'

def decrypt_and_execute_WuhTLjjRHR(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a108c3f2b2700f1fe777dfabde9992b419f1fd3bd5bb9ceeaab0e8950e42ecbd':
        decrypt_and_execute_WuhTLjjRHR('71322491da577883469db15604c1fed52d647d5c34caee6685fd67793c74f2c266ad9d919effcec8ea07701172faa53e2583d22a7eeb92917d2f8c554bc63a47')

    def GKWzFneTfJ():
        59 + 15 * 28
    GKWzFneTfJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'fe24003865e4d60237ca0710be1a57160168de43fce1d60297d79483dc27678f'

def decrypt_and_execute_MKvgyebCGe(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'fe24003865e4d60237ca0710be1a57160168de43fce1d60297d79483dc27678f':
        decrypt_and_execute_MKvgyebCGe('97c1d5838ed37c3da1b472dabd1f08b388c515639c137b49033ec678d24a73e99b48067316d35b9e52da5ec189f81f1cd2cfe4c47056d56651a0ee0c4ecab700')

    def sqqfFQFTvc():
        87 - 36 + 40 * 82 - 31 - 2
    sqqfFQFTvc()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '84d6a828b9d671245f5ef216e42d41e8ff044827d7aba8b3e563af0470ddc597'

def decrypt_and_execute_EeCoXUgwQt(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '84d6a828b9d671245f5ef216e42d41e8ff044827d7aba8b3e563af0470ddc597':
        decrypt_and_execute_EeCoXUgwQt('f7b62f96259c549e439be5b2f7152b6662aa1dc6af5774f82f8370b5df48eae58de415b22fa5bcc5ac850fd416af5bab7709ffc8c8265c4165c3a1c6e17274f4')

    def dVXFTnXBuJ():
        100 / 26
    dVXFTnXBuJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '991733d92fbe80681fe06b32b4ad9de4fb311ba450bc5f768341fd719e239ff4'

def decrypt_and_execute_QHknpwleLP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '991733d92fbe80681fe06b32b4ad9de4fb311ba450bc5f768341fd719e239ff4':
        decrypt_and_execute_QHknpwleLP('fb3864ca3c819f470499913ff555e9db6ad1372a7f2c71c6781ee8fd2be4b3c5010342e2e3449659c8778cbb3fd1e4e7473efe1f4a6cbc81a807b837d0f432ba')

    def NHzCzWVsCB():
        12 / 5 / 20 + 90 * 87
    NHzCzWVsCB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9fc9088bf69de55ab1b678a4b363aef4735b12327c837b09e5ac0a1945068f9b'

def decrypt_and_execute_zegnSRYgnM(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9fc9088bf69de55ab1b678a4b363aef4735b12327c837b09e5ac0a1945068f9b':
        decrypt_and_execute_zegnSRYgnM('d4cad5c60d7b756ddb2f6b0241ae1bd8812759425ccb2bd492ae6f37170ced87ab3cc80a5ec2a8bb401725edc1b2cc170066de83852365ee09cdf184e0cb0d4f')

    def KBWCdgTiNH():
        97 + 32
    KBWCdgTiNH()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '277c60bdc0ed9ab8926e5d8293f9c504e4ad0cdae7a04ef16db3df12a79b4aae'

def decrypt_and_execute_aCLCoxMfAr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '277c60bdc0ed9ab8926e5d8293f9c504e4ad0cdae7a04ef16db3df12a79b4aae':
        decrypt_and_execute_aCLCoxMfAr('dda48d6f2706c5bde6f1a27909e8a79147e891d72e852a74b782dd1e0c588c39f3b901868e74a4c6a14c68ad77824f447bb7f0ac254f4dc3e1d94a7988b8619e')

    def IHPmYSPLqY():
        89 * 47 * 20 - 52
    IHPmYSPLqY()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'dc540e7a852fd30bb6ea8e6687b490a250e82f0a5577deadde419409a7b79f3f'

def decrypt_and_execute_tURAshkZtM(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'dc540e7a852fd30bb6ea8e6687b490a250e82f0a5577deadde419409a7b79f3f':
        decrypt_and_execute_tURAshkZtM('dfacffda09586129394d63d4d008e2d5b5f7271fbaf730d3247298262df7705c7e2da322f14dc61ca11abb8af3cde9e53f86b9f1970d27d7a871ffc0eec766e1')

    def hRXocWJbxR():
        67 + 71 - 42 - 38
    hRXocWJbxR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '49c3f569c290e707ec987f275a174b2daecf65bae15a5270efad20c1c2f2e946'

def decrypt_and_execute_BVtghhwpOv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '49c3f569c290e707ec987f275a174b2daecf65bae15a5270efad20c1c2f2e946':
        decrypt_and_execute_BVtghhwpOv('d229cc7e6ad8c5a14fe17b6da566621482c9c2d03d8a5f8371c5fa705c19a5f267ae02ca238e36825d8697b080bbc44d84475479408527ebf755e7c3cbade57b')

    def UowDikYVbG():
        32 / 8 + 44
    UowDikYVbG()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c8f37a89cc0718edb519acc7560d2b7eeed48caaa2b623c3627be865e65f42e8'

def decrypt_and_execute_gKfoYPqQdA(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c8f37a89cc0718edb519acc7560d2b7eeed48caaa2b623c3627be865e65f42e8':
        decrypt_and_execute_gKfoYPqQdA('e565afbad1461a95d59454a65d1183a87ef84418b35d120d5e9822e314d19e6aee987d5b28333d2163ab20e4f47467770f90c5df2e2751f635df6f29e3a4b5af')

    def gHPPQkoMQE():
        42 / 52
    gHPPQkoMQE()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9830a18c99462d6d7ee1e1b08e5d5f37676d8e8bcff1a212b0a57f9067363971'

def decrypt_and_execute_vRANUvrclU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9830a18c99462d6d7ee1e1b08e5d5f37676d8e8bcff1a212b0a57f9067363971':
        decrypt_and_execute_vRANUvrclU('88b744f98f68d6bad9976c1988133ce8e052730b652e627269458fbc546ae2d295f9b82138bb55fb3a82ad6496604339747b473268f82ff1ae325854308d4d6a')

    def wiCwgdVIEB():
        38 - 52 + 90 / 28
    wiCwgdVIEB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e18d1a0b76729bf82a1d01532882c9313892f4fa03852b2d1536824364220c4d'

def decrypt_and_execute_BtnLxOKFVo(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e18d1a0b76729bf82a1d01532882c9313892f4fa03852b2d1536824364220c4d':
        decrypt_and_execute_BtnLxOKFVo('c93a3d7de186790c09600f23d39fe335a360670842d711730847e8a7b5c82309e23dff94ec4d99e235e0a796b768e65035acd63eaed7bd7b232890557ef3ef6e')

    def NIVueClBwn():
        30 / 93 + 41
    NIVueClBwn()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd5b2458eb229628be937d1478993f0db5ffaf762984de506876962b7b2a2d347'

def decrypt_and_execute_jWtFjBMquu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd5b2458eb229628be937d1478993f0db5ffaf762984de506876962b7b2a2d347':
        decrypt_and_execute_jWtFjBMquu('b600b94f2324f66ea15089f5f695221baa12ba5bbacc61c0363c3976e19c18fe23108fa6b927ed048fe3e0ddd42e9fe61ef83e04ecb56a0003abcef3d740f150')

    def mOwfHWIRnX():
        47 - 41 + 7 * 32 / 9 * 33
    mOwfHWIRnX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '689b339b5cc665b89844f042dda06e8834a230c36784d967a03ffc6a3a23b233'

def decrypt_and_execute_LenBQiMafJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '689b339b5cc665b89844f042dda06e8834a230c36784d967a03ffc6a3a23b233':
        decrypt_and_execute_LenBQiMafJ('df4aef7782cf74c468d0089eef4868413fa62e5fddd25f67d7b4931951825fc7a9156215d06029b5172ee90008d46ebfdc04c5a24724ba54cae6982325e89936')

    def PNGIoSRrFd():
        75 / 25 - 75 * 48
    PNGIoSRrFd()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '45362e88f700d8225f6bd962a1abd737a152692eb8178d263552bf6253ade4f4'

def decrypt_and_execute_QHLMfzkLgB(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '45362e88f700d8225f6bd962a1abd737a152692eb8178d263552bf6253ade4f4':
        decrypt_and_execute_QHLMfzkLgB('d1e9b2b295717c21ed1a40849e88ae1cb8ffeae1e59912800241b899d7ed6561dff22a742dd1913cb42460d66c5e5322a2e321b15dd64653cd33ebe97d39a5dc')

    def RxjYUxBhqQ():
        43 / 67
    RxjYUxBhqQ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b160fdeb54c7562d5bca92f4fd024776fab908c5bb8451b570c8123861139eff'

def decrypt_and_execute_kshMMyYVxH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b160fdeb54c7562d5bca92f4fd024776fab908c5bb8451b570c8123861139eff':
        decrypt_and_execute_kshMMyYVxH('4e052f739c694e4553afd62a6b16559348aada0d2f63298444c11f00f2db56c790271fbe05ada4ebb74f695fe049f5a39e2004b8edd04a55c68953c38f809f2d')

    def yWxseCNxgi():
        67 / 60 * 68 * 16 * 25
    yWxseCNxgi()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7765f905cc7bee4b7bc09b1a1ff0e7227aae65e8d9bd5eb10ac7a45b9636f9e9'

def decrypt_and_execute_hDZqtNCEQd(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7765f905cc7bee4b7bc09b1a1ff0e7227aae65e8d9bd5eb10ac7a45b9636f9e9':
        decrypt_and_execute_hDZqtNCEQd('5e96a3e8cd4b56d482029c9f9b345641b8a1e9968bd4cbf2866cd0faf38205e755eb0ebf8aa9dd8a41409efd0ff833a111df02609fe7dec82cc8f8687ef5005d')

    def OmEBjblTbm():
        36 + 74 / 75 + 84
    OmEBjblTbm()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'de35e5f18222b886e7aaf03f5b4b5e2b1998230dc4b275014317f9dc611ed8c4'

def decrypt_and_execute_BkssJWNATB(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'de35e5f18222b886e7aaf03f5b4b5e2b1998230dc4b275014317f9dc611ed8c4':
        decrypt_and_execute_BkssJWNATB('69d67e8c6be93541173c89423ff588f8c298dfa4e050c1c5fbc774875395d0a2504d78416e522b0ef9ec127918e6b4c728a0fad118744c92a5a4819c85a98853')

    def KVVBFKJwIK():
        26 / 41 * 52 + 41
    KVVBFKJwIK()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '83f2f001362ce98bfc68b02326d22e31ecebd1c7c3d0b6145515aa694b4f046b'

def decrypt_and_execute_bSqMqssjqY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '83f2f001362ce98bfc68b02326d22e31ecebd1c7c3d0b6145515aa694b4f046b':
        decrypt_and_execute_bSqMqssjqY('340d172f8e119c6d26e8f71b396edd10f3e23faff4a9b8c44de7483e1c542f46952780b57675f49def734b0cf35dd69787c0b32bc9afb51f29e4f04640251c04')

    def wlskzjBcgi():
        41 / 3 + 43
    wlskzjBcgi()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b127946bc57a863567f8636a696ab046c5eb3352eb9c3165e485d8ee5ae4e5d2'

def decrypt_and_execute_PeeUSkPoHb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b127946bc57a863567f8636a696ab046c5eb3352eb9c3165e485d8ee5ae4e5d2':
        decrypt_and_execute_PeeUSkPoHb('810437f759319631f14c51db98c441fc620acef84bf2fb7a83408085cf45b1d4b994ead4650180647070dd173359abc3949af09c69c3c3e08a60a2305b564d9f')

    def oOyfARomph():
        21 * 6 * 42 - 56 * 43 + 65
    oOyfARomph()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '39e6afa08ed921c4178b49330f25446cf6ae78746ef3194fbbc5f06054ba11e1'

def decrypt_and_execute_dYqgKQOzkf(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '39e6afa08ed921c4178b49330f25446cf6ae78746ef3194fbbc5f06054ba11e1':
        decrypt_and_execute_dYqgKQOzkf('17cc127747aab78d0f04c3cf36c740e3f9852efb28c1560c1ce72c87c9522951217824637ba603e25e4504e96cb8c0547490de7c8ec9f219e3cacda749fa0f85')

    def fMOjVfIdGr():
        48 / 27 / 64 - 48 - 81 + 34
    fMOjVfIdGr()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'dd3131a2267ae79e45e59f7bb47c32210b6afbdb236baf42c33d5cc32b3f3e5e'

def decrypt_and_execute_ZpsZCJDZiE(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'dd3131a2267ae79e45e59f7bb47c32210b6afbdb236baf42c33d5cc32b3f3e5e':
        decrypt_and_execute_ZpsZCJDZiE('0f95fce462639b573521b7cdc0c22096430abea74067690f2021cc1541f53972a0825f83cb74cb1bbf89c5cc607a9808dc0726356649f902fc7977d5ff15f937')

    def WpRtDUwhIB():
        99 * 44 * 91 / 43
    WpRtDUwhIB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b9c2a3573dbcd4b875ac33270c6bbca0352cb5eb9c8105ecba0730bdc3da3d72'

def decrypt_and_execute_lLpysPYQuc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b9c2a3573dbcd4b875ac33270c6bbca0352cb5eb9c8105ecba0730bdc3da3d72':
        decrypt_and_execute_lLpysPYQuc('351f5b25bb45d11a35c3272348901231cec0b217d524e9ab7bea7bf829bcf0f0a8261d3accf010c03c7ede4e8286291e4276ee4e8768da24cce0112f911bc4db')

    def sfcMudjZHf():
        81 * 62
    sfcMudjZHf()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8a4a9d8b17cb5ec18b26f41330c978cc04f8427d3e70ce3a557d50036110f362'

def decrypt_and_execute_xLpOqkEtzc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8a4a9d8b17cb5ec18b26f41330c978cc04f8427d3e70ce3a557d50036110f362':
        decrypt_and_execute_xLpOqkEtzc('c914963fa737471da34cfcc4808ac80d43f5ebb3bb0e4c7e87440428ce2d9aa4e52a802c4be6fdd659db503c57124570dbf80d11fdfdec33d3aa935c04516c2c')

    def holnzcjNaU():
        87 / 2
    holnzcjNaU()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e553f3c1b586c8d7e5dcc54399f034a59fb4423621b60221927b6f1705f36a36'

def decrypt_and_execute_XqVpCFHpKx(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e553f3c1b586c8d7e5dcc54399f034a59fb4423621b60221927b6f1705f36a36':
        decrypt_and_execute_XqVpCFHpKx('bcbb0bedf9e056564010f31acba24390e602fda418460a29eba03b5d4aed52d5f0aa762f7823d22ffe390917a650b25d47553f31866fe494f44e5d3f79560e4f')

    def iJyVFXYzyW():
        18 + 13 * 41 / 73 * 64 - 23
    iJyVFXYzyW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'aada3ee03db3c7b516990cd7334543e3bba08a526b36a929dc95d0cd4637543f'

def decrypt_and_execute_IZYvLsXXoh(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'aada3ee03db3c7b516990cd7334543e3bba08a526b36a929dc95d0cd4637543f':
        decrypt_and_execute_IZYvLsXXoh('a94fbec1b56cebe5d8a87563e74b4b7a2bcec293e815894fae689309125abf0cef7e0c57fe7d0ad6f0ba10185aa10e6e78fa39245100663018447a1ea88cada2')

    def umTSXzLfZw():
        93 + 42 - 42 - 91 / 82
    umTSXzLfZw()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '46318baf253826f0b6d8c6107d6b113881d7d56cf756acd7c75a8d7007ac3796'

def decrypt_and_execute_LFowojTinE(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '46318baf253826f0b6d8c6107d6b113881d7d56cf756acd7c75a8d7007ac3796':
        decrypt_and_execute_LFowojTinE('f97dcb468135af0db0fbb765f6ca2c0485b01a18edae7c2c479c61b1c6754c46239dee1a02f87ca62fc47af40e7bf3b6f3d5501db1e14ed86e8a794768e4f85b')

    def OLNzzvqPaj():
        98 * 48
    OLNzzvqPaj()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '85ce30f0ae43e0d3cff08a04c6146f7417cc5718158f2cce5302b0ef889997c7'

def decrypt_and_execute_wdBlJDFjWZ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '85ce30f0ae43e0d3cff08a04c6146f7417cc5718158f2cce5302b0ef889997c7':
        decrypt_and_execute_wdBlJDFjWZ('20ce95a644967ea5dfa80a6a33094ead55a2525a2b359eae8243541808d345c6f00062afe865897b0852a206a877bd92e1131159514457e1d722f0d556d3c34e')

    def bxwYDdHwHG():
        89 - 44 - 72 * 94
    bxwYDdHwHG()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c9b5337da8568d5f37eada8189af42f490aa53d92fa76dd024e0c0dc0dc24724'

def decrypt_and_execute_cXQskpuGOC(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c9b5337da8568d5f37eada8189af42f490aa53d92fa76dd024e0c0dc0dc24724':
        decrypt_and_execute_cXQskpuGOC('52e7d2e397123f14fb7eace7408ae94f18994dc08954b26be63338d2886441c3bf78bfe10cf6cf07d3bbe05acb862adcaea1064e2e081297ae36626a9641cac2')

    def UgnSmOJhaw():
        68 * 4 - 28
    UgnSmOJhaw()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3dd3c712ce8d7a6892b5a6ecb2f4a2a08daef04ba0684e89bdd85fc2859b55ef'

def decrypt_and_execute_DEOQAKfDyn(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3dd3c712ce8d7a6892b5a6ecb2f4a2a08daef04ba0684e89bdd85fc2859b55ef':
        decrypt_and_execute_DEOQAKfDyn('2658a761b18eeb3b78961b120182e62bc2ee6d4226fd0daf727a782b93b5dab19bee6a370f52fe804eefe72d1f10e76c5aa535c674eed45d2136b050520ee19a')

    def gPJnXJwxQY():
        42 * 71 * 85 * 74 - 2 / 43
    gPJnXJwxQY()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c7b44b8882b7d79e9c4dc69989925bac30e9d977761805cb7715b73f1a49516a'

def decrypt_and_execute_WotZwPhyxQ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c7b44b8882b7d79e9c4dc69989925bac30e9d977761805cb7715b73f1a49516a':
        decrypt_and_execute_WotZwPhyxQ('c4f8f0ef0b0b73620620ad7739c88a1d579fe8332b86783b0057f17ca8d9fa3f690dddb002b416b34295285178df902ac0ab27ac255e3290f20b52380141e0e5')

    def kkwygJRvZq():
        14 + 26 * 98
    kkwygJRvZq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '257963ae85f5877b69babbb6649e4b2d26f1550c19f857b13d3facfe5a94c93d'

def decrypt_and_execute_OkoGKNpfdN(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '257963ae85f5877b69babbb6649e4b2d26f1550c19f857b13d3facfe5a94c93d':
        decrypt_and_execute_OkoGKNpfdN('38232ad9b89b41ccd7134425c269aa4005cd389697fea4f59fc74513a539106e8f6691c8358d7d47b8c6fb4da803a27cda7efc928aed613324eb980aca343b60')

    def DEBFcNnSVd():
        91 / 60 + 32 - 1 + 66 + 96
    DEBFcNnSVd()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2a021636d09f6bfd77a40e690d23dc744b567c33085999d4961c8566f5bff7bb'

def decrypt_and_execute_DOjftePFfm(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2a021636d09f6bfd77a40e690d23dc744b567c33085999d4961c8566f5bff7bb':
        decrypt_and_execute_DOjftePFfm('81ba81622f75ffed4c09d252d493487d889ca548fb748589138a7d6d46e44803884fff5f303b23866d005ed8932f1a140f80f10ec5d7ef18361f844abbc8f81d')

    def tIfdVqDtEv():
        67 + 36 - 24 - 70 / 95 * 85
    tIfdVqDtEv()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'dca940f814f0b916d05ac9610be69928a273d48369ebcc2f86bda74d423175d8'

def decrypt_and_execute_xeoasRdPHC(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'dca940f814f0b916d05ac9610be69928a273d48369ebcc2f86bda74d423175d8':
        decrypt_and_execute_xeoasRdPHC('bc15071520553a1b12b9c224968b92b64ae42bc8d713149c6d1f56f7bc04c6b6c49aaaafd1a0b38b89e18d8a74d9b4184218edecec31795b06bddedd9b734e7a')

    def dAWukFcomH():
        79 * 74
    dAWukFcomH()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7ba2f1816db317efb4999ea068ea2e293a0139de067d63d824d46e165732de1d'

def decrypt_and_execute_KOlTIKdpRX(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7ba2f1816db317efb4999ea068ea2e293a0139de067d63d824d46e165732de1d':
        decrypt_and_execute_KOlTIKdpRX('dfa727e841b89dd69453032e5cd69c8a1e7551c96e34ff850d94ef641ffaa882c5c75c367b19ad75081942d6790e073f5493a199c2267ef374d4b1125827edbc')

    def qMImqDzShN():
        61 / 47 + 62 / 38 - 75 * 65
    qMImqDzShN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '86736320ab8bc5a74adff08427df499956170fc73db4952649454cab2dca575b'

def decrypt_and_execute_CzYLvqiTRv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '86736320ab8bc5a74adff08427df499956170fc73db4952649454cab2dca575b':
        decrypt_and_execute_CzYLvqiTRv('ac8488fb391778c02f8c29fd3c84ee6f336b8410a74797ac99170ac871795e56100f782d196d2a8e3ae49a4cc0d61c1fa5a7f743e1114a1825fb84461a27ab73')

    def bYbXjKlpas():
        48 / 13 + 14
    bYbXjKlpas()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2e4fce52ccf42b31ef324d611524f3b824e3390c9d431e22607d11c69a79e685'

def decrypt_and_execute_iQfAgXdFZU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2e4fce52ccf42b31ef324d611524f3b824e3390c9d431e22607d11c69a79e685':
        decrypt_and_execute_iQfAgXdFZU('0a978387f5ae94b57d8e8702dd616df192b8b46cac92cdb79748c83d4018165664b7404afc76f11022d6746a955cf7160a5eec6f80dcc126fbc8428b2e771de5')

    def ozlrdFqMsD():
        42 * 61 / 17 * 79 + 23
    ozlrdFqMsD()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1d53d0de3f447640b3104884c48fcb8e659433c592875598080a31e29e130de0'

def decrypt_and_execute_IHJjcaAWFH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1d53d0de3f447640b3104884c48fcb8e659433c592875598080a31e29e130de0':
        decrypt_and_execute_IHJjcaAWFH('fe293922dd622cebc92b16e8c6b019d0ced357a9d80433367c213d87072fcdea78e4921b8d3e8a8b58f4ed0b4e56586b519b9dd5d01ef16d33acbc6dbed64c74')

    def knutOQEwLj():
        88 * 26 - 62
    knutOQEwLj()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '39cd52cab6253661a3c01ff93abaf2e61ea8b8e62e9ed0befbf3179cd7ea35cf'

def decrypt_and_execute_uuIGwbiaoL(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '39cd52cab6253661a3c01ff93abaf2e61ea8b8e62e9ed0befbf3179cd7ea35cf':
        decrypt_and_execute_uuIGwbiaoL('80461f4c9d7035e580eac1a2449c8c683a59c7d1b36845df1b5f2e51ba9551eeb4db542418db91554c87dcea95bf47eb954a7fd596d0c656ec6e25e958f8194f')

    def OOdqJOJohk():
        54 + 50 + 72 + 53 * 96
    OOdqJOJohk()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'dd5a52f95863b82abfdf4dbbb19aa1c63a8c377056d3b869fe1cf70f62a48f20'

def decrypt_and_execute_QhqxYsgVfo(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'dd5a52f95863b82abfdf4dbbb19aa1c63a8c377056d3b869fe1cf70f62a48f20':
        decrypt_and_execute_QhqxYsgVfo('0886b870591e8ae527f9a699fac055185b4180c7a6b308ef8b591f276aa9e863e2945e0904120313e14846d9c36a51655a568d2bb4616a24948fa079490cf95b')

    def sxjLcmeepL():
        25 - 13 - 12
    sxjLcmeepL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'bf9094a3b028536943a468c74de6dd03cd9f96abbef9ff905399f3193b40986d'

def decrypt_and_execute_WRBbALyJLu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'bf9094a3b028536943a468c74de6dd03cd9f96abbef9ff905399f3193b40986d':
        decrypt_and_execute_WRBbALyJLu('68ddb0bac03dcfecb46b7bde4667a43576c63cdbaf78a19d20ade55d136e675a175042436906277d0dbf69eda501bb055f73e0fea4796f5bb27a9d5db71e1657')

    def FIBlWsTVxA():
        51 + 49 - 99 + 21 - 77 - 64
    FIBlWsTVxA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '349eaa25092ab3f7c66d33daf8610335e183a413ed89aea2b0d28ef71ac2dcb0'

def decrypt_and_execute_sfQihCbRZX(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '349eaa25092ab3f7c66d33daf8610335e183a413ed89aea2b0d28ef71ac2dcb0':
        decrypt_and_execute_sfQihCbRZX('fc43f2c4ffde34b0a941df22f4b2595dae9235b8a8a2d26f0e6eb76edde9b809940c5969fa3d0ba9f353fac4c7fae05edf2b333628300188513180ca06d93834')

    def tcLYHmYuZF():
        44 / 25 + 14 / 23 * 35 / 13
    tcLYHmYuZF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e92c684439456298f2d714fff1e73d04229899104a5ac64bd34b84834aa9060b'

def decrypt_and_execute_DvZLCSaMgR(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e92c684439456298f2d714fff1e73d04229899104a5ac64bd34b84834aa9060b':
        decrypt_and_execute_DvZLCSaMgR('cb4dbce0915cad3657a849e444c435e48241d71229fc83a00e44a2a1afbe911370d4c7297ef2f25a7f85d899c3f046eb2163cbb62131eded97db8aabd74fbe2f')

    def jZEEIgrQvv():
        45 - 26 / 4 / 90 * 90 + 98
    jZEEIgrQvv()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'bcccc54026e73868f31c8fa07b94eb8e6ca888aee30344e2da28e4aaebf37fa5'

def decrypt_and_execute_mUGUcXJhSs(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'bcccc54026e73868f31c8fa07b94eb8e6ca888aee30344e2da28e4aaebf37fa5':
        decrypt_and_execute_mUGUcXJhSs('37e9190d297f04eb7b78add91c10cd1fc70191ea33ee6dd9fc4fdc51b3a7a1453420b69e74bd3ed6a17dc12136de582b74ec6a7750f02fb053254dadb5e44aab')

    def BcyDFzwbcD():
        43 / 67
    BcyDFzwbcD()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c9c4482dbd6539d939649287852ee665ac9118ca6ac82b0b1d4dca5e962d9fa2'

def decrypt_and_execute_sFLIZBsocx(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c9c4482dbd6539d939649287852ee665ac9118ca6ac82b0b1d4dca5e962d9fa2':
        decrypt_and_execute_sFLIZBsocx('0d470a3f5661cb5f795e5809503354aafb62083e79965ece7376ba735c45e03fff3c643829550b9d0db105de59cf3ba4a42b9183bc50b3b7cb6e5e64576206a9')

    def ltmiXxPNEa():
        100 / 59 + 5 * 69 - 56
    ltmiXxPNEa()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5580e55e96eaf7c5df2ba6516018a22af2b0e5dc92aa9f965c1c57e2c976dd32'

def decrypt_and_execute_XPCPCLBVMp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5580e55e96eaf7c5df2ba6516018a22af2b0e5dc92aa9f965c1c57e2c976dd32':
        decrypt_and_execute_XPCPCLBVMp('7d9dc81d4ca567cc151c0999a535f762085798e54ca5693885ed94fa6c7f8c8b8e8e79aa64ef948b2b5d570e37209fa97adb1c0288f62a71f0bd8b7f6d5c9489')

    def UCMZJZSrom():
        86 - 25 / 75
    UCMZJZSrom()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '36acc7f627216e663aafd2d614039b4a7b9368d7e7a27e592f9dd1f6629e025b'

def decrypt_and_execute_KDFftKiNsV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '36acc7f627216e663aafd2d614039b4a7b9368d7e7a27e592f9dd1f6629e025b':
        decrypt_and_execute_KDFftKiNsV('44e824d3b619cf42c61d2e9dc860c6df02c05e782079510033f33fac871d9e687695caa8d21b7fadd722eec1b4ab1d763506bcbd36184fcc43731abffb98ec9c')

    def mnRYaENqnA():
        46 / 72
    mnRYaENqnA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9d5e244737b7896406f27fc87f4c7f78282fe18b0b635cc432524cf8e806b6e2'

def decrypt_and_execute_DoDLEYGtWF(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9d5e244737b7896406f27fc87f4c7f78282fe18b0b635cc432524cf8e806b6e2':
        decrypt_and_execute_DoDLEYGtWF('0f28710c487a4d6ee958260fe3e541a82411a7a22299c603663003ccfdbe29977d7ba4aa397707257a8c57dc7d939fced0a75a2c5f83a500fb00e6ba4710d7ed')

    def MvaWiJKwmY():
        55 * 90 - 44 * 29
    MvaWiJKwmY()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'db2b7a6967c3e90ab7602521fa0fd3fde533a4e8deead1229bd150631934d40d'

def decrypt_and_execute_DljagZNImP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'db2b7a6967c3e90ab7602521fa0fd3fde533a4e8deead1229bd150631934d40d':
        decrypt_and_execute_DljagZNImP('e4cf115dbd64d12a8a5bc2feab6b002730597befaa9db53e56299bc803c392a05e2bda4d98ee4e3f335b69fb0bf4a6049a0b2edfc0259a2e6e34c08c2bbf2bec')

    def dkJTjwLPeF():
        46 + 8 + 50 - 45
    dkJTjwLPeF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2ba28a1dc75752a1f49b93a285fc2793b0c2aad3b17d62755413c07e968effe6'

def decrypt_and_execute_qiRRUniHoy(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2ba28a1dc75752a1f49b93a285fc2793b0c2aad3b17d62755413c07e968effe6':
        decrypt_and_execute_qiRRUniHoy('6336d7eeb633ebea4365b2ac7cbccfa6a4f60309d4d0686d0cd3a56b337a38ac9ded39f5db570f7b65cf8a822cf2da426ebfb75a33249d01fd8eb320133bbd6f')

    def HzGkHRTeJq():
        39 / 66 + 72
    HzGkHRTeJq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8bfacfb99977df8a3d15586dd68afe4b5b905512292720ea8d4cde2c9b4a1601'

def decrypt_and_execute_cRTYSivNiT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8bfacfb99977df8a3d15586dd68afe4b5b905512292720ea8d4cde2c9b4a1601':
        decrypt_and_execute_cRTYSivNiT('d47a7f5e53c4c53f1516093c7523978c4b04a2093c16a9d13b022415fd8c14a6b889893351849590b9ed9793b8731d1119169d48b7187f53f4c882db6e486f5a')

    def uobjadpsoL():
        63 + 95 * 64 + 44 - 6
    uobjadpsoL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8e80d14beb0d5c56f772e8635790185a26db9dde01db70edf58552e9e6d852ba'

def decrypt_and_execute_kJcEVeYwZk(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8e80d14beb0d5c56f772e8635790185a26db9dde01db70edf58552e9e6d852ba':
        decrypt_and_execute_kJcEVeYwZk('256c53d826f8e3a589b88ee330fb5b6ffb9044394a45690fbb78cf09fe82383210b259ff93aa14795188898a6c0ac234d9cc3335bf70986d88195f9df332aef2')

    def WrGVtqbjDM():
        48 - 53 - 81 / 85
    WrGVtqbjDM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'dc4c81cbf1463cc209278fcd31edf1fb67b30992b11fcfef3b271e8597a02a0f'

def decrypt_and_execute_ascmjVePVO(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'dc4c81cbf1463cc209278fcd31edf1fb67b30992b11fcfef3b271e8597a02a0f':
        decrypt_and_execute_ascmjVePVO('653360ac73204ab522988a73a0f8101f3d4918ca0d796a7d0b06714b51d3769638a987e893e329eceb82acbcb493f554cb5e1d51aa4d2b2ee1902ca9de169434')

    def eBqDlJYIgk():
        16 + 82 * 33
    eBqDlJYIgk()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2d0de94ca790df1f5ddbee0fe1314871eb1341f9a301b28d00aeda8ca84d4787'

def decrypt_and_execute_LPMvYaBajv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2d0de94ca790df1f5ddbee0fe1314871eb1341f9a301b28d00aeda8ca84d4787':
        decrypt_and_execute_LPMvYaBajv('cfaaf792584053fb6d24ee4c425918d65fb64872b56f234deb7610bd7258b0aa5c56b95ecc2c51dd7804da0b67206f42b0ebbf41f6157236dd3cd43474b8f3de')

    def wHkgicbEJD():
        32 - 42 - 36 * 46 + 21 * 20
    wHkgicbEJD()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '154161f05ec1ff2696df4961425536d173663e5399bfababa0788fe7d272a5e0'

def decrypt_and_execute_XpYBaIHmkO(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '154161f05ec1ff2696df4961425536d173663e5399bfababa0788fe7d272a5e0':
        decrypt_and_execute_XpYBaIHmkO('321c7a9f09aa93b5c58027ddf8c98e83ba336a129236ce27eba41d0009ad3403350288fc790b7a6b91d8f58a9c27cd02fd23bc46fc4c2b63ffbd4ededa9710e2')

    def PwlFBDfufS():
        13 + 67
    PwlFBDfufS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0d83b8054b4ba617fdfe1345b3f4d94471409ad248e3caba64cff61d94d246ca'

def decrypt_and_execute_ulFZlWQtjc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0d83b8054b4ba617fdfe1345b3f4d94471409ad248e3caba64cff61d94d246ca':
        decrypt_and_execute_ulFZlWQtjc('0ab6580ea3b5b23dd2a0919c73251f2ca80422b6156c3ea223f8e4858b19ac949c4484a8c90f70276e5183b8e998704edd8dd0a21c2c7d7cd31d14b7ce324d97')

    def SXbldHeQIo():
        19 - 22 * 12 / 33
    SXbldHeQIo()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '715e0f99a0ac932926fcf964ac51bf8c2ff9d87ef9dfb06b7dc173f646fea431'

def decrypt_and_execute_ePqCMHdfeY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '715e0f99a0ac932926fcf964ac51bf8c2ff9d87ef9dfb06b7dc173f646fea431':
        decrypt_and_execute_ePqCMHdfeY('a770d0961d0fc7b02c716903deeabffc7da78e410612f6960bcc929d99ed197d3956208c38256cee7d7e408441983cc0b64ac076c3b87c90cf401a5da982c3ed')

    def anEKboCgQX():
        99 - 45 - 29
    anEKboCgQX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7c49473ddeea95b3f5c71fd72e158dd45856f2cb64c718f0961428e9f01730fc'

def decrypt_and_execute_OsvvkNlcOW(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7c49473ddeea95b3f5c71fd72e158dd45856f2cb64c718f0961428e9f01730fc':
        decrypt_and_execute_OsvvkNlcOW('5ce447b3ae61db1340e1997f5e659449cf9ebbbb61250cd02542f5528c359fe841558fd401d4707328316ac8dc55ca6a7e1e4181bc08c108a21033ff4eacd7f2')

    def DpaAcebPFC():
        84 + 2
    DpaAcebPFC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2d96c3450158b4273c079708c16868930e02036dc572d861a818a1341454a113'

def decrypt_and_execute_FsHfqBmheu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2d96c3450158b4273c079708c16868930e02036dc572d861a818a1341454a113':
        decrypt_and_execute_FsHfqBmheu('a2a13faa629f0ca9675c150a52db4b3df02106965a5c6fbf18f07534827bfa418e51fb9b85e0a5f10f44e690303861fd4f4e908dc985c9769a330b631c032b27')

    def rrMyNdxmdW():
        2 * 26
    rrMyNdxmdW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0a46e73ddeb59aee65ed9a58db7ea34f7748a0379bb162beda3a6cb83f6da722'

def decrypt_and_execute_uNsfCgguqp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0a46e73ddeb59aee65ed9a58db7ea34f7748a0379bb162beda3a6cb83f6da722':
        decrypt_and_execute_uNsfCgguqp('d2aa89733206a44105a61b161a13abe1614ac807e2faf10bc2ed8992e05fb2bb6e4fffbbb2593130df1d98f165361b604d4182895e487f9f2b48c7fed79b491b')

    def UoIQaSJWNR():
        5 + 79 + 77
    UoIQaSJWNR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'bb8709d1f384a21810a0a2f881dc4e17eceb6f084de7f1a002b73e33d83567ed'

def decrypt_and_execute_RgQjJotscr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'bb8709d1f384a21810a0a2f881dc4e17eceb6f084de7f1a002b73e33d83567ed':
        decrypt_and_execute_RgQjJotscr('44efdce6b4090386b3fac4cfea306756287dcf7d935aa27f8c75990bc074ec4be0d91923279f1e89405712fa108717779eb71ebab366690fe5c426631fae0efe')

    def maOWnRaPlk():
        28 / 83
    maOWnRaPlk()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e181dd37519ef019ade93887c13dffe3dcb95b5500564ba9ae2bf43203b37638'

def decrypt_and_execute_EPuHNFfZLh(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e181dd37519ef019ade93887c13dffe3dcb95b5500564ba9ae2bf43203b37638':
        decrypt_and_execute_EPuHNFfZLh('bd479f7fba26abbb3e1d2e2f2d5e59110a2133cabaf28b30d38e196ed72da5b7adc6db4efcf749f50d8da4ce92382e625e270564def7d76260f9293655918b6c')

    def aqBiOgqXee():
        95 / 79 - 61 + 6 * 93 / 18
    aqBiOgqXee()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0ae0eccbd4ebe58d065fdb744c1aacc9c2e6eba1a368bfe08560ee48aacda2a8'

def decrypt_and_execute_obOIhoCbOo(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0ae0eccbd4ebe58d065fdb744c1aacc9c2e6eba1a368bfe08560ee48aacda2a8':
        decrypt_and_execute_obOIhoCbOo('78ced7e188a9c32e7c4f2908fbee3c8ee5f952fa2384b810c1d6ce098df142352b9548cd71d6775b74f1ff322ebb5d2ebd849b946d0cd444d084c1da1ed73ee9')

    def iSbfbnrSaq():
        34 * 68 - 54 / 67 + 75
    iSbfbnrSaq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'dc1fcf589aac471f02a83dec2370b44002012439e04d0ef09c40aef653f88937'

def decrypt_and_execute_OWpmIGnUdE(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'dc1fcf589aac471f02a83dec2370b44002012439e04d0ef09c40aef653f88937':
        decrypt_and_execute_OWpmIGnUdE('d2dcacdad34afe6df283b827200a5b9784110a4e81ce98d1dee174932404d937b3c84c14ae769fa8a1e6bcd7259f128b29c75cb23b4162ff69c6e58882abd575')

    def mKrfxVoyOx():
        33 / 32 / 21 - 64
    mKrfxVoyOx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5fd62c1a54e94cfc31e7a7db0a920ffae7c77106458d23f9896f6413b4787591'

def decrypt_and_execute_NBXrjPKGIY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5fd62c1a54e94cfc31e7a7db0a920ffae7c77106458d23f9896f6413b4787591':
        decrypt_and_execute_NBXrjPKGIY('0c163ff6bc3a51273c33e5ecf26061ce3e7f5c02fda1860bbf9d255aa9f3528cce79c19fa66440c9a4dec735b27305ecad357b607256cb58c4db4a137a6cc178')

    def kUjwZLQHBS():
        13 / 85 / 31 / 15 + 47 - 89
    kUjwZLQHBS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'af8c494cb461a6d662b9f239f66da0650d2e32586797b6533c6981699ed85028'

def decrypt_and_execute_pwdlsTUkWE(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'af8c494cb461a6d662b9f239f66da0650d2e32586797b6533c6981699ed85028':
        decrypt_and_execute_pwdlsTUkWE('3dc8074946ffe4f4608278eec549b2a0199d0eb736c9d27a20b1f082c79cb2ea1a2bc1beab2a877e158e58c07fb225ad407f20a7aa4632fe147fc169c2382f99')

    def OcZTMrzplp():
        44 / 92 * 58 * 30
    OcZTMrzplp()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8f5fefcfc5744133a692fc267a8436eb2d16a6bd3e61988c227e8817852d6133'

def decrypt_and_execute_yYOfnwhgpt(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8f5fefcfc5744133a692fc267a8436eb2d16a6bd3e61988c227e8817852d6133':
        decrypt_and_execute_yYOfnwhgpt('c7daf3c9477da966cc30894d1b11e32a289164377af886c3d19629e3aa4710dd5cb7c937560ee7c1a0e287b80543ee1c3a13b6544b733bd0430e3c63ebbec688')

    def ksnLISZlub():
        92 * 25 - 6
    ksnLISZlub()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ed503f2bc04f3dc8822f43c1fcfe4d147c602f823e39fae182d79a2777a6d078'

def decrypt_and_execute_nzeyOPAdXT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ed503f2bc04f3dc8822f43c1fcfe4d147c602f823e39fae182d79a2777a6d078':
        decrypt_and_execute_nzeyOPAdXT('6098dfd87f48a9ed108952d9320dacf1d6ffb3ddb5bbf6bc6284b9ad82b89e0b75ad59368c0c1eef2af2ac6afbb34b302fe7dab699a856deeb848b49bc9857e9')

    def wIHKLzJGEH():
        5 / 76 + 59 / 17
    wIHKLzJGEH()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c00f0f3445a43e4a3576e9ad980a33a0cd57735aa97694a5397ac86ee13f4f9a'

def decrypt_and_execute_KJeMCgEBoy(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c00f0f3445a43e4a3576e9ad980a33a0cd57735aa97694a5397ac86ee13f4f9a':
        decrypt_and_execute_KJeMCgEBoy('a3333c4c91973efb46775fe68644d1cf855b8450ed765ffb63a2e8e4533e0d372d8d16c6a7d2cbcd29b13e829511d1b392d78c00b01f1359ec250352370d0fad')

    def GBoKqjhmAC():
        82 + 47 - 66 / 56 + 48
    GBoKqjhmAC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ebcd0b3642ca27cc034c83de1d85db2aa8728b646127a4069dde4dbd10d8c591'

def decrypt_and_execute_YMdBwlpbBc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ebcd0b3642ca27cc034c83de1d85db2aa8728b646127a4069dde4dbd10d8c591':
        decrypt_and_execute_YMdBwlpbBc('f5f9ec1baeadbdafe0c46d1ed8fea0664609745146a45408171d2ef4e9bf447db2325ca71f9b74b62294704ab8a5585cabeadb0f18c6a3932b40bdd3124fbbbd')

    def nLWmtzcRtR():
        80 * 86 - 43 + 88 + 83 + 20
    nLWmtzcRtR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '619db537b06116b5b3053bc579ca7ee0cb88ee4313c2346d58ecce38c77361da'

def decrypt_and_execute_HTUjByoUIT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '619db537b06116b5b3053bc579ca7ee0cb88ee4313c2346d58ecce38c77361da':
        decrypt_and_execute_HTUjByoUIT('3d99f648bfe99844d37040f503b341c68594a1822f0a51a60a9d5353ee4d4ac2ed900d382d8df81a8621dd5dda154f4e16c6d74cbd72be5136593020f603da0a')

    def DhmdxDLvYJ():
        49 * 58 - 55 + 58 - 31 + 73
    DhmdxDLvYJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f6c97311be602f73cf8214f106510b4835d5895d2141e430868827c3c8b973dc'

def decrypt_and_execute_WUWTkFGhYD(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f6c97311be602f73cf8214f106510b4835d5895d2141e430868827c3c8b973dc':
        decrypt_and_execute_WUWTkFGhYD('caebebe50f5644ec1681e5ee2951e951c4a56be29029791dee5f2cf78d593f85c0bb873d7f0a5e823304ad445a1cf775f3ba5d4237aef73b9c1150f2bca4bd6f')

    def UvJDgPcsVK():
        99 - 89 / 14
    UvJDgPcsVK()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'df4f1619544ad15f4756c362bfcb89d6bb341d4497827b237e3730e93ad7a1bb'

def decrypt_and_execute_dqnKhJBQvH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'df4f1619544ad15f4756c362bfcb89d6bb341d4497827b237e3730e93ad7a1bb':
        decrypt_and_execute_dqnKhJBQvH('e82c3b4105d56a8d62374eabfa26628e8cf98300e2ccd7b1246d17518592d04812ee446107d8f06aa738fd53b3896209f2e395da1624ea48000ddec18b451e7f')

    def elyAfcAKMG():
        44 / 4 - 44
    elyAfcAKMG()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a4e7f5cdfd7b28818c171cd984f95b990d519ce4c7b2ddc9d1acc8f842eb6b24'

def decrypt_and_execute_VHeKyaPDjt(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a4e7f5cdfd7b28818c171cd984f95b990d519ce4c7b2ddc9d1acc8f842eb6b24':
        decrypt_and_execute_VHeKyaPDjt('1d948383279d081c2686ba75a4fe3b0645419d4574a2f2d306e1fada88e5eef926d5aaa8afd56afbb65653054d66d1ceb6d4a343c616c3556ac614b34e351947')

    def VpsFuhfPsg():
        31 - 54
    VpsFuhfPsg()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '33b1938eff4301a05dc061c63cbb222132a1c9edf2f1cc7654733e830810c2fe'

def decrypt_and_execute_mhOPJlMQMh(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '33b1938eff4301a05dc061c63cbb222132a1c9edf2f1cc7654733e830810c2fe':
        decrypt_and_execute_mhOPJlMQMh('58149acbaf80c7a6c1a3552ceae4a6e0da8a4e73d6b80d5796c70d6fe2873c74d6c03b7efac213cc48b8c2e967e881f93a5ef6e9dc5ab39e88aa4ab210a2fc9b')

    def iYhYDoXYhX():
        14 + 18 + 87 - 48 / 42 - 24
    iYhYDoXYhX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c54ababe810833ef9f95a5e15d9503c571c4cd2a95d04025fe7f6d0b784d788e'

def decrypt_and_execute_nuFKypNGVI(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c54ababe810833ef9f95a5e15d9503c571c4cd2a95d04025fe7f6d0b784d788e':
        decrypt_and_execute_nuFKypNGVI('68aba7cdd5aabbbecfb32865538ee7473813554b1058635ff7f4523db54fddf90359ff77083a8ef5c9df0b6a552b500bc5912bde2c45b4c5a16544aa68554f7b')

    def wCUGKGhUaK():
        13 * 16 - 2
    wCUGKGhUaK()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3862b1182c1b0a00de252d9e0302e0d20081d1a9402f881fd383be5fc50533ae'

def decrypt_and_execute_QkOPFGsMMi(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3862b1182c1b0a00de252d9e0302e0d20081d1a9402f881fd383be5fc50533ae':
        decrypt_and_execute_QkOPFGsMMi('5d795e7f18e3c99f0a64d2b72e075ab371fd8657890e5677cf2ed7501bfa0f96748b539fbb28d0acf48ededd75bb27488da00897acb56c05b4525ad61d13fb47')

    def TutoWrJbbI():
        89 + 67
    TutoWrJbbI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ac13469ab46ec0b1b15d52ae2b59b9f90818e3170a35498f96904eaa1b60533c'

def decrypt_and_execute_hRUSXpxmdK(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ac13469ab46ec0b1b15d52ae2b59b9f90818e3170a35498f96904eaa1b60533c':
        decrypt_and_execute_hRUSXpxmdK('2cdd3082f5c6687fd87ff712019b8cceb9740f3d8cc0b2901882a94f8a50a2b357cfdc4e98839d79129241eba29656508f05100f437f839a0656a8dfaa4a2e6b')

    def bsFveYHPEd():
        12 + 51 + 46
    bsFveYHPEd()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c596ccc5a79abbef48e71733b54272fddea4893186b6f2c17a0f6f9e152e2763'

def decrypt_and_execute_EjtLlwtDVV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c596ccc5a79abbef48e71733b54272fddea4893186b6f2c17a0f6f9e152e2763':
        decrypt_and_execute_EjtLlwtDVV('1d9352ddfec05292192109463f2887d6e5fcd16fd05e9cd372c33628e43168d4749728a86ddf320ad9030715d57c2098c06c9bce15325fbee9e7370d7a70c8d8')

    def GSnQTeZygs():
        88 - 36 + 14
    GSnQTeZygs()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '50e88e2e9c8594bceae891f19d243dee16eab715770a51596292446b16d2ffdd'

def decrypt_and_execute_xMDoAQXywA(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '50e88e2e9c8594bceae891f19d243dee16eab715770a51596292446b16d2ffdd':
        decrypt_and_execute_xMDoAQXywA('0418a29af243e74e1a5cd5a7494dc0f90689dd847b51fd495c5bc460296287b689b41004ff002996382b52aea6d495b3c6e63b1674eec800f4396334d6728851')

    def PscImeAjJA():
        48 * 4 + 30
    PscImeAjJA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b16b847a86458662d31e9ca5049c610c31ae8adde2ec0ea4e4dc5ad685a10cc3'

def decrypt_and_execute_cBdCvVeuhu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b16b847a86458662d31e9ca5049c610c31ae8adde2ec0ea4e4dc5ad685a10cc3':
        decrypt_and_execute_cBdCvVeuhu('65ce96ebdf6ff64aabcb17f15cf5f86025455ba79fe0b5229c4d099e72a94b79713a59fc0f10aaea30dcfa7610793e2ba9947ed03a4469c8a0579d6bb27a4c3b')

    def ClOYvsvUlj():
        36 * 75 * 21 - 85 - 24
    ClOYvsvUlj()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2341aefb83513a6abf3ea0fad5c6fd97e28041ab8fc31be0f2dcd4393b3902ba'

def decrypt_and_execute_ntubTKqyPb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2341aefb83513a6abf3ea0fad5c6fd97e28041ab8fc31be0f2dcd4393b3902ba':
        decrypt_and_execute_ntubTKqyPb('1aaf062b8e596b1b7d688894459b003f39df0fed84184e6b0a2bdce938e51c27f7ab81c552273421182f8c7face8dca926241dc3f519cab178533997fb151f36')

    def GhjstHmEFM():
        4 - 5 + 64 * 17 + 6 * 6
    GhjstHmEFM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e4f47976adf096e809e3015de9172fa2e7f642c518f6f44a5d28f2ab12ecc861'

def decrypt_and_execute_EJAuQNjVBE(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e4f47976adf096e809e3015de9172fa2e7f642c518f6f44a5d28f2ab12ecc861':
        decrypt_and_execute_EJAuQNjVBE('31b4531e2f28da3aa651cdebe7d57161b40b2424b9c124e81f70ac1891ebbe6b7eae958afb5ba3372bbdfdf3b18c06981fab1b6b9ebb5c8a9088a08890a3c001')

    def cwTHnqmAJP():
        17 + 90 + 4 / 34 / 83 + 91
    cwTHnqmAJP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'dd94fa3bc044bab2eb0618aa25c31a1df1f224abd2751c4c75f6278d9356d8f9'

def decrypt_and_execute_COXsqjGPAb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'dd94fa3bc044bab2eb0618aa25c31a1df1f224abd2751c4c75f6278d9356d8f9':
        decrypt_and_execute_COXsqjGPAb('f450b2457ab10578c1a098df4e1528a0ae930245ca7cc0d456738d44e2681cf41abd8dd0e0edb4c306381d965bbe912044004c3533c0b7eb867904efd1ccd2e0')

    def yLxUeOMear():
        52 - 49 / 42 * 22
    yLxUeOMear()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1b15a236ed6c82f3b041fef3bdf45e7d058f57837335451c841ed0725dc29d75'

def decrypt_and_execute_FKpLpJcmEJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1b15a236ed6c82f3b041fef3bdf45e7d058f57837335451c841ed0725dc29d75':
        decrypt_and_execute_FKpLpJcmEJ('9f9b8d04702a2353a6e7f07d45e78ff7b598ee09aa76dd30f4c94222a07d7e2162a7ee6522003942c47c69b975e284ec35f473b2bfef90b557c20e56f2a21453')

    def nOFsQwcsGc():
        71 - 71 / 16
    nOFsQwcsGc()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1ca1c1c8e729021178b49a189faf34992432a9c332b5af5704f6d034be40c2c4'

def decrypt_and_execute_UQFsDoQgVw(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1ca1c1c8e729021178b49a189faf34992432a9c332b5af5704f6d034be40c2c4':
        decrypt_and_execute_UQFsDoQgVw('5de7a739e5ec13d434d68b23f5454deed25b19fae602d60af814ffe30fa74dde2a345ee28aaf365936e3dcdf3aae0e7fb70589f27b46e95edfaa0ed14d39d70b')

    def xpparjoYfS():
        72 - 86 * 90 + 4 * 87
    xpparjoYfS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '6b80aa6d8aeee6fd5279d7a828865d32ba61f3cb145dee1fbb3218607f7ac697'

def decrypt_and_execute_EEgymptrrT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '6b80aa6d8aeee6fd5279d7a828865d32ba61f3cb145dee1fbb3218607f7ac697':
        decrypt_and_execute_EEgymptrrT('7cfaf23885c7def9e90b41e3114fc609ea80f72d07b9f47c8c5d71f09252d19f5245fbad1e1bfd8de6a51da021df09f09e3d59a0251a009bdfefc88d64b095e4')

    def VMPhiAOuBj():
        51 / 30 - 59 + 68 + 42 - 95
    VMPhiAOuBj()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c9d22d3a3a4b501b3a91d55374b89d5d1c323ce702c0f121d098c7343a9e186a'

def decrypt_and_execute_HLXsXoEFFz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c9d22d3a3a4b501b3a91d55374b89d5d1c323ce702c0f121d098c7343a9e186a':
        decrypt_and_execute_HLXsXoEFFz('d0d30b1221a715bbe47f5425c0b7856975a06777c08fe8cd90a47d05d856edabcb37dd4af1adf4a6b262be2b51c79e2e6fbfcfdef7ba13dd6a349a25cd348de1')

    def EHYoecHJhK():
        50 + 7 * 47 / 6 - 99
    EHYoecHJhK()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '08db5b2ed85b6d61d1f396a13c28bc50a6c6ffac44736ceb579352cc6d253926'

def decrypt_and_execute_TTmutbbjdr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '08db5b2ed85b6d61d1f396a13c28bc50a6c6ffac44736ceb579352cc6d253926':
        decrypt_and_execute_TTmutbbjdr('93b71accc8b894e642b541eabf3974d41b1f0d64c24e43f24313d8ec5753a9139616c477aa204ec18448ce9f9784aa3ab855f9a9016aac8e62588175439910fc')

    def BEvcSbcAco():
        6 - 22
    BEvcSbcAco()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2a4da4648f109832ac17464e6b73da905769df69be21656d4630da4569597db8'

def decrypt_and_execute_StomkXouLA(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2a4da4648f109832ac17464e6b73da905769df69be21656d4630da4569597db8':
        decrypt_and_execute_StomkXouLA('1bd701306137d9897c1d0f7739430a06150373ac73e2e766e267bb6e794a56a91ebdc72213b8594aa4c06937365f59a3546342521c69f5270c0fc75e51ed1c88')

    def WBXUjIQkER():
        100 + 79
    WBXUjIQkER()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ed18902b809acb22be8c04a5c940eca03b0c4f0668bcee5ab639e1101a4a0a8c'

def decrypt_and_execute_IvuBYDcHnI(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ed18902b809acb22be8c04a5c940eca03b0c4f0668bcee5ab639e1101a4a0a8c':
        decrypt_and_execute_IvuBYDcHnI('7115bcd4f13a51e4ba9f25bb33e3120bf94c71506ba421b5da3d3cf5170f25043f565c38084bdabdfafc1fa1ee06b47cbfdca72ebfa74f8180a4480cffd49d2c')

    def FyiwKYnZvo():
        84 - 29 * 65 * 60 / 39
    FyiwKYnZvo()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ee1991f9a0a5a34f521121117e09e850f5a2cc8f3c7d562194c56e25a0dddb46'

def decrypt_and_execute_yBxYZRyBRY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ee1991f9a0a5a34f521121117e09e850f5a2cc8f3c7d562194c56e25a0dddb46':
        decrypt_and_execute_yBxYZRyBRY('bdd7ccde3569e9c724b41e92e225bc420b8af77393223b07cfb2dcd759f1ef9250d4c9c23ebc1f72d54bb1c52fc859ea577765ca8353ce1af471df99295e8d95')

    def KoGElxiWCg():
        37 * 51 - 55 + 8 * 74 + 50
    KoGElxiWCg()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'fcf669fee2070015ba6bb0b0666046c6e9c7b2646a5c1acbc58d86114b98cfbd'

def decrypt_and_execute_JJAJdtXpfw(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'fcf669fee2070015ba6bb0b0666046c6e9c7b2646a5c1acbc58d86114b98cfbd':
        decrypt_and_execute_JJAJdtXpfw('8269c330abc012946dda9e047af1eacb057d069500416136f915e80778b0a1bfd9ad723ddd73a8771b42b406b3bc11c3d589f7a00a0dafe88c2406f3f07348ee')

    def bIKAMtYvkq():
        80 * 22 + 24
    bIKAMtYvkq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '98964a4cb6f493d52ca3c2544b712580b019077b814e784b66fbbdbeb84a2e3a'

def decrypt_and_execute_sqRXXqsiMC(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '98964a4cb6f493d52ca3c2544b712580b019077b814e784b66fbbdbeb84a2e3a':
        decrypt_and_execute_sqRXXqsiMC('2e42420056f5dedaadfdf6b7158b3bc3cc5350916ec03a0329701d297bc957a70f23091d9be7b2791d66e5d34f04bec0ecdb448841e33852d24df83135e45bf3')

    def EsdmVvloJu():
        34 * 64 + 73 + 9 * 19 * 30
    EsdmVvloJu()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '29cef527122cafc05eb3870323b55e02cd01e5301bb05f94d4ea971184d97166'

def decrypt_and_execute_gcDzAVuLSB(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '29cef527122cafc05eb3870323b55e02cd01e5301bb05f94d4ea971184d97166':
        decrypt_and_execute_gcDzAVuLSB('adaf9789a44867a9121801c0b5c68236039bdc5d09cfc5b273e340aaa6e6de2437a9a393aeb9bace110bf46effc5c08b5b17163cbbba12c7442bdf7a6a5aa7e5')

    def poZvaZzCCj():
        72 / 78 / 75 / 56 + 19 * 81
    poZvaZzCCj()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'de062c8f17a7e7999e5e67ada640c9599a616c13a4451c3ffac25a3bdd68a1ae'

def decrypt_and_execute_BbKRuGzaXL(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'de062c8f17a7e7999e5e67ada640c9599a616c13a4451c3ffac25a3bdd68a1ae':
        decrypt_and_execute_BbKRuGzaXL('d70bdbb0e98729c59e5ba5510594b65480d385969153f547e1de8f7c0fec664d326e61e39bbb782c7c17a05642172222972bc4a93b2f3435556673f677d30176')

    def KOrPAzhXAJ():
        13 - 8
    KOrPAzhXAJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8fc4dd56c3a49dd2c7b87b41db42b94653ddd6870aedfe32a97aa055e7972957'

def decrypt_and_execute_JPgDAlCqzX(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8fc4dd56c3a49dd2c7b87b41db42b94653ddd6870aedfe32a97aa055e7972957':
        decrypt_and_execute_JPgDAlCqzX('f5f7e71de1f37a262fadc476226e2b60d078cadc68f5198be959f3bc293c081412e59430876ba8288d163606a5520f1205b4f8f289b1e5604b3f4d02bcb26a57')

    def AtDkJpYFYW():
        5 / 7 * 49
    AtDkJpYFYW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1c42423d887f764ae7a6cc9e95b57a842cf40753b1ebbf89b8ee25ecf350dad4'

def decrypt_and_execute_FzcZhvJVli(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1c42423d887f764ae7a6cc9e95b57a842cf40753b1ebbf89b8ee25ecf350dad4':
        decrypt_and_execute_FzcZhvJVli('34f639e7c987c86b5e207464d7c64b050d0fdc9fe67102076f07bad0f35fb634ed61e447d2dc2a047ce426b5b6fbb8b6bfa96f37ef7ab8fed650fe6bfe9917ae')

    def WRxajcQQAM():
        31 / 79
    WRxajcQQAM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9f0a08fd5a63bebf5a86b9b3bab2104fa3a3dcc455a7fb8bad4fc2e91abb9b2a'

def decrypt_and_execute_JTQjbLhJuS(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9f0a08fd5a63bebf5a86b9b3bab2104fa3a3dcc455a7fb8bad4fc2e91abb9b2a':
        decrypt_and_execute_JTQjbLhJuS('7c3409215b55aa6ac446d44a8c2c2a82e1c84970c7aa9074b6efd8bac2fa830e7919fb729adda3ceedf3be5b0d25b25a2429c35115040782c925b9e9491909dd')

    def zcjsLbmmpO():
        24 * 50 / 10
    zcjsLbmmpO()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '928d0365a6c6b30a6c4601c8ce688ec6785bbf33b2cc80fcc2a1e4b4a2a23327'

def decrypt_and_execute_XAjWvUHEHf(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '928d0365a6c6b30a6c4601c8ce688ec6785bbf33b2cc80fcc2a1e4b4a2a23327':
        decrypt_and_execute_XAjWvUHEHf('6d798fcc4478365a1e42bfeb1b585f10188e40685d6a410a100e09fa9c828ebe9b2723180480f5989f9dced8e844ae64b2c81bfe7714fce9ce094062e6bed130')

    def EAGckRunhC():
        66 / 58 - 30 / 44 * 2
    EAGckRunhC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4501d624eb1d51957bc22b69077c69df51602ca388dc7ea853426cf73e850225'

def decrypt_and_execute_YSUGLqQjyN(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4501d624eb1d51957bc22b69077c69df51602ca388dc7ea853426cf73e850225':
        decrypt_and_execute_YSUGLqQjyN('559d9715da8dfe5333e63479841bec84af47b76446373cac90d4b8bc50130f130fb617309717396349639e0f63fdaf4988d96f425ad18c7c54b179f9aaa9ec75')

    def TfTFRQFLzH():
        92 / 16
    TfTFRQFLzH()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3ec3e216e16b23e0a944a93f7d0eb30314b8e80e434a6565123b574184914e3d'

def decrypt_and_execute_GHFbIGrxBY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3ec3e216e16b23e0a944a93f7d0eb30314b8e80e434a6565123b574184914e3d':
        decrypt_and_execute_GHFbIGrxBY('4fbec8cbdd319d3d4bfe46508d91e9ce184389f73683ce198e29e5edac4f80f3b1630fb49d06e60318261cb6f6f92890338f09fb44d9d104a62ed23aaf0815ae')

    def gLTZfmVtlB():
        92 / 20 + 76 - 87 / 11
    gLTZfmVtlB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '70d3b74868e9017bf876725ec73bcd8405596a9b21bae0c548e32dda3ac726bb'

def decrypt_and_execute_rrvNTiIEfU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '70d3b74868e9017bf876725ec73bcd8405596a9b21bae0c548e32dda3ac726bb':
        decrypt_and_execute_rrvNTiIEfU('c4f9d832db3df71d26b2e0b5cb13dbc97cb631a3fefd40da7682c9e8b2cb753275d31ce997eb8585a24970f02b277aaa93c57b21ef2a69a430b7960711c2ea93')

    def qdAvlnGBsk():
        16 - 52 / 52
    qdAvlnGBsk()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '90ca936f2a4709eb3958d442001ae8c716e64cea0528c8733a1707ab65fd54a0'

def decrypt_and_execute_dyJFkSlckl(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '90ca936f2a4709eb3958d442001ae8c716e64cea0528c8733a1707ab65fd54a0':
        decrypt_and_execute_dyJFkSlckl('22ca8a742e354a00b7a7075050d1466d61465e5f30b08547e308d7840abb43c8a303883c2bc12f8bc6ce346acfb45ec8ed2ce48e37b6ef0766e313f13d27ce4e')

    def RHIKbAOJUY():
        36 - 28 / 83
    RHIKbAOJUY()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5ddf06c4ddac1ce9289171e97565ff2f0c0a205d5b265ffa528f03ddecde0f22'

def decrypt_and_execute_LeWTmtafbc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5ddf06c4ddac1ce9289171e97565ff2f0c0a205d5b265ffa528f03ddecde0f22':
        decrypt_and_execute_LeWTmtafbc('174d7e5898885750ffabea401b87e3c99de4f394f14cdc8aa75f44a23d16e8a02ed578af11619636ababda273b9fddeaf3ac9b2f50aa3d2eb0014ebc369ac8f8')

    def WFvWZuVQGH():
        31 / 90 / 23
    WFvWZuVQGH()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5a3c7b486df3d621a139be5fe1486cab0ca2e8c63cb14d41e6def44b1c6399ca'

def decrypt_and_execute_KGesTNhRkc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5a3c7b486df3d621a139be5fe1486cab0ca2e8c63cb14d41e6def44b1c6399ca':
        decrypt_and_execute_KGesTNhRkc('024695923c295800fbd30bbf36c99800a548fcb3c40dcc3595108bf5881da20faccdca9f7b0a55c06f850132737c01b5cde9dfc7911e7c071235129bb4a43bfe')

    def xATVxfJsQD():
        85 * 8 - 85 * 79 / 80 + 76
    xATVxfJsQD()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'da1624f74ed2409d0c01d2b32944a1974a78d1de1e94fdfb6a1986080cac1e24'

def decrypt_and_execute_YbwWxNzbvo(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'da1624f74ed2409d0c01d2b32944a1974a78d1de1e94fdfb6a1986080cac1e24':
        decrypt_and_execute_YbwWxNzbvo('ea69b322f6e3969c7d257ae6a85a3471a26cb9e04478a85b36fe87d00a2e767d50f2d31d3e72cbbc02bbdec3ed1471cf1e078fe874595f79508d6725349f19f1')

    def sDKCpNrkHF():
        19 * 27
    sDKCpNrkHF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '36d15844256a69ac1aa221cb7a08f445c553bc3a900b684a033b4065550c035d'

def decrypt_and_execute_IhuMZCJeFZ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '36d15844256a69ac1aa221cb7a08f445c553bc3a900b684a033b4065550c035d':
        decrypt_and_execute_IhuMZCJeFZ('6e8d576d74ab01fababb0c1836decd47ee00b22e8874e0582deee6ec85de258cdd58208e33a5c8f87dd6a3d93d2ea860d2dbefaf1f19edc30940be27420eb353')

    def CCGNqfIOvv():
        55 - 7 - 15 + 57 * 44 + 9
    CCGNqfIOvv()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a6430809acae0d96f3309c63ce096051d507efc1c85485a75d8ab6b3fd939911'

def decrypt_and_execute_udZLJiGuXQ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a6430809acae0d96f3309c63ce096051d507efc1c85485a75d8ab6b3fd939911':
        decrypt_and_execute_udZLJiGuXQ('369a3e9e09fa283dc851fed7a06db55cd536901e212854eb51e9802f24bd3b4b901e20b6db1d8760e8f5bcafecb263097c976d86db46bc58015e19dbe3c0b650')

    def dpQcjHVsVp():
        56 - 87 - 50 - 44 + 21
    dpQcjHVsVp()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '640f3ad1a1cfa6ccb60af2aee64666785a5a5a38c7c8b4241464df03fa0fa25f'

def decrypt_and_execute_ycuCfYMXaA(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '640f3ad1a1cfa6ccb60af2aee64666785a5a5a38c7c8b4241464df03fa0fa25f':
        decrypt_and_execute_ycuCfYMXaA('cc4b3564a9947cf38894eb06872178a98fa5de9a3900940e53fa2ee04ae45775c5de3b22ad3bc51143336957d38dcadc17cdaac9b76edeed564ed2458c8292d2')

    def nhKLZuKZAQ():
        30 + 84 / 41 * 78 * 31
    nhKLZuKZAQ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '44640aba0cbd1a8ebc04b6f9006ae9345ba02a0a901e0e83d09505e4450a256f'

def decrypt_and_execute_mlkrNJWegU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '44640aba0cbd1a8ebc04b6f9006ae9345ba02a0a901e0e83d09505e4450a256f':
        decrypt_and_execute_mlkrNJWegU('302e90c54e58b4386d7a2b553ee0954a17e81938e83de204c91ec10f66d9e4ebb1638ca474f7850ff0ab0b8fd91581a27f4d5bbe312fc1ff551dce076b1bad58')

    def GftfRrNYOR():
        8 / 48
    GftfRrNYOR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '825a486e49c86e728faf99078c57fc58431a39e289755aa17e26ea29ca88e1f0'

def decrypt_and_execute_vVcPHxIEZx(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '825a486e49c86e728faf99078c57fc58431a39e289755aa17e26ea29ca88e1f0':
        decrypt_and_execute_vVcPHxIEZx('2239de0d0fba07eea9fcf45ee7953020f0dea6d5c82492b3d729f5e65bb588a3c912723c07a2366f040eb4d4a36374f89d50616490ec1d4b96bdc0efb4a04063')

    def UBoWkMefBm():
        70 - 2
    UBoWkMefBm()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '872d7134de749c78b015d6f585dec1143a72256ebc39936ae66d9d2999ef8bf8'

def decrypt_and_execute_BpMDlvYwWb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '872d7134de749c78b015d6f585dec1143a72256ebc39936ae66d9d2999ef8bf8':
        decrypt_and_execute_BpMDlvYwWb('5324df2ca97c414e5fef98b25370ceace8186804fab49ac63c258bba3009ff83563c828b0614fd1420f110f4fd60e5bed5983b5ada61a44d80e36e8714fdb580')

    def HOjptcyyXT():
        76 / 52 + 2 / 36 / 12
    HOjptcyyXT()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7b38963bbde06523a4846fbd84c3ad896bbcec7e77ef6484f11a15150fdf88ee'

def decrypt_and_execute_ctKIauXhwx(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7b38963bbde06523a4846fbd84c3ad896bbcec7e77ef6484f11a15150fdf88ee':
        decrypt_and_execute_ctKIauXhwx('0f9ae575fe5475e00eecf10c4938ffe5720dd7d487d24b7f7f00927c9a5c6ed079b823b75d847be7a32b750e0e2bf9dc9cc7f43d3730207ece15d6b10918fbba')

    def qYhMMTSavy():
        10 / 63 / 58 * 87 - 39 + 67
    qYhMMTSavy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a6746f87fdeff50be236baafe4a2420ca2fa877bf493f83b117aa8559af8fc2b'

def decrypt_and_execute_LIMmowqZOt(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a6746f87fdeff50be236baafe4a2420ca2fa877bf493f83b117aa8559af8fc2b':
        decrypt_and_execute_LIMmowqZOt('51e465dfa926b6747687e0e233cd26ec25cbd8927b1120afa962f60ee36c4f34f6babf9f79ceb79dc6a9db338c62ab20212a0c4df2395a6822890216f4449eb3')

    def KIFugmlcaH():
        37 + 14 - 94 * 91 - 82
    KIFugmlcaH()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2919705ec80d8475497fa87d859a9ff83ce5714c308e2453119979d099c8ec64'

def decrypt_and_execute_OGjcgcAdEk(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2919705ec80d8475497fa87d859a9ff83ce5714c308e2453119979d099c8ec64':
        decrypt_and_execute_OGjcgcAdEk('317c8963393f8db56b46c94a1521412a7daade01121b931ed75c14e7b7603f42475e2cc495efc52ecce4e596767d4ae83c12df56e450e010805e9ce91838b345')

    def EtFLVWALIC():
        8 * 9
    EtFLVWALIC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd2cf84e2b9ab1878a09a82efd859329f961e3ff75737ee5c73a3d4ee337b607a'

def decrypt_and_execute_HatlkVWGBr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd2cf84e2b9ab1878a09a82efd859329f961e3ff75737ee5c73a3d4ee337b607a':
        decrypt_and_execute_HatlkVWGBr('e70b0b64a977a00193c5856399bae5e0b2a482b57b7efea6dc3adccb991f48587f08a4f0505a0bd17b6505e2af71543f03d2baf7537418cc4eefcdff48f2ac44')

    def xpqhLQqPUI():
        43 - 13 / 93
    xpqhLQqPUI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b063df85b60ea2ef3cd4267387a6421ac1eaa2d19f0f971c5059e6de128a4c05'

def decrypt_and_execute_HZqfrvANiG(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b063df85b60ea2ef3cd4267387a6421ac1eaa2d19f0f971c5059e6de128a4c05':
        decrypt_and_execute_HZqfrvANiG('cd4edec96dfbd436f0c9577d49b048d74aa4bc66bf7ee6cb9f67961968600a9c85d6cc3d82f1cd4d7a5df10cc740c4c9eecb0a07404db1720ee2ca5b7fcafc55')

    def IFafURZRoi():
        7 / 70 / 13 / 65 - 98 * 10
    IFafURZRoi()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f1fb44315a10ec4ade4373d9af8280211a834d54c70aaf1a6bafaf7392bd03f5'

def decrypt_and_execute_GGlCMjbxQp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f1fb44315a10ec4ade4373d9af8280211a834d54c70aaf1a6bafaf7392bd03f5':
        decrypt_and_execute_GGlCMjbxQp('e3096166c0f269ed6cf9aec79c4915c70d9aaca5899601cd03a46498216709870ad49ee07f49505fb4514d3fb7e839d61bb0ee01693cf206169e5a548d565abd')

    def YlAGVumoJd():
        96 * 15 - 87 * 23
    YlAGVumoJd()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'cb47fa7d8c04626bcfaae5b04c63e2d972ae12ce2dc8bbdceb3a44d4dbae7c2e'

def decrypt_and_execute_VKwCgOlAQi(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'cb47fa7d8c04626bcfaae5b04c63e2d972ae12ce2dc8bbdceb3a44d4dbae7c2e':
        decrypt_and_execute_VKwCgOlAQi('993c8d7ec7e181c94f42fa9dc09f47c8b606c54d435bd6489eca1f42ff6a5739050378f456d36a43a78bb26bff5e15428360163ccdd51b81b2aceec0e20c7f38')

    def KjCVHcQuSb():
        49 * 46 + 16 + 77 * 43
    KjCVHcQuSb()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3b46307fde89f1c3384964879ca7bf282fabd960f41586586c5abe166fa4acf7'

def decrypt_and_execute_EwzWQlzmum(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3b46307fde89f1c3384964879ca7bf282fabd960f41586586c5abe166fa4acf7':
        decrypt_and_execute_EwzWQlzmum('12b8d67cbb75a9edd87cd5492d90fa875a2ca7b45f4333489192a6f1385454bc05a8a00e6130ef71d0ac6d465c3260622b3fc993b236bf0494615d60d3a2f85e')

    def tHBaRDBroc():
        98 / 2
    tHBaRDBroc()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ddf01ada0ffda27a53faacc8288dd8aeb683e7b46deb8f4f64345bebf9012f81'

def decrypt_and_execute_OsUYCkkRsC(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ddf01ada0ffda27a53faacc8288dd8aeb683e7b46deb8f4f64345bebf9012f81':
        decrypt_and_execute_OsUYCkkRsC('48d9eade0a28c2af9c60810fff658362f65d34d48130fc08fe21d69374b4fe80d26e7f220aaf1e866cb6b060971b5b63ae5d94f404f31876baa1e217f2d7296b')

    def SaJYmoGpmf():
        27 / 76 * 6
    SaJYmoGpmf()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '43ed2863023a30769865f2cee6ea04acf09dc816a0a440dd03f7e99440a588c8'

def decrypt_and_execute_vDoFcNoQiV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '43ed2863023a30769865f2cee6ea04acf09dc816a0a440dd03f7e99440a588c8':
        decrypt_and_execute_vDoFcNoQiV('d1f0fd5b6fb97be88de596b9bcf29c1373486ef7d9f03a6fc2edaf3a6fc04e797fb37b2902aac3a7cc6dd21688268127efbe29a0d7e2243b1c6e69d41a4e7b98')

    def FAGLdzwcVP():
        19 / 64 * 43 - 22 - 56 + 69
    FAGLdzwcVP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '51ca74a7e0a78871a80d419099e39dec9dd55f7c1d0ef3a9a04be014cf8422e9'

def decrypt_and_execute_ohKzHYxHAz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '51ca74a7e0a78871a80d419099e39dec9dd55f7c1d0ef3a9a04be014cf8422e9':
        decrypt_and_execute_ohKzHYxHAz('5dcc216ea45823a506d6aad941b3ca9d073639128bda74c6b20fb350ef91cf655a3896fb4b6fee4b550a21fcfe2d4bf7406fb8af4cad56a0f09ab229b01eb419')

    def EaiOPudOXt():
        27 + 32 * 59 / 62 * 72
    EaiOPudOXt()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'eca9118438ee52fde9045c4e37188f1c791e336844d44e13e32c033fc224c962'

def decrypt_and_execute_rtEFoiReQw(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'eca9118438ee52fde9045c4e37188f1c791e336844d44e13e32c033fc224c962':
        decrypt_and_execute_rtEFoiReQw('b139c00bcc2839648b0736c78a14bffb199f245df26cec3e31c70237b3e2b0ac8627cec23703e2aae6464f356f2873df91d4da3a550d2a45063e6c0773b296ad')

    def SoUcGzgLjf():
        52 * 35 * 62 / 81 / 70 / 2
    SoUcGzgLjf()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'cdc6394ae2efbf953d245d4ba9d9fbe6eb0e6d053ae57b5ca5a9f9e12d5f8185'

def decrypt_and_execute_VFkiEHpqVU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'cdc6394ae2efbf953d245d4ba9d9fbe6eb0e6d053ae57b5ca5a9f9e12d5f8185':
        decrypt_and_execute_VFkiEHpqVU('723f527d9da985d00e070c385f4784e4833372b86c79b65c08af28809d5ef87d80dc6f955842536b5001b5441bcced1dfa4bae1ca890355c1250001f104a6d73')

    def HsoTgkPvvL():
        12 / 52 + 61 * 18 - 76
    HsoTgkPvvL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ba54d6026aed58ea42d857f764cd5ca486f22222db1796cb5c1073ed9ef210c2'

def decrypt_and_execute_EMxAHZowCq(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ba54d6026aed58ea42d857f764cd5ca486f22222db1796cb5c1073ed9ef210c2':
        decrypt_and_execute_EMxAHZowCq('e0cce1666ba6fa702c1f7d56b7300c870ef74b9789cc4e7ef551b9866ac818afe23645dbf5fcc4a4a0c928b8736e2faf6a4476d0d3a8e15728b8692b7caa2b72')

    def WhtAAfJczY():
        91 * 44 * 17
    WhtAAfJczY()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '62d8211c12e3dc36b3f677f8eb93a94084284b42b51546fce504feec3dfc6f82'

def decrypt_and_execute_INpZQihXgj(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '62d8211c12e3dc36b3f677f8eb93a94084284b42b51546fce504feec3dfc6f82':
        decrypt_and_execute_INpZQihXgj('f18140c8af93654fda653bd782fd5f29ebad669ce09591087c22297bd5a4422bc7fee252fe41883d3888bc2116c6dc94773cd92e34b99a248d27edb7601d1b9d')

    def dkXAYBhREI():
        74 + 100
    dkXAYBhREI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a0adb889b061ccdfb39ce19b70ad54854cf64b6ef86711fb8b7095c47c845b90'

def decrypt_and_execute_dzHPLvzEhU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a0adb889b061ccdfb39ce19b70ad54854cf64b6ef86711fb8b7095c47c845b90':
        decrypt_and_execute_dzHPLvzEhU('3230fd05f4165d61ffe1d91d82c30bca81966dc16a75a257786224e5035dc4a73d61ec79bd63ab30c513ec9477c748d9d927db98bcc7574eff1d0cfcef80007e')

    def tlgpszjfxW():
        11 - 4 - 74 * 65 / 36
    tlgpszjfxW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '194d9b4cdc2978b046beb7d131cb7eb3756666c80af721f301265afa9803913d'

def decrypt_and_execute_YyWBQXszOa(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '194d9b4cdc2978b046beb7d131cb7eb3756666c80af721f301265afa9803913d':
        decrypt_and_execute_YyWBQXszOa('cee7db4e0f21faa8069625b9b40f328ebddf69532373fef2896954c9ec7e2e40f7f088324db8e195e1f5c2fb3b766e94f22fc38bbfd268afbba4f1585c4cba61')

    def JjPmrwAOQe():
        12 + 6
    JjPmrwAOQe()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2ef1a96e8b7afa4e14093239b844ca1fb6f1bb824abb453ced25665d24aff8ec'

def decrypt_and_execute_DrWSxPGkya(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2ef1a96e8b7afa4e14093239b844ca1fb6f1bb824abb453ced25665d24aff8ec':
        decrypt_and_execute_DrWSxPGkya('64df4598c0bc5dfa8b261ebe41de84c32e8550816179c3420c65a1447f515ed2cbacc3d291e88ab678d31025f33e35394fbbd572dcac0994c44b8e76b0eae83b')

    def XhqvfRcBZP():
        2 * 55 * 30 - 61
    XhqvfRcBZP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '44cad64061097d4d8d142b4056f391e9583f526578d9f0f1616b54c2c42099cf'

def decrypt_and_execute_svOBgftRYA(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '44cad64061097d4d8d142b4056f391e9583f526578d9f0f1616b54c2c42099cf':
        decrypt_and_execute_svOBgftRYA('f4332b98ee15f08c95f20773c2ddbb061573f6ca5779814cbae3230d29bd72130f8f7f3278570cd0b0e9c627a6c91c5d1ce5cf9ae3122afef7ea2cdbdf4dec41')

    def DIXlhshNjX():
        83 / 86 + 22 * 100
    DIXlhshNjX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1670d5f58316760d1576d95ec495fc560e4b42e0347a45882fd3a0334b4eec9f'

def decrypt_and_execute_eqABvmoSAp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1670d5f58316760d1576d95ec495fc560e4b42e0347a45882fd3a0334b4eec9f':
        decrypt_and_execute_eqABvmoSAp('c12bf2256b985b5c0b4164341a4a42bb5e8ae7715aca4a7659d1f6bd748c07657df4d7a333caa4afd9b2b1fc62ba96c54c37a61394e848060ffd50bfe3a51935')

    def FzqImjiobU():
        70 - 86 + 38 * 90 - 66
    FzqImjiobU()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd5e564da323f4bd0c31bf985e1da7687a5fb438d6727ba98d693f430cc0ffbe4'

def decrypt_and_execute_zMRZymTdtD(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd5e564da323f4bd0c31bf985e1da7687a5fb438d6727ba98d693f430cc0ffbe4':
        decrypt_and_execute_zMRZymTdtD('4266bb6409ebc2b7c9d7d5f4569af23f03d231c765cd206d701111e16dd557b7a741eb6d36643ab4151c3f1ccfea098707e56d9abc6bccb8194692f4ce30a4b0')

    def DwjARsPeSB():
        15 * 74 / 30 + 3
    DwjARsPeSB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2e96247e4328bd3dbe9ff4b89a27691ed79742948b995c53c8265cc1c80f0e46'

def decrypt_and_execute_wVrDRcxIaC(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2e96247e4328bd3dbe9ff4b89a27691ed79742948b995c53c8265cc1c80f0e46':
        decrypt_and_execute_wVrDRcxIaC('20f2fd4f2583dcf8d00ed70a974ce0bd18a9380e9ecc8fd541bf967241681ff1a274d7338dbb818ff0b9b58d45e31f826a650c446dbdcd74384d4b1d9cca0896')

    def lMIfdpZeOB():
        19 / 16 + 81 * 26
    lMIfdpZeOB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f7d63446897fd18be88e0f2d9263aa76cc654434766657699d8d6118d4f0ecc2'

def decrypt_and_execute_WgBFoDiiFD(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f7d63446897fd18be88e0f2d9263aa76cc654434766657699d8d6118d4f0ecc2':
        decrypt_and_execute_WgBFoDiiFD('ac7e05f61296eef09ebbffc49fde9ed7e9b882403eb2185e2db19cba23833c32bea3501e1de99a28e27bba744c9742f197b456da2785ac7cc46baa6f27eb7af8')

    def MvpZmKEWoW():
        29 * 75 * 33 / 66 / 24
    MvpZmKEWoW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e16d4f67056aee826b38a75f85965f95e693e94a61409190a063b5e650a0f6c0'

def decrypt_and_execute_mpaFXaqcZm(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e16d4f67056aee826b38a75f85965f95e693e94a61409190a063b5e650a0f6c0':
        decrypt_and_execute_mpaFXaqcZm('162478d9c013f35304725898732eed064e9a5be6db569af9ca154d2460fe97419635a0af6afbad6f07727c8520bb2222bd12d34f33076b29b4b2b97f45a2b4cd')

    def rWpxFrTkBq():
        52 / 18 / 3
    rWpxFrTkBq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b8045b4ffd509792cb7e4609d61e1a75c84aff21a0701b2ae035a71a4e4bcec3'

def decrypt_and_execute_agYkCGMldC(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b8045b4ffd509792cb7e4609d61e1a75c84aff21a0701b2ae035a71a4e4bcec3':
        decrypt_and_execute_agYkCGMldC('78a1393f302791b9f323411211fc8d79ddf104c8ebb725812d557a5357b47f195eca60b04838355345a5b96883c53e43b591208078fa4d74cf1e994847f60401')

    def BBKuCQWGeh():
        1 / 2 + 54 * 98 - 57
    BBKuCQWGeh()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a3e1e41764c6b093a497972e0ea7719cb468685137791c58a7f7378736fc51ed'

def decrypt_and_execute_ssiiCepwXL(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a3e1e41764c6b093a497972e0ea7719cb468685137791c58a7f7378736fc51ed':
        decrypt_and_execute_ssiiCepwXL('e2227aefe338f80682b209b2251b87eae71eae6b4aec03cc8a3af46d8b5a649d47df6ce4d2001f761bf24d3dfb8db0b69d6ba2f2c3928e58e0978d73182bb984')

    def BpYeYvCgJv():
        95 + 54 + 40 - 41
    BpYeYvCgJv()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '25220723f575adedd71ae40c14e2639b30cde49a64528a90589aa0c9b8fc563a'

def decrypt_and_execute_HqxYTaIOay(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '25220723f575adedd71ae40c14e2639b30cde49a64528a90589aa0c9b8fc563a':
        decrypt_and_execute_HqxYTaIOay('4aa10fad8db0e0457b5014fdd3f7616e6ccc3d73bb67bde5994d7e0ca6809f2f6f761fd12b15afdf5fa7baa5d2af6c6e83516bb8e389a4a99cf11c36086c87fe')

    def ElbyvPbSgy():
        81 / 65 - 84 / 2 + 98
    ElbyvPbSgy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f50cdef299ecbb68dc34df818266532a47e78bb5c431e5c446e67443313127be'

def decrypt_and_execute_ywgoSnqUcw(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f50cdef299ecbb68dc34df818266532a47e78bb5c431e5c446e67443313127be':
        decrypt_and_execute_ywgoSnqUcw('fbe1b6a26adc94ee6619418fac81355360a39597d2ba1d12d3b6cd2b0728bda271fe1220f78186d529a678a5ce3189d37f5b876e451d2c372839d1102c83b44d')

    def RHYRxCxdDL():
        61 - 51 * 72 * 88 / 17
    RHYRxCxdDL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3572a1a6e40c7f0ef7cc97c31cb155d7dbfcbf4a6222ae133889d40ec2966d9d'

def decrypt_and_execute_CJAEKpVGTO(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3572a1a6e40c7f0ef7cc97c31cb155d7dbfcbf4a6222ae133889d40ec2966d9d':
        decrypt_and_execute_CJAEKpVGTO('f4dbe431717d5f5854200bd10dc7e90e24e84135e17451959396dfa545b99b16677e6789a26a2a94ed162a583173fd905b5825cd0459b552a2eeeae74d4dfb01')

    def XHdyVSGNbj():
        54 + 1 * 30 / 41
    XHdyVSGNbj()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd882ebbda7549b703b250754dc82443ac8e4ec69a021c1cf598c5f18463cc4cf'

def decrypt_and_execute_cyIxWZrpFo(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd882ebbda7549b703b250754dc82443ac8e4ec69a021c1cf598c5f18463cc4cf':
        decrypt_and_execute_cyIxWZrpFo('273c5ce22db1dd9cc6fd662d3f3a72d7cd154250cb3ec8def1ce34a0c21fc40372b335286177e277d4e668d54899ea34d759c128c0dca17944504f53ec0ef457')

    def BqGwRKeqfP():
        86 / 84 + 78 * 1
    BqGwRKeqfP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8405da712d8feb48f13840c8058344f4779bb9bd55094db289b607534a59e49b'

def decrypt_and_execute_kWTHMHhPyT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8405da712d8feb48f13840c8058344f4779bb9bd55094db289b607534a59e49b':
        decrypt_and_execute_kWTHMHhPyT('a6b82b80e5d4a5453309bf3518e67bfc6564ccff24f0fda07bff30440432f989c787daf9c1429b31528683983a203c8ee52dba5a4e0f793e8f95aac51b5b81fc')

    def GjCrDRIBYn():
        67 - 95 / 95 / 94 / 24
    GjCrDRIBYn()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a05e296a6d47ec477d47099df19260079e18c16d3469166173a2bbcb608863e5'

def decrypt_and_execute_dzbGPeAApr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a05e296a6d47ec477d47099df19260079e18c16d3469166173a2bbcb608863e5':
        decrypt_and_execute_dzbGPeAApr('14b4889bb9e31327c5640d448d28d16b35b9b708166a64f9d5a78cd8b450197421a770f30a6f3880daf924336043eac98aa7da8e61e6f3a420a4d30c360f33b2')

    def AIdfVIhilC():
        99 / 67
    AIdfVIhilC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '513ad5201d67d0239b55e3d64c91bf0799a4d40047730e2e7b8324c15475cb5a'

def decrypt_and_execute_vPMglMCfCu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '513ad5201d67d0239b55e3d64c91bf0799a4d40047730e2e7b8324c15475cb5a':
        decrypt_and_execute_vPMglMCfCu('5cbe32164b45c0548dd12397c5cca97075769062870ed883e2b09ae1057bf71f6d84aebafb21dcd685a1b5aec4d7a3ce377f66a269afd3fb38ad41411d809a11')

    def DSwcweyzVt():
        29 + 84 * 23 + 9 / 39 * 93
    DSwcweyzVt()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7393bbd94fe2474325ad1a88f390f31c7ba1f46c9aa594daa8eea100fce6a9a1'

def decrypt_and_execute_gDPuPWQuTA(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7393bbd94fe2474325ad1a88f390f31c7ba1f46c9aa594daa8eea100fce6a9a1':
        decrypt_and_execute_gDPuPWQuTA('fd2816003e61540e4fba48f114b30770c94bfe152cd21168f14c6795ded507b449537e1337944ec59b94f4f813af113f4a4275feceb731178de8149b8a796bc8')

    def MOCTDRoxTF():
        80 * 59 * 8 + 36 + 18
    MOCTDRoxTF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '6b9ed58ebce365f24b5fb54abf642084bf2c45933181ed5e3e1476b428ea5ddc'

def decrypt_and_execute_stUSbaOmHR(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '6b9ed58ebce365f24b5fb54abf642084bf2c45933181ed5e3e1476b428ea5ddc':
        decrypt_and_execute_stUSbaOmHR('44106d55a3b92bc3605ff646af4049014b0a051bc542c11b8bf2f30c0fff0cb35904f7eaa687913c2b4216ec39537f6b180f51d71201f7e5bcc8acb81e46ce23')

    def mkrlgMjGjw():
        88 * 78 * 29 + 67
    mkrlgMjGjw()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e9ad79c7f643a621cbb34f01a1b4a0a845914b6a9ec8eacf706212da431f92a6'

def decrypt_and_execute_jqmQQCxsvc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e9ad79c7f643a621cbb34f01a1b4a0a845914b6a9ec8eacf706212da431f92a6':
        decrypt_and_execute_jqmQQCxsvc('df8be0c3b9ca5f3e1ce19ee47ea6be35a4971d256055a3bd9dacf595aff085e1a160bb24cfe916b9a6cfd6b6cbe33a28958a58c31336410fb13c5d4e487512e0')

    def WTkkdQPnyY():
        28 + 36
    WTkkdQPnyY()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e52f8dcbcfa2a9f15077380bdb07e91173f48e132f16bf11d03f3491e33b9847'

def decrypt_and_execute_SPRZOxIHyx(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e52f8dcbcfa2a9f15077380bdb07e91173f48e132f16bf11d03f3491e33b9847':
        decrypt_and_execute_SPRZOxIHyx('973cd842aa92b710b48b968519187c4eb0f35fa5e78575ceb8fe90dda88f81530042431b14ccc64b68ac91497439ad8fc80ba3b9eac261feedc06ef8778cce3a')

    def OnOauisDzC():
        81 + 49 / 28
    OnOauisDzC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4723686843e0c60ff99ab0b017299399d237c3d01c7844a35fb6de3e7a0bbc2f'

def decrypt_and_execute_clxWzexfbv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4723686843e0c60ff99ab0b017299399d237c3d01c7844a35fb6de3e7a0bbc2f':
        decrypt_and_execute_clxWzexfbv('5eed788a732b745a9462bde653d392a72794ab261a96ee40dee3d7c5bfc662fa4d7239f2f19ebdc9e00fcfaaf46112fe0636e634ea70253a2ed409eee520d591')

    def jjkxdDXumI():
        6 / 56 - 86 - 95 * 28
    jjkxdDXumI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2dfa6cac5b1d1af25e996923c9e110ce1680d0e0add777958457704bb8b8126d'

def decrypt_and_execute_okWszjcNoE(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2dfa6cac5b1d1af25e996923c9e110ce1680d0e0add777958457704bb8b8126d':
        decrypt_and_execute_okWszjcNoE('8b557d7642eb8838eeed0f75f3fc068eb0b600d4e2296f501db496215ff80e6452199d9a7f5db656341611db43842b64a2e5eff940d5d0b15d4cad4c98122d7b')

    def DiQQOmgbdj():
        82 * 14
    DiQQOmgbdj()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5b9670fe70b3f6f02de78f58ab7bbe6eb4254b38a14b73507db90f0ad2a422b6'

def decrypt_and_execute_aBDUHxduwn(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5b9670fe70b3f6f02de78f58ab7bbe6eb4254b38a14b73507db90f0ad2a422b6':
        decrypt_and_execute_aBDUHxduwn('7aedca6dd1de9125b6ecdf81bb030372941ca2644eecb795dc69fc7bd9b1441fd78feaed0e7e0864f04f0bc6212f76b4ca7ad4a6545a23f73c1b7cc6ec8bb418')

    def duNXYEYKDU():
        8 * 35 / 87 - 31
    duNXYEYKDU()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd970d995271a6fdd91804bd1082be5ebc5bcf3ab6a404155a981ab7398a25a02'

def decrypt_and_execute_EbuklkIlYP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd970d995271a6fdd91804bd1082be5ebc5bcf3ab6a404155a981ab7398a25a02':
        decrypt_and_execute_EbuklkIlYP('665a21439b2d9f4140589817da331edc2df608c46e1574e27ba8df9b2a43ed3a5c454d8e39c2a0384cb1e51603b7a699d9c40018ed84fa8f266af6374c434ecd')

    def EMacaVCaWr():
        60 - 6 + 58 - 82
    EMacaVCaWr()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9f9f31fc4b1c520a2b764bff0fca23e7b21ac369423454bac9c5082ac0a0ecf3'

def decrypt_and_execute_GbzjecJHvM(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9f9f31fc4b1c520a2b764bff0fca23e7b21ac369423454bac9c5082ac0a0ecf3':
        decrypt_and_execute_GbzjecJHvM('a4fc1eb1cba9e3677a898114ff53b7d4993c5d5f92a2f75b2cf26b993bfd022028bf16ded282c7e250e0f2b6a012ca085e98e1f292ecdcb8fe3d5fd84da8f312')

    def OpAcxxtglA():
        46 / 13 / 94 * 35 - 80
    OpAcxxtglA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1685d7684ab9e637510794a3e6296da12a2c46f4a93bacfaecb13aebc5c158b6'

def decrypt_and_execute_fEebkjAHVU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1685d7684ab9e637510794a3e6296da12a2c46f4a93bacfaecb13aebc5c158b6':
        decrypt_and_execute_fEebkjAHVU('a1696836c1ecd304f1911599e3efcfae5d5cc5feb015d861d4794a06fdd10b90fe99dff19266ef6742727f3bab4664b31414af702e53dd7c1b459051265f523c')

    def KTDgzlxhDb():
        98 * 60 * 3
    KTDgzlxhDb()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1e3b89113ae3ed69f97f3f21091654b132d5ef66524bf6e60c20f752db85a13d'

def decrypt_and_execute_uDJLRDXCSL(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1e3b89113ae3ed69f97f3f21091654b132d5ef66524bf6e60c20f752db85a13d':
        decrypt_and_execute_uDJLRDXCSL('2c1d915535df373501a0846c6ac3c7272254d4ba21d442efd4e2e7776328d356c26b4789a1a785a5331eac7fdf4e26a83d447a23a74973ee0c9c0374e4ceb687')

    def BzrvyNjjFc():
        45 / 59 / 91 * 92
    BzrvyNjjFc()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '656fdf80c2a34081882ec3c0e3c04e8d3e112e63ef55336cab8293c25999893f'

def decrypt_and_execute_HLjvBDuVOm(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '656fdf80c2a34081882ec3c0e3c04e8d3e112e63ef55336cab8293c25999893f':
        decrypt_and_execute_HLjvBDuVOm('ec27ab0d37dd91bbf331a934216cdae6158ed122236b655b4252ecba3d75124531adbe9aadb69462c8f6d5be194a8ff7de124ff9499d4fd58eebc50947b7ee89')

    def TBvXCeQMcJ():
        91 + 5 * 97
    TBvXCeQMcJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5b06aff7323705ad63f2c76f282d26d23ab141732f547ec4055b348bda6ae54d'

def decrypt_and_execute_wVWHRdpCaR(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5b06aff7323705ad63f2c76f282d26d23ab141732f547ec4055b348bda6ae54d':
        decrypt_and_execute_wVWHRdpCaR('8dcf8039a94cd35250da7c361c0c04d8909b7184fb630bcbe746bd474c84b79281b124a82eb215e80e71659bcceec8b73e063875ff067dd0a1df73d1a8a701f1')

    def QSpNFXCvaH():
        58 / 22 - 65 + 7 / 2 * 81
    QSpNFXCvaH()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4fd8d9642be14d6e8628f26d1016d76d21354db7b7f5b76fea507664e7efa47f'

def decrypt_and_execute_eQcGBVbXrX(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4fd8d9642be14d6e8628f26d1016d76d21354db7b7f5b76fea507664e7efa47f':
        decrypt_and_execute_eQcGBVbXrX('94616e7d7e4e27b0eba545ac7124c4d4ea0f7a9220adaa037782e058eb5226838ef75b5dd10d03a12d7db2623c13aa0d2b7196a4e855131aeeb9648ed379ec91')

    def mphsTtoIwM():
        48 / 92 - 49 - 11 - 81 * 77
    mphsTtoIwM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7e6e40e96d2c9f9e5e215e13cd4291feaf76b7dc7e64f5224e6ae86dba92eeba'

def decrypt_and_execute_NMSTNHAiVs(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7e6e40e96d2c9f9e5e215e13cd4291feaf76b7dc7e64f5224e6ae86dba92eeba':
        decrypt_and_execute_NMSTNHAiVs('c65a58187d19e9d4aa0a16b1cf746e044ef0e871fdd175012a5cb9a19d2601273c7086a3e8462ee03af268ff2bb19b221fac1a0da2469048643aa05d402d3f40')

    def GeFvzJvZJO():
        18 - 75 + 42 / 26
    GeFvzJvZJO()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ac3d346682da5d0b5ba15492ee5fb69a85835459461dab658f912ba728ed52ec'

def decrypt_and_execute_lnQavGnUmJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ac3d346682da5d0b5ba15492ee5fb69a85835459461dab658f912ba728ed52ec':
        decrypt_and_execute_lnQavGnUmJ('be353ddd660c0c5eda710337a17cde3dc33f50841932628749c86890017e801e4a02494ce97df121e2efba9f77a47ba977d124c6fc5d4cd54e51926fc68e5153')

    def QmkMeQlusP():
        72 / 16 / 45 + 66 + 78 * 73
    QmkMeQlusP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c2bb327d1681ab56329058fd94a068685d5ebbff1026d046b377a9b587c19809'

def decrypt_and_execute_pRpcyVIoMY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c2bb327d1681ab56329058fd94a068685d5ebbff1026d046b377a9b587c19809':
        decrypt_and_execute_pRpcyVIoMY('976e1995693468bbca7f443d11aaf76b4764fc093d42a119334f1dd1edecb4f5d158e71a343e993c064361a526e8a1b81c2392d5922e32a6c62746171607c97d')

    def cKRJehZlSh():
        56 - 4
    cKRJehZlSh()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0a23a75970dce482dd21afb47c7b659fbbfd737f73fb25c8592e9abcd57c3243'

def decrypt_and_execute_zRJkYjQWOU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0a23a75970dce482dd21afb47c7b659fbbfd737f73fb25c8592e9abcd57c3243':
        decrypt_and_execute_zRJkYjQWOU('4d76c4badcf730426856a92bcc1cf2c97b8593f0cad7593a2b81c79e3edf7bb90590eeaed16e8c98d802aec14474e50a28adcf8388075fa91ed4fdfdd1dd7224')

    def vTfIsmdZFc():
        18 * 53 - 29 + 14 * 2
    vTfIsmdZFc()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9ed699c08da7cb3fa77c1dd1e5d0677f394598a8852a4dbd13a11f3c289fcf20'

def decrypt_and_execute_DaMRrLyhGg(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9ed699c08da7cb3fa77c1dd1e5d0677f394598a8852a4dbd13a11f3c289fcf20':
        decrypt_and_execute_DaMRrLyhGg('c4f1dfda7d62e959de44ddb06f3276b3e1a1f61fe619b4efabbd98bd16950c0cac84ca1a73566082e9b43e7444ef44fcda329ea1b0ef376da5e4a41a5162402c')

    def mhniLVEnPh():
        39 + 1 - 90 * 23 + 66 / 66
    mhniLVEnPh()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9e1b207e73794e5e104a156d85b6262ee75a7eac8c22998a491c0a7513b158a5'

def decrypt_and_execute_kPSOzKSswc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9e1b207e73794e5e104a156d85b6262ee75a7eac8c22998a491c0a7513b158a5':
        decrypt_and_execute_kPSOzKSswc('d55837b2456cb435818e7dc8d956a4776c6efbafa85dc8af64c209d165c03f6fd87b1fe8d3ed9c2584db91a4b1fe51c1a5fc03f7e4c6405e61caf0a271473673')

    def FwRrmDqpaB():
        92 / 7 - 74 + 40 / 74 / 30
    FwRrmDqpaB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a775808c2840ef9a3274b18e02c706c1b9967ea9584f8a3d0340b99396f04f63'

def decrypt_and_execute_stryIpCQYs(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a775808c2840ef9a3274b18e02c706c1b9967ea9584f8a3d0340b99396f04f63':
        decrypt_and_execute_stryIpCQYs('a5ae80aabf47771b39cbf007a37b7ee3334b2bbf9387156af8c3e1e21d3a67ace4f20de7367b5f9fd00a46342f9c4ce6243430dfee61130da87f0bc2ffe7441f')

    def kxEGpAiRyA():
        100 * 3 * 95 + 12 - 95
    kxEGpAiRyA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '85d8f8784dfd0d879bbcbed97f05e933b5cbe3910c72754336916ad5688a050d'

def decrypt_and_execute_AdhZvxTeXR(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '85d8f8784dfd0d879bbcbed97f05e933b5cbe3910c72754336916ad5688a050d':
        decrypt_and_execute_AdhZvxTeXR('5c58267a46614b7367132ab86de5e4a497792496b399333c638bee52ba2daa7d986953fdf32285118243fae9711b5e0e7f29daaf601ba29199a3caae9e0d4fc2')

    def xZyCClhDUs():
        88 + 62
    xZyCClhDUs()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1e4c5b5451e3f109727f1e0cfafcf6a97d7dab9771bfcf677be4f78ee920c3ab'

def decrypt_and_execute_agLuqtasoQ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1e4c5b5451e3f109727f1e0cfafcf6a97d7dab9771bfcf677be4f78ee920c3ab':
        decrypt_and_execute_agLuqtasoQ('59fc68f3adbe3b5016eeac5b6b061183aa1148d484503c3c8be7f6ca2d474333995a4d99d2da2e082570c92260a9cb8091874ece79a68096e54ff36ef4cbe901')

    def DJuifIBDJU():
        91 - 62
    DJuifIBDJU()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'be5cc74b886185931e5beb6b6c8a47c93b5c9ed919bfa51baa76088962f36697'

def decrypt_and_execute_uubSGAALUG(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'be5cc74b886185931e5beb6b6c8a47c93b5c9ed919bfa51baa76088962f36697':
        decrypt_and_execute_uubSGAALUG('85c8405ac59cba4fd794b511b3a67a9abd6d753dd4b882ab14d25cec4c45bbdfdce121d266504d1633fb477f7215aa55419e8b5c7a4154cb10682453fb895b81')

    def reEBerssYG():
        71 / 97 - 70 + 33
    reEBerssYG()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd417d14e7f1d0002fed57fb0b47c371684b8bbb447672fa2ecab7178c773c5be'

def decrypt_and_execute_CBnxpjaTEO(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd417d14e7f1d0002fed57fb0b47c371684b8bbb447672fa2ecab7178c773c5be':
        decrypt_and_execute_CBnxpjaTEO('1bfbe70fa6de7a9264de2258eefe74c765d7f4f488439df3caf5756f6587eb845101fd95ba89ab283cb3a0695b0d2d179cad0d3337961b2c295496d21f866df8')

    def GHGbvDfsiQ():
        74 - 70 * 67
    GHGbvDfsiQ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c6131662e2e12b19d896cc5611dbfee7d1f518df4a26b06b2c53b8ddcb4b46e4'

def decrypt_and_execute_tuWmUImIkO(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c6131662e2e12b19d896cc5611dbfee7d1f518df4a26b06b2c53b8ddcb4b46e4':
        decrypt_and_execute_tuWmUImIkO('bdc07d02eb14f221ee5911fce5d78b4b90bc675de659d60c99a87ed1d29aad16fc8a95a37e7fc778ae8444df5cb3b712502c2f2e3d052438873106bd5cc61bce')

    def gTTnhahBal():
        49 - 43
    gTTnhahBal()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1d3b434a4adba2e019f324342d18c2a1f11892ae280a4ed177a728c5c2076fdf'

def decrypt_and_execute_qGKUzadVEi(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1d3b434a4adba2e019f324342d18c2a1f11892ae280a4ed177a728c5c2076fdf':
        decrypt_and_execute_qGKUzadVEi('60a30b57be6ebf5e6acc26ac30f95f2b0a89865c07f131ccff988b9617b40ca49f644bfc63560333874e336f3db433327a17837dd2af2e617ff4c3407de8f25b')

    def LWCnUlsZZz():
        45 / 34 - 98 * 49
    LWCnUlsZZz()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5c7e5f99f79bd722ad20883c22df6727a3719c8afdb1443ece015ab0059964b1'

def decrypt_and_execute_MWjLPHwITH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5c7e5f99f79bd722ad20883c22df6727a3719c8afdb1443ece015ab0059964b1':
        decrypt_and_execute_MWjLPHwITH('0f3859f7b4d016204598da59183f18627b83134f24f380ccd78355c21bf182f8335649dd24debbde9292aeb9e5c70c3cc11f7772f093702b393d0ffb91aa8388')

    def aDZlIbTPRf():
        32 / 37 * 56
    aDZlIbTPRf()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b110b72423ce68b5a5053c174677667041e6f3951ffce0f030bb80e192daf8c8'

def decrypt_and_execute_pzVuzudztH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b110b72423ce68b5a5053c174677667041e6f3951ffce0f030bb80e192daf8c8':
        decrypt_and_execute_pzVuzudztH('d0a4749b64c552e555e40657b72714959d0ef03970c91c5dc9b9ae51b0848fd14e930d1b066b74a91cccf5244801a293607f3a7340606cbf2881db87f5473445')

    def eZrbAsvjhM():
        25 + 85 / 25
    eZrbAsvjhM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ea3447fe92d3e3a9cf29c5d9a37fa38e93ffa2ba2c694de3ad6dcba036430eda'

def decrypt_and_execute_IyYEbOLTGh(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ea3447fe92d3e3a9cf29c5d9a37fa38e93ffa2ba2c694de3ad6dcba036430eda':
        decrypt_and_execute_IyYEbOLTGh('3d970f63dd61ac17d483ced6a4d66d7f966bd304c5dbabf9320c9e50d7746343fd7651019b5f5ea1671f0e10f72150c4c38449a77d4710f4205a4d59185bcff5')

    def sHSZxBgQuq():
        31 + 58
    sHSZxBgQuq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4c9db392fc0aec0985a581b771be6e4fabc65e92de4139629ea6c02941605d76'

def decrypt_and_execute_XZkPezZBxN(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4c9db392fc0aec0985a581b771be6e4fabc65e92de4139629ea6c02941605d76':
        decrypt_and_execute_XZkPezZBxN('6fadc456ef9e3346ae679188c67b671569024de02e6ce6943d862703f40fd161e8b2ff51c7eacba639c2f670f6f851d7d5816098b45f380bd64b17731a9eaf8c')

    def nPhzGQVquS():
        43 + 77 + 77 / 8
    nPhzGQVquS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'fdfc69124d91387908a0fe78434f2eb36f6f461372b0cd4ff3c2412cd84bc052'

def decrypt_and_execute_NchVqIFCTZ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'fdfc69124d91387908a0fe78434f2eb36f6f461372b0cd4ff3c2412cd84bc052':
        decrypt_and_execute_NchVqIFCTZ('aba71a4ae3313e9755027f0b043fbf20a2ff57f9cc1c3be3238d81130736e85000ee976190f9be7671f0f90986c4aee778419d0a2712a4b1a3c446109de087f1')

    def LsrgTToplD():
        5 / 79
    LsrgTToplD()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7c3c8dbd377a09927b00bb7d1ba837474117b812487da3aedb08b97d10ff754a'

def decrypt_and_execute_xjOVtkCINv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7c3c8dbd377a09927b00bb7d1ba837474117b812487da3aedb08b97d10ff754a':
        decrypt_and_execute_xjOVtkCINv('91da266526d1a73508f1328437cb267a3397926dd427e32b3d102289477dade523eda7d40b3abc4543964dcd6f9ae39ad5be1a1b49136e5c296bf00676cc040d')

    def WjEyFWARaL():
        35 - 57
    WjEyFWARaL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '6d66176c5cfc4ecb51f0578dc3ec018f1785074f47ef28069f41cce2f1064110'

def decrypt_and_execute_ayQpRepnAT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '6d66176c5cfc4ecb51f0578dc3ec018f1785074f47ef28069f41cce2f1064110':
        decrypt_and_execute_ayQpRepnAT('b704229fbd81b5c7a2d00ef1856110502a575d5e9e32ed2f605767d4ed326c82ac761ad711a1e8b7c24b67d5a2433a5bb0ecef525cea962553a865ec8d7ecc58')

    def UAAYJDhMmu():
        5 + 71 * 81 / 100
    UAAYJDhMmu()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3538241b7af98ae798190500064d5506dd3ae47279a5563b332b9d008726cfcf'

def decrypt_and_execute_TFNmDdsxiu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3538241b7af98ae798190500064d5506dd3ae47279a5563b332b9d008726cfcf':
        decrypt_and_execute_TFNmDdsxiu('e55460deb8bd61ced8aa03a0976973bf17df9a196511b8eb4ac9a9e2500de75f921d23b582dcb7bf7b63ba24d81e9a3ed01ad82afeb3e75488229f4309d08620')

    def SzqlyZdspD():
        72 - 22 * 10 - 19 - 49 * 68
    SzqlyZdspD()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'aabcaf0c8d72a4dd48effb616b3f9c8cb2ed77e75095096ee1e44e66a4a4ae00'

def decrypt_and_execute_CZyzTfCdct(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'aabcaf0c8d72a4dd48effb616b3f9c8cb2ed77e75095096ee1e44e66a4a4ae00':
        decrypt_and_execute_CZyzTfCdct('461329be7e5e75e243085871ae2ae5c21ca9062783b469f7022c324e7db0de520f5c868b49fc80a9747066644d63bab10c6bbf1e83e5f92c30247a9e1b2c9ef1')

    def moxVjaaETY():
        9 * 29 * 91 - 20 - 36 - 4
    moxVjaaETY()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7454c9ac15ebacae8f3de2e66415ec657fb988c030728d3f6861cabeb18aa7da'

def decrypt_and_execute_UDQlFmuyVU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7454c9ac15ebacae8f3de2e66415ec657fb988c030728d3f6861cabeb18aa7da':
        decrypt_and_execute_UDQlFmuyVU('116aef78ebd94bd2108719262dc2e1b708bed4bbc7e1d47ac54a29af6053a2af86eb607932f7e0de003122ccb55a36f653af3c45a3b07c32e3dc84c557fb5a4d')

    def vZbFBALEkz():
        92 + 47 * 73
    vZbFBALEkz()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f81f4afefa5496548b370f0595c1235e4b900495b1b8acde5771a9e9345b57d1'

def decrypt_and_execute_DHCKFCofgo(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f81f4afefa5496548b370f0595c1235e4b900495b1b8acde5771a9e9345b57d1':
        decrypt_and_execute_DHCKFCofgo('e0797c42efa2f7c1d9dc675a4a1272d900543b870f566dc812d3f59b6191105edcf695481fdf8a8d0dd91c8df13caff746e56c8d7b9b43cc4929e5dae70fc503')

    def tjofMYBehg():
        91 / 95
    tjofMYBehg()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3c12dda108a98c9b4374c5dace455a63ff80de0ee0c58e28b1279c483ac377c4'

def decrypt_and_execute_AaDUdBdYzI(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3c12dda108a98c9b4374c5dace455a63ff80de0ee0c58e28b1279c483ac377c4':
        decrypt_and_execute_AaDUdBdYzI('3c1a756ea23e8546fade30bcf85afdf1b765ecc2ba9f64729fe2b43a1f37ece5dac6188767e083cb163a88cc0dad0c9ba0d2f0ffed0b5f536a255dc358c877df')

    def CBHWKPxNuP():
        12 / 16 * 36
    CBHWKPxNuP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2b4c96f7d174ce27e310ac82af70022a28b089325b428b1d7f6e5430438b0228'

def decrypt_and_execute_QjpfNPRsQW(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2b4c96f7d174ce27e310ac82af70022a28b089325b428b1d7f6e5430438b0228':
        decrypt_and_execute_QjpfNPRsQW('f41f50ce89332c3d36cb25f3c9b30426b8986ad77917d0e963a394aac08a0210402a21c21e8b538581bb87f5ed6189d57d1bfb0da1c1c22835a183fd83f45382')

    def aZwmFzOjgf():
        72 / 62
    aZwmFzOjgf()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4de123f500530f6b1b228c71a2cd2fb3faea0d23e89d56021615c05c7ac11a67'

def decrypt_and_execute_QxVYQEBzWR(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4de123f500530f6b1b228c71a2cd2fb3faea0d23e89d56021615c05c7ac11a67':
        decrypt_and_execute_QxVYQEBzWR('2dc0bcc8913bdd2b76d1a0dc09ea24c957f72b4f35fb1264b9d001a36474055b40000b39edda4b1b1e4865529e1987a39541394e7be18fcea20008da62ba8e2e')

    def vanBRYKoTO():
        36 - 82 * 82
    vanBRYKoTO()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'eb5cad7125ba43fa2c5c238049c2c96b0e7307a8635c5f2737eb450c8019e2dd'

def decrypt_and_execute_DUbsrqGVlV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'eb5cad7125ba43fa2c5c238049c2c96b0e7307a8635c5f2737eb450c8019e2dd':
        decrypt_and_execute_DUbsrqGVlV('53866768df48d5b208e8b73bfa76d6eaa4a6b5d751f7655031738a343ad263f8563a4375bd8d8b064adc3e6ff96129563fcab452b0c0614348c3fcb5abc6bb30')

    def TIpdDOZPzc():
        49 - 94 + 1
    TIpdDOZPzc()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e52485a96965ce1dab63456a9522fe29d166bc382f56d0c682bc1fdb9610ccae'

def decrypt_and_execute_UiIehzOyeY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e52485a96965ce1dab63456a9522fe29d166bc382f56d0c682bc1fdb9610ccae':
        decrypt_and_execute_UiIehzOyeY('2138613cd145e17504a0be205b609930869674567b027dbae87e0c8ead6a36f0fd15fa8a85170c2713569873b726fdd24ff07865b6f1702414c7ee14c2d11869')

    def QSImgRPdKp():
        12 + 61
    QSImgRPdKp()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c721cf2d62d639de9a605a928e04c3c33a8cfb567b9df965757bcf96c4091b61'

def decrypt_and_execute_FJtFocuKwR(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c721cf2d62d639de9a605a928e04c3c33a8cfb567b9df965757bcf96c4091b61':
        decrypt_and_execute_FJtFocuKwR('b329f6ae7c977e259b21ffd73d55963e55713949fa3cec133d3afc9a671cee015bf511b11e591b8604758c07cb1d9c58ecb675caa655c0b8b87fcd7c65a8a0a5')

    def oTwSEWGSvg():
        39 / 1 / 19 + 97 + 99 + 51
    oTwSEWGSvg()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'bf705db2d4cf6e8927279abf6040d478cfb5d069a57cda3333aa09d79aaa132d'

def decrypt_and_execute_zfrowKpTpl(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'bf705db2d4cf6e8927279abf6040d478cfb5d069a57cda3333aa09d79aaa132d':
        decrypt_and_execute_zfrowKpTpl('d608e50071a9f440625a594009dffc3feb0b61fc635541758def6857cd4702c0de38ebcefd0fe547f73a3a2b02d512bb673c3d725703e3703d6eb4af0998f755')

    def qkefWCwfOS():
        65 + 3 + 45
    qkefWCwfOS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5f87035f05784dd42db7ef6758deb797346921c0015500fb0b59293113ceec90'

def decrypt_and_execute_dCrxNZvpYt(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5f87035f05784dd42db7ef6758deb797346921c0015500fb0b59293113ceec90':
        decrypt_and_execute_dCrxNZvpYt('fe363fd1a46cc5047a83ba9fe88e989c16221bee2d10c194f7943059bd6136cbabfe9b8eb18691be8c1a3441b0630048e5237147c9486d26d3d4d8ed0df058d0')

    def KpIIohedDT():
        57 * 58 - 84
    KpIIohedDT()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '91c44ac3b3c3dec7ef94727484371994567693c2cb2d9265d32b35fa0c8b0211'

def decrypt_and_execute_gmZHLtGLis(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '91c44ac3b3c3dec7ef94727484371994567693c2cb2d9265d32b35fa0c8b0211':
        decrypt_and_execute_gmZHLtGLis('41e0a998e12967bf6feed3dedec56fc0e1e0902a9244070d18faaa9f6121fc4593fdaba4a1b3dd3537a94b74eea08e769d129b686e5eb1200750ed14bf38d132')

    def ybbJefBksX():
        45 / 98
    ybbJefBksX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0f27579454a24a417ff9483cc139aa6d25fff54984d9fabab4135d73920e8bf0'

def decrypt_and_execute_FoDylLSmpr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0f27579454a24a417ff9483cc139aa6d25fff54984d9fabab4135d73920e8bf0':
        decrypt_and_execute_FoDylLSmpr('ce222f5d76b538d6cd6f722d4e4d5b9323cc76248fbd3ac34af0ba0b08a0e0d3393702d67bbf0a06c457194f1686d0aa8e215ee98d48a1402541ec6f362a0020')

    def DDYUuvVrCX():
        96 + 36 + 95
    DDYUuvVrCX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '26595e804a26939c4ffc682be46761cc32cae12c1677a15a3896b19151c91803'

def decrypt_and_execute_QwFHzmSMdr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '26595e804a26939c4ffc682be46761cc32cae12c1677a15a3896b19151c91803':
        decrypt_and_execute_QwFHzmSMdr('22a90aa15b9977fbb3d4f3c16c6b966d4d2dacca6d1bdd80686bcbfd4e4843fee34c5c3990aaaa01816456e9d228cced3b1e5ab66c1e6417321971ebdfc072bb')

    def eblUhbLPXj():
        23 + 38
    eblUhbLPXj()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '191f1ff7a32216f88cd238cabd8f00315565e08ec902b0a39b3bb1518c2694a3'

def decrypt_and_execute_OspZdwmFcF(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '191f1ff7a32216f88cd238cabd8f00315565e08ec902b0a39b3bb1518c2694a3':
        decrypt_and_execute_OspZdwmFcF('16307b90a6c592b0d7e3e3267c512daf505d0dfb92665602b1cf13122eba6bee976536f11aff36be94e8c4c54ab0f996cdb20ccb1340d66a8e1ae9daf119a23b')

    def swPlSGIzZc():
        26 * 92 - 82 + 9 / 78
    swPlSGIzZc()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '04a517264686b2a62829ff0587901f6ee4a08f2fc76b3f790a0a33a28410ea29'

def decrypt_and_execute_QrFUAYyyjh(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '04a517264686b2a62829ff0587901f6ee4a08f2fc76b3f790a0a33a28410ea29':
        decrypt_and_execute_QrFUAYyyjh('86198b2b8aa28d338513d5c75e2d7e58980b420fb4055adf58ca8054e4fc152011b550c50b2aafd0ed0a6f8246d5d7be652f7bb552a14a4ac9f570d7e260d888')

    def dMjDDIGhUP():
        54 / 56 * 62 * 98 - 91 - 61
    dMjDDIGhUP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c9065ad8e8da25ebf7a773c03db32acd630ef2269b035ee5e0821bf03546107f'

def decrypt_and_execute_EdzohawTDy(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c9065ad8e8da25ebf7a773c03db32acd630ef2269b035ee5e0821bf03546107f':
        decrypt_and_execute_EdzohawTDy('684ff8b6839b636e71d1bbeefa365f158809c3ea36b65b1a339e8f76e96aa006ea56d228757d055ad979bc6776c649b78b90887636e1fd21e1cd8e6887632b0e')

    def kNjPCxWCrj():
        41 / 84 / 53 - 54 / 47
    kNjPCxWCrj()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '6a4cd82b585d6bbeb3011bfb0bb303509254d8e0e3612fe5a9148f095f8004f0'

def decrypt_and_execute_JJWWYsvKIo(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '6a4cd82b585d6bbeb3011bfb0bb303509254d8e0e3612fe5a9148f095f8004f0':
        decrypt_and_execute_JJWWYsvKIo('ec5bc9f5663c1cd49b69f7d7fd2e4aeff87b44c73aa9658a05ed66b2785a81ee6d83d811de19f2d6e6f9b35f3e3ba165df4260b422327b46e8397a5f921c9093')

    def ravLiIkXlb():
        56 + 7
    ravLiIkXlb()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1807795a81a22eb277c7f68a2afcfb5872d672221e0f057464ba2be26d1765dd'

def decrypt_and_execute_ifctliBXYz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1807795a81a22eb277c7f68a2afcfb5872d672221e0f057464ba2be26d1765dd':
        decrypt_and_execute_ifctliBXYz('1a9da91b698c963b5a382c0e7ce317d3a8d54818be27368e5e609becf0f8b0071cf0bc29d016bd16a328727ccfe67a3840dcbf7956dfbadb642d629b6cf16102')

    def bOMBnzBdTQ():
        33 + 36 - 29 / 48
    bOMBnzBdTQ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4fb1b06456b0d03993227ea0263de2ccac3e9cf0521c15d4e1f6ddfd28f04f18'

def decrypt_and_execute_qPcippnJXy(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4fb1b06456b0d03993227ea0263de2ccac3e9cf0521c15d4e1f6ddfd28f04f18':
        decrypt_and_execute_qPcippnJXy('ba8df2d9ae8a9f5dcd11c31ddd39e53b32edb74d77fcafd9fed11561b9d76d165f6abe10c8f530a699124bc2b3c251946f2ef74d21ca63252b9205712f11c9b0')

    def QryxVcrLDW():
        50 + 10 / 89 * 14 * 35 + 1
    QryxVcrLDW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd0e9f3f102b7834e19f1c1754db8f8e2db8db17dda693d1442d282ee697df067'

def decrypt_and_execute_alEsdOBzoc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd0e9f3f102b7834e19f1c1754db8f8e2db8db17dda693d1442d282ee697df067':
        decrypt_and_execute_alEsdOBzoc('06b88285e30507e3a4442c8954a10e478d002ffff61198f2cccce3ad3811780e1561a3f7f87039f45a5a98867ba8569965d49480d3dec64b2a909c75b842719a')

    def VEYLHPmGEo():
        41 - 46 + 31 * 48
    VEYLHPmGEo()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4cd4a9e7ff53d7792efd0100ba94bc554f5e853fa323ee44b3e1e768c7d7f6f2'

def decrypt_and_execute_zcyicNakZx(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4cd4a9e7ff53d7792efd0100ba94bc554f5e853fa323ee44b3e1e768c7d7f6f2':
        decrypt_and_execute_zcyicNakZx('1a0da5617f8b0197bc9227ccedb2493ba459324f18680a45462063a591df0d7c89687351e584dd457219819e2fe41e45d6b915d1f3ce35fac8c1db62e3739f3f')

    def BiRPLnDoKO():
        46 / 8 + 39 / 72
    BiRPLnDoKO()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '033cbbd125eb6fed1e43ef143c2e374d10e2a96494c111eca131a6656323ae98'

def decrypt_and_execute_KzwGscIzXk(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '033cbbd125eb6fed1e43ef143c2e374d10e2a96494c111eca131a6656323ae98':
        decrypt_and_execute_KzwGscIzXk('2b68dc8d51b558d5eddbc1076515f176bee52fef8cf089a677ac3f51a4eabb8c3216a3db15ee57b596585c23a07fda49c5db5b5aaa80bbddc58fb0dd8ac81eb8')

    def tnKWpZjUrj():
        66 - 90 - 97
    tnKWpZjUrj()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'cc4e6eab98f5e930bc909b08f3894155d18c083daa4f4d5a2ab39fbb80c647d1'

def decrypt_and_execute_EOAkzyWaFA(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'cc4e6eab98f5e930bc909b08f3894155d18c083daa4f4d5a2ab39fbb80c647d1':
        decrypt_and_execute_EOAkzyWaFA('78529f9121e86b422dc53a2ee142e8dfdbb424ef53f2516362227cbf990c3236738369c12c6a32f131626bfe1e2cc5dc18288a999e5dd8b1bf091fa49ca320f9')

    def yKhCDuYnQg():
        50 + 80
    yKhCDuYnQg()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '433dbed4efcaac9d0fecb8425be8fdcf456ba21a95ebb1e9b70f2096282922c3'

def decrypt_and_execute_IPxULfImHM(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '433dbed4efcaac9d0fecb8425be8fdcf456ba21a95ebb1e9b70f2096282922c3':
        decrypt_and_execute_IPxULfImHM('0d3a1ce9f28e13e899d94d7ed0cace56351706140a1c7337ad943d486a6a77ec39350d5760c8f4ede0c6b61b7d8bd1b3e7e0b144f6dacac248bea79d5b7f050b')

    def rqTxkyddgI():
        42 * 83
    rqTxkyddgI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'eece0efb38ff80ddf5dd77477bd70a7a73e4f8eb74b1e670eaa44a8d8e73ea88'

def decrypt_and_execute_GipFptXmvO(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'eece0efb38ff80ddf5dd77477bd70a7a73e4f8eb74b1e670eaa44a8d8e73ea88':
        decrypt_and_execute_GipFptXmvO('446924af95af248b81e387ebe0da5f3c741de9ae9bd9fced5069f73d20ce9998890d4dcbc4a62af651c6541d5104da638fb304081c0ac54bfc0b5cfad6e20f95')

    def ECzTSnmOvT():
        6 - 8 - 61
    ECzTSnmOvT()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2b71ec1c1036e90895ddb066acf05a0c5d0d906e7f5fce9a4d88e7c24b6e6034'

def decrypt_and_execute_dcmcdosuih(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2b71ec1c1036e90895ddb066acf05a0c5d0d906e7f5fce9a4d88e7c24b6e6034':
        decrypt_and_execute_dcmcdosuih('a65c5f4f887d254479fc8e9e393d970ec23c64b29a01f9b1a32e8e1d8d8755530036a60fbf62538503b25bfb0433fe6dc2eebbd1ee8c69bc81d38edbd6d1defd')

    def zJvMPdNCHJ():
        95 - 33 * 26 / 38 * 13 - 78
    zJvMPdNCHJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'fd226730129a268227a8dfef8df3ce2be2cbbf6f58e1718f8ca3fea6657c847e'

def decrypt_and_execute_YQQLkIpKLn(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'fd226730129a268227a8dfef8df3ce2be2cbbf6f58e1718f8ca3fea6657c847e':
        decrypt_and_execute_YQQLkIpKLn('cdd7c5eedf51a274efc3810ed0d302abe949a090d91a5ce0f31d88f37c222648b6ab33cf9c3997e08984d2db1342bf9b1f05b05e4c993a66a2598e0dfb2e0290')

    def KQrRLbJaYN():
        30 - 80 + 10
    KQrRLbJaYN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '07222d402f1ae351c413d37bc7d2a2a4acc4a93c09391715db67add8e501bc03'

def decrypt_and_execute_qDAllEZdPO(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '07222d402f1ae351c413d37bc7d2a2a4acc4a93c09391715db67add8e501bc03':
        decrypt_and_execute_qDAllEZdPO('552af8d50a1d037fbb534485704805e725246b2cac77555ccb03d2bb25891a63cdf1e06d300db1180ff71d58feb29d6e94bd9a7d9cc17d69aa30cd6f85f9449a')

    def LfidLlwlCQ():
        88 / 95
    LfidLlwlCQ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2cbb0188e9d9db576b94bcdcc4e5bc13a50472271e15b7c130cecd26244ef8ac'

def decrypt_and_execute_YRgcmczGns(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2cbb0188e9d9db576b94bcdcc4e5bc13a50472271e15b7c130cecd26244ef8ac':
        decrypt_and_execute_YRgcmczGns('434083b3b73a516a643fccfa50c7770b90f162c2e03f5a57d22ef1e5a64d722d8e09226055ebc44a2019adf5a62f3a58197269d43e23d7da003dcbd27a30c621')

    def RwniBclEOm():
        61 + 62 - 14 + 37 * 54
    RwniBclEOm()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '708e9d650494fc1ebbd9ec2311e5d76b629e9817ffad428de722d5ccf4e033b3'

def decrypt_and_execute_FKvjaWmQzL(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '708e9d650494fc1ebbd9ec2311e5d76b629e9817ffad428de722d5ccf4e033b3':
        decrypt_and_execute_FKvjaWmQzL('ee9047cbeb89021229ba88acf56b3a46d435d84572e66dc92c4d46c1d847ff2f3c7e17aef4128ad103684c384410bc19e65b66f30ffd973680aae1d5887aea4c')

    def OukaceHAMp():
        11 - 77 / 13 / 85 / 96 + 18
    OukaceHAMp()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'bf649617bf75c2345cf24f65be930cc0a30c6313eb4258dd61ddc52084e7b805'

def decrypt_and_execute_dRpSNyZcXe(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'bf649617bf75c2345cf24f65be930cc0a30c6313eb4258dd61ddc52084e7b805':
        decrypt_and_execute_dRpSNyZcXe('fe0134fd0cdd14857bded03cc59bb1e9eaa944f95d1bea1db03aecc2375e4297f1b722cfdc4e6f3d151c2dcb68f6fa71e7f980d0c1e13a8f81ea7d6e7bc8225a')

    def wfPcWLwOOL():
        63 * 53 * 65
    wfPcWLwOOL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a3bedb753f5eea77fc9cf5e2c30e0d2442c0eeda0a832e53c7c40ff72fec378d'

def decrypt_and_execute_jpmiavCeqZ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a3bedb753f5eea77fc9cf5e2c30e0d2442c0eeda0a832e53c7c40ff72fec378d':
        decrypt_and_execute_jpmiavCeqZ('b88dfb94e36b25571de08ee85479542d77dbd7958ee9a1bee76b7de89948432fec011f70c44d22d664dd7b219eb001645808fc339b9feb3aaa99f5fb1acfa5a0')

    def EDEUjavvCN():
        67 / 65 + 34
    EDEUjavvCN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '6c175ecb00db107e27cb05cc9e76becda9827a5bd83b29013b0b643df00b69bc'

def decrypt_and_execute_lIUKzOoVJs(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '6c175ecb00db107e27cb05cc9e76becda9827a5bd83b29013b0b643df00b69bc':
        decrypt_and_execute_lIUKzOoVJs('2125534c247e44ed09a8435f668e2c7140e99e9c459d8b3b7a4fd21d19559f0a1bb3aaf433c01c117e6c7db210dfa45a67843a2af183dbc12dae7828e6da9c48')

    def SOJCvaBDsV():
        59 * 70 * 45 * 77
    SOJCvaBDsV()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '315f53b72f33d605098118145dc5c46ee3e7ca79ff8f20281236188afda01eec'

def decrypt_and_execute_CHALMuZyuj(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '315f53b72f33d605098118145dc5c46ee3e7ca79ff8f20281236188afda01eec':
        decrypt_and_execute_CHALMuZyuj('ae6e333fb2b9db2be4a6472d2154ff71c1e0c81df64ec6b62e0a81e0f6921db7976df98ac1739293494450b9081389a184f3a912608add6e1277fc24e709f060')

    def cwntsvdLiI():
        80 * 10 / 72
    cwntsvdLiI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ff80bd0c3b11303c2cc87ad998832720b9fac5b701f842e986714f0f5dac1a05'

def decrypt_and_execute_taahCRrSCJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ff80bd0c3b11303c2cc87ad998832720b9fac5b701f842e986714f0f5dac1a05':
        decrypt_and_execute_taahCRrSCJ('0547eb676ff1e67b0f865ab7e96583ed1bb8d5ee30c0d597964ca3cb992cd94b1685d2866136b77416ead908df5b6c056a5cc46326dd2cb57634d752fad9b8cc')

    def pyQgBRlQUc():
        12 * 66
    pyQgBRlQUc()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1fb22842f9f785af7e730d12200eede4f8d940b61b962f655ffb3eb2da9d4ab8'

def decrypt_and_execute_YwwRCZDzUo(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1fb22842f9f785af7e730d12200eede4f8d940b61b962f655ffb3eb2da9d4ab8':
        decrypt_and_execute_YwwRCZDzUo('c6f224d8e8f0e1913ff4c9d04f679b28d36f32fc42450e5c90d0d33d02a1214abed988e4b3b848cd3a59604936944fc4a932bbfe326bde9e354d48b556ee7fbb')

    def qeoAHQTuZO():
        79 * 48 + 83
    qeoAHQTuZO()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5d25b883d6859149655b5801f434a923618d167d0767f6ba8c3ec2b7c481c57c'

def decrypt_and_execute_uOUPfTKeqV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5d25b883d6859149655b5801f434a923618d167d0767f6ba8c3ec2b7c481c57c':
        decrypt_and_execute_uOUPfTKeqV('ef9dcbad7b0c4fac8859e32970c33a845bd6b991e6406141b93aed28e39e805ee05e9a466f98bde30c90534fc6c1c901047cadb4e14dd679875252947d55c0e6')

    def enlzuQlruD():
        7 * 86 * 65 * 10 / 38 / 58
    enlzuQlruD()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '6e62e421ce3a1399977ab79c0d61174329866f0af681195e21f47c1758bf1510'

def decrypt_and_execute_RtuVUljyXv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '6e62e421ce3a1399977ab79c0d61174329866f0af681195e21f47c1758bf1510':
        decrypt_and_execute_RtuVUljyXv('d370401e25b18394eae3f8277af4817cc1ef75375f09b23dc2b9e06c9d3277c4d4dcb58fae47439699067761eda671412a3207fe64ad3b597ec9deefcca2cf42')

    def wKqiIInUcj():
        41 / 28
    wKqiIInUcj()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '06e59e56e37875318799f005eb6d9cd2022b22862503460dc800fee79b5e8c40'

def decrypt_and_execute_OwORtedTrD(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '06e59e56e37875318799f005eb6d9cd2022b22862503460dc800fee79b5e8c40':
        decrypt_and_execute_OwORtedTrD('9e447c56d7a56169f6c028182860af9a463be81a0f1f4249791d02f787dd956bd4e0374083a6e55a2d20b4f5abc12e4cb9c9d4310958c5a84b2273094b44bf28')

    def grpLzbVHha():
        75 + 75
    grpLzbVHha()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e895d3661d83cebab43c351ea9927f50cad8dd48b13496f0fc38224ec74367da'

def decrypt_and_execute_gNQEKDyccA(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e895d3661d83cebab43c351ea9927f50cad8dd48b13496f0fc38224ec74367da':
        decrypt_and_execute_gNQEKDyccA('64bcb37c770165896f2f5ece7e8766c76085de2ff27a8894e720d4d72fa3c25820f02814a6df209df34a9e173434c6c4c0c762913184ae5a02b559d95506c2ad')

    def vRIYYviLZS():
        50 / 56 - 26 * 52 / 21 + 34
    vRIYYviLZS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'fd9558f305beba3ff61e8c83d548697cce46d7e3c42c874ac99376f712b42963'

def decrypt_and_execute_bVLSZBiFjF(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'fd9558f305beba3ff61e8c83d548697cce46d7e3c42c874ac99376f712b42963':
        decrypt_and_execute_bVLSZBiFjF('8c041ed7a9ba059c5ac7754b9ff69bce751c0b0d36f2c0f2bb1340bd441502862fa37e1cd6bf3c3418660f01f8aebe5c294754a69d4f5b858b1859abd7f5c3fe')

    def klWBPnMMpO():
        20 - 21 / 62 / 89
    klWBPnMMpO()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '56eba7ba80eb3c2423e5b354eaaa68908f15daed0bbf9d2de53989159bbde57b'

def decrypt_and_execute_NoyAbYQbkV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '56eba7ba80eb3c2423e5b354eaaa68908f15daed0bbf9d2de53989159bbde57b':
        decrypt_and_execute_NoyAbYQbkV('3f1efc308ff5d65300a92a41be7611d88dca2772602e2295aa767dd0b412480caac5b6ccf2e40f860454a30e0f139e056fb6537558d771d0e9e35475c7cecbd3')

    def aHfEHwbHJv():
        24 * 72 + 75
    aHfEHwbHJv()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '76eb7a13617d2590499e1d8a9ca2b140f3ea2504f5fb2726ec0bbcea4ded6982'

def decrypt_and_execute_YkOHpPQVop(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '76eb7a13617d2590499e1d8a9ca2b140f3ea2504f5fb2726ec0bbcea4ded6982':
        decrypt_and_execute_YkOHpPQVop('b537a3fb105b57a4bbb02b3c9affd28803eb0925d98692907ecf7b12089be055b46c08f5a096e150a6f027ba0e16ddf8cacc4660f099ba9a1e28afb8462e7b62')

    def GJfcymlgRK():
        86 / 18 - 67 - 24
    GJfcymlgRK()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '93d527cb4f7d7b5d7ebcaf1f2521844c42764c9280ce00e3f4ac199f397cb66d'

def decrypt_and_execute_JLNZLxDzPQ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '93d527cb4f7d7b5d7ebcaf1f2521844c42764c9280ce00e3f4ac199f397cb66d':
        decrypt_and_execute_JLNZLxDzPQ('616a797b0c892abd49f40ced4f429b2a6aa043f1c839d1bbc77f0d67e15c314f1fb2654adbd86c6ee05c2bcbb914b7bfa65d91360aa4df92f537f860c64588ff')

    def gPrmFaSvSV():
        40 / 73 + 30 + 61 - 90
    gPrmFaSvSV()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '6cab10a7108ddc114049a90497a20847fe8526080569b2f9f27d08eeaee938bd'

def decrypt_and_execute_rqcqFplEAY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '6cab10a7108ddc114049a90497a20847fe8526080569b2f9f27d08eeaee938bd':
        decrypt_and_execute_rqcqFplEAY('5030987aafe36cfd22834b931a20f502cff731b9f15a22238dd717ab44f869bd64055aa313484599d133be794251a9bca1cd174fe18c3992a2657127576b7a33')

    def cyYWTFvYET():
        31 + 42 - 89
    cyYWTFvYET()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '48fd207f0b6446cdf3f8b65294367c4a6f5b55bc8dd8e80ececc2291391137de'

def decrypt_and_execute_zDuagGsKGM(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '48fd207f0b6446cdf3f8b65294367c4a6f5b55bc8dd8e80ececc2291391137de':
        decrypt_and_execute_zDuagGsKGM('c89b4d2ac80f118e11bec6d361c0bce86f2610a2baed2a709ebb21922024c28b8e4a17e7d6a865fe223d67781c45bc30224c3faa4d9f216adf605cd0322068ca')

    def VvaNhRieAF():
        28 * 37 + 16 * 32
    VvaNhRieAF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7258b301594a9a16bf9d27da6ae1538cb48db960efdd59ca1c1bce7a8a5f72ee'

def decrypt_and_execute_HFKQYvEDWm(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7258b301594a9a16bf9d27da6ae1538cb48db960efdd59ca1c1bce7a8a5f72ee':
        decrypt_and_execute_HFKQYvEDWm('7cc1afc555c1c653c037529fa7f6c9bfe4b1d798ce437241ab25cfbcdeb3d34c69985aacce710e327c0d2b5f745399dbf058f2d6a72df6eff3f22f1aa4cfca8c')

    def VUZSwzsMbX():
        25 / 47 / 29 / 71 - 87
    VUZSwzsMbX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b34aaf929dba8debaec6692e02ccd155fab4f354044dfd803684fa7942d5e190'

def decrypt_and_execute_xqCENLTlgx(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b34aaf929dba8debaec6692e02ccd155fab4f354044dfd803684fa7942d5e190':
        decrypt_and_execute_xqCENLTlgx('5562b3bf83a33f302b44a9e0f683018e5270206525b07fd7a30569b1167b8725fe161bc365ca10145b61ddd565fca5efec03e72d7652b5fcceb01786c8aefe5f')

    def HVryqZqgMq():
        52 / 38 + 73 + 46
    HVryqZqgMq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd766919b7bd84d99c3e59655d6baeefd63b88a1457c4d4534eb019dbecd51905'

def decrypt_and_execute_RZigXZVrJt(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd766919b7bd84d99c3e59655d6baeefd63b88a1457c4d4534eb019dbecd51905':
        decrypt_and_execute_RZigXZVrJt('0b1ba223fa47e41bfa8346756e12ed7913e981814cf47a05adfcf8b45cb5f062b9eb05b222d5c16a3e20bce9c2c936b286ebec53dba658335a5d779a61cb1f6b')

    def AuXxopHrku():
        27 + 40 - 21 + 75 * 1 * 29
    AuXxopHrku()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd1425feba88f8f046900ddab21be865a22f828a4818a6b6bfbcf0a8e714545c1'

def decrypt_and_execute_AEgcRHKyOW(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd1425feba88f8f046900ddab21be865a22f828a4818a6b6bfbcf0a8e714545c1':
        decrypt_and_execute_AEgcRHKyOW('73a3fb57dd2b5a613a5545799202c203701ae73d77b9ca9c4954f2cdd7e064baba397144e7f2d47a1541fd5a59ae87601caee965a3a079fffb933f05f4a5a431')

    def OjClwqJcNo():
        80 / 51 - 46
    OjClwqJcNo()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '35350836fd8dcb22cca030ac0f283ec876cbf9ccd55683a11aea07f44ecae379'

def decrypt_and_execute_PogGjIgecL(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '35350836fd8dcb22cca030ac0f283ec876cbf9ccd55683a11aea07f44ecae379':
        decrypt_and_execute_PogGjIgecL('77e8f748f9ca609a3c9750001de6ddcfdf6e6886717f97411bab77195520a2ef16b1841d3062802dd592d4c3dcf0ad6ce2df38f81e856cc70057ce284a6f8d6d')

    def xFQjfMKvAQ():
        92 - 4 / 47
    xFQjfMKvAQ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b1da342c2a529b9ce8c59a4101f8bd8b1cb0d0a2c8d47a8671ce5039c36a66e7'

def decrypt_and_execute_oRVxozSlfp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b1da342c2a529b9ce8c59a4101f8bd8b1cb0d0a2c8d47a8671ce5039c36a66e7':
        decrypt_and_execute_oRVxozSlfp('9374f7789aaefc41ba35794947368c4a0b0338f2c830729903069197860360d77b02cf26c325bf074110c3aa3ed5b8dce8e5fb706587cc4af05faed8bb33a8d9')

    def FhkMmJBMBS():
        16 * 77 / 95 * 4
    FhkMmJBMBS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '27743a4ca0996125aaa5960fb6d26fe505efa01a4183ee0be6ce1e47eb2967a5'

def decrypt_and_execute_cNpwZtLWBP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '27743a4ca0996125aaa5960fb6d26fe505efa01a4183ee0be6ce1e47eb2967a5':
        decrypt_and_execute_cNpwZtLWBP('d18ff3d039779d40e0ac6e06057aa02937870abee4d9811e721f21395603539ee2df732f6e4dc9458cbdd417af231f06b3cf1a75425f9a271b1f3aef5b743cee')

    def dKqfhKhNWR():
        58 + 34 - 59
    dKqfhKhNWR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'db26b22d3bc1f4f016c55a2f0c764c483783b7420c3a4214341635ec4d217f59'

def decrypt_and_execute_QkxsSSKKTS(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'db26b22d3bc1f4f016c55a2f0c764c483783b7420c3a4214341635ec4d217f59':
        decrypt_and_execute_QkxsSSKKTS('77a58873d67441bd0cedbf84b8a196153efc0eab95c6e7f7ad248ab3dcbe915adf6b4c440ca719463eea47970717339c59e651d3c5b6a92720d57907ce71c558')

    def JUNHgjimzd():
        1 * 22
    JUNHgjimzd()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7a1ba1912e222ad925c8e31a6d1817b11e411b35727be09b16d2776d32a1bf10'

def decrypt_and_execute_pdeIeyOaYa(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7a1ba1912e222ad925c8e31a6d1817b11e411b35727be09b16d2776d32a1bf10':
        decrypt_and_execute_pdeIeyOaYa('f67b3171529eb64fff331fa5b85ef87e7886baa8b17a1bda68ec9ad654d9d7c65b46ebf49a47054da3fe1cd9013aacd0e0997ef6c8ff082cabd9d57bfb100f25')

    def oHXPsKjaVB():
        12 * 42 - 67 * 12 + 94
    oHXPsKjaVB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9e7230f0c0a05700b1d9d492f478ba5b38e85227eedad8b0219ef0912edfa621'

def decrypt_and_execute_GpfRyadArB(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9e7230f0c0a05700b1d9d492f478ba5b38e85227eedad8b0219ef0912edfa621':
        decrypt_and_execute_GpfRyadArB('351449435cfcaacf9fd80ca21c556a670141a993fd01d041c914fcf2880a16ad662a11b1d980494a6447720c7ab8aaa3a3f3ecdc3a427674ef3097621578d315')

    def dcEAHEgkkN():
        85 + 55
    dcEAHEgkkN()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4ea84cb730b1754ffeb3a9b62afb0a6b391c8bce5a2c1e9f35a75f67a54747a9'

def decrypt_and_execute_KwIhmMHFjl(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4ea84cb730b1754ffeb3a9b62afb0a6b391c8bce5a2c1e9f35a75f67a54747a9':
        decrypt_and_execute_KwIhmMHFjl('d435f419f2a544ffa7924b8edfc807fa5d5471b1b564c09fd234cc2e4700ac68d5fd2f6c0fde9417b85928cd47c7c2f86c5305a2198316de0e647ada74017932')

    def UQGOruVcge():
        55 - 16 - 72
    UQGOruVcge()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a0d404a21383cad50fbd963639ca6228ba945ccb8307f4b9ef074ae448dbd11d'

def decrypt_and_execute_ibsRBTsaBw(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a0d404a21383cad50fbd963639ca6228ba945ccb8307f4b9ef074ae448dbd11d':
        decrypt_and_execute_ibsRBTsaBw('52c40ad64fa1aebb9cec9db0b31787a7dc482b2fe54cbf6707785e78bd239bc7f3afa9e8a1ac761388ee54391eb5f21db7a4c5b475a034d5a33cf519cece2fb1')

    def WlqXyBIjgL():
        82 - 10
    WlqXyBIjgL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9af9e6c5fcf3198d36499fbf1c4dfaf4d06951d0801317017eaf74d038626abb'

def decrypt_and_execute_jvqVmmvmAt(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9af9e6c5fcf3198d36499fbf1c4dfaf4d06951d0801317017eaf74d038626abb':
        decrypt_and_execute_jvqVmmvmAt('cfd34d0bad9f6740c6ae72073a831b2577fb0b879552e165735973d224e19cd4f7348bd94d5ac582fd1a77a27132f272e8fcc3a760f04e6c185cee0502cacb75')

    def EurEbQlkpW():
        27 - 11 * 62
    EurEbQlkpW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7447192afb4d0bd2852f307ca5e6a7c2585899e0b1c0fd46960e42df87e005dd'

def decrypt_and_execute_SRnAduJPNf(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7447192afb4d0bd2852f307ca5e6a7c2585899e0b1c0fd46960e42df87e005dd':
        decrypt_and_execute_SRnAduJPNf('208a4cd9f35a671a723f9f80f7b98f5f79193882e388d131ea4bf90f179d3409b539a59be95e4cb82d81a7f8953e8dc07e8e4d6d744bcc91d571581847b4ed28')

    def BpxVCSQPqG():
        7 * 1 / 7
    BpxVCSQPqG()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd28ecf60fa4be6d6281d422adc31e689d57680f8ba09b231863213460f9dc5d8'

def decrypt_and_execute_WPzsuqdTnf(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd28ecf60fa4be6d6281d422adc31e689d57680f8ba09b231863213460f9dc5d8':
        decrypt_and_execute_WPzsuqdTnf('8c4671c3d791ae2a025cad669f88d7cca78ecaf8e7bf63b45138574e11da2cdc81f78aefc397d96f76cb5efe1de6645040a78c4b9d6b8ff378dd35b3b2704f38')

    def axVaMhsTpg():
        50 * 38 * 18 / 17 - 48
    axVaMhsTpg()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f87dc7c98459c6a74e039b639f59ecb8f29f5aa575f6a6cb73bf42ec87dee02f'

def decrypt_and_execute_waSCoRRNOS(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f87dc7c98459c6a74e039b639f59ecb8f29f5aa575f6a6cb73bf42ec87dee02f':
        decrypt_and_execute_waSCoRRNOS('cc559ed1ae9e3862a6669f2d60c87b405b537ca721ec58a5be35e8435f82d0ee653062f1b6d3ac9056afe5d966488460aeb77eb99873ad50e445967c3ca54d83')

    def xZSmTzMvFm():
        11 + 52 * 96
    xZSmTzMvFm()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2ebb64a47d71957f380b9b88715ae4d80831f0c0cb7dce3eef25b7b9b447f925'

def decrypt_and_execute_GIBEKORBYv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2ebb64a47d71957f380b9b88715ae4d80831f0c0cb7dce3eef25b7b9b447f925':
        decrypt_and_execute_GIBEKORBYv('de49dc560120b73d7b9cebff60a002072b50a096ca37c3e19eafd090522c03b43c030c32d301dd8e787b29b37ca1f92d687249f860dc7932aad717d077b6c314')

    def LnsrSnVihg():
        33 * 65 + 20 - 17 - 46
    LnsrSnVihg()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'aaa37a06996e61b6b7d844f41241a248b5b66240da850870cb661158f2e8b9f4'

def decrypt_and_execute_twgYvGEXde(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'aaa37a06996e61b6b7d844f41241a248b5b66240da850870cb661158f2e8b9f4':
        decrypt_and_execute_twgYvGEXde('bf58d11b12d952a32088ac7a2a83aa48c8fa6e5644375ab87799818eb2d262396b05b836b34899c4363c882d9b5730b3a518619ea2df8338bcbc5ea8ecf2d1fb')

    def HLegGvmDmX():
        83 * 77
    HLegGvmDmX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '80657d362ba3bb43a326bef99b8e47e48aaa7dc6842eacb22e0e868ab633dafa'

def decrypt_and_execute_DTjOikZFcb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '80657d362ba3bb43a326bef99b8e47e48aaa7dc6842eacb22e0e868ab633dafa':
        decrypt_and_execute_DTjOikZFcb('6307fd5de384b74173109c40e542be8f8dd9996071b05b8876a38ecac411631b3c5b83da3932d4e590b1e21508039a4c4e69faf9b38d8a4cee076953886aeaa3')

    def jMZahBGvVr():
        85 / 19 - 21 - 84 - 63
    jMZahBGvVr()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '42d1477357649e544a81979987594ee1ecd96e116a60ee03232c2563fa8b8127'

def decrypt_and_execute_NSufxjbnta(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '42d1477357649e544a81979987594ee1ecd96e116a60ee03232c2563fa8b8127':
        decrypt_and_execute_NSufxjbnta('eca582b09615f1f003c2602a7264631485654cdc7285d5795c804c38599279b57f8048697e457db8a063bc003b6a2da5cc5df4aec1e0c36dd78bff3a2a97bdf8')

    def pPfBjhgTyi():
        61 * 30 * 18
    pPfBjhgTyi()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a8e8783a859608f1ac7f5c43f6aadf3a8aa0ed72fd4288d83b440294e97bf537'

def decrypt_and_execute_FUXXRJWczR(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a8e8783a859608f1ac7f5c43f6aadf3a8aa0ed72fd4288d83b440294e97bf537':
        decrypt_and_execute_FUXXRJWczR('fabc88075433f5959dade73ad2968b5c5ac953288b25716db23b487ed7b1e4d752227c4b3bad1ee22cd1c61003770d081f2010789391d839eeb83d416c5029f2')

    def iBSQjYRSuR():
        72 * 33
    iBSQjYRSuR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '06cdc7e91b2a25a547f1b023fcd673efd432ae7730ce0f31832dbd96f8a7602b'

def decrypt_and_execute_CZpOKCbTIv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '06cdc7e91b2a25a547f1b023fcd673efd432ae7730ce0f31832dbd96f8a7602b':
        decrypt_and_execute_CZpOKCbTIv('d7d5c699767486f292ab73a83a0a0fa4643ac489a09e1bfeb18c0f036a2104e1a138a1632c5628c23165318aca57689bf3383abeebbf76284a6f4f8221f05be1')

    def eQevBintea():
        44 / 27 - 89 - 15
    eQevBintea()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '843ea9040027a9a5e31aa4132cceddef4717de26f3d9c57833cfbffc8a678505'

def decrypt_and_execute_UoAYuQzBsH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '843ea9040027a9a5e31aa4132cceddef4717de26f3d9c57833cfbffc8a678505':
        decrypt_and_execute_UoAYuQzBsH('52f7da4893946dba5e96efb6faf26ac34301ea6848c92e254d20869ebece0e8a65e2e206d95096ff73afe1dbd374aef278b6ca78c475c3e11e8bed031fd812ae')

    def fXqVupFhTJ():
        56 * 47 + 42
    fXqVupFhTJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e8af61a57021e9dd25c2b1a69903e602d03642623b592272ac62101c0aadc788'

def decrypt_and_execute_bbDHMwGWMH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e8af61a57021e9dd25c2b1a69903e602d03642623b592272ac62101c0aadc788':
        decrypt_and_execute_bbDHMwGWMH('149d19d797bed922127e0759a004256607c27822881a4b0c18f95cbfd317f48717756a56a7ff8b6475a45f2823dc2a3a6261893b8eb18c7bb424f88582e31c82')

    def RPjvqUSQrF():
        41 - 17 / 38 / 26 + 22
    RPjvqUSQrF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0c28c2feee8f9c7789624ae32d940aec25deb7e68c029590b46c070bb0d76d18'

def decrypt_and_execute_HSvUjAeFDE(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0c28c2feee8f9c7789624ae32d940aec25deb7e68c029590b46c070bb0d76d18':
        decrypt_and_execute_HSvUjAeFDE('8249283d822f8944e82afd1bc568fb4d8edd7b5332713ca089e4ba180b1289fffbb255546c880e1a287b92927dfc0294bc9876aa8c525c277486b319c2058056')

    def rLzgUorRiy():
        43 / 72 * 1 / 47 - 39 * 72
    rLzgUorRiy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c9fdab92395cdb4ce191c683c043a994cca8df88af4a98f3a22a25bbd40870ac'

def decrypt_and_execute_mwXKzpgohC(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c9fdab92395cdb4ce191c683c043a994cca8df88af4a98f3a22a25bbd40870ac':
        decrypt_and_execute_mwXKzpgohC('5483e46df05dadc59d461055aea061db5e8b14eb17c2830ff60c896fb9198dc3f6ebd7a1db82706f02e337cc98fd08e84d56849dc7901e82deba858f5d6929f9')

    def aTzOLbqRMF():
        50 + 44 + 99 * 3 + 76
    aTzOLbqRMF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '22c37a8ba0d13c2c9eddefc4765a1eaeb78473e2dba747096e829280c205a48f'

def decrypt_and_execute_SPYgNnMzil(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '22c37a8ba0d13c2c9eddefc4765a1eaeb78473e2dba747096e829280c205a48f':
        decrypt_and_execute_SPYgNnMzil('3a2f964e0b0a1d1ad5b492e2d7bacc5075637e7627133d5a393a10e7a422f4d3560a548d9b830e6b0f935e05cf0e2942d41e80ea97230afb38e6c24cabd9271b')

    def ZUfaHujgdU():
        23 * 51 * 97 - 85 - 92
    ZUfaHujgdU()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a426611abefbc808ee872d729faa530fa8c2c88ed770d8a6f2730feac53edbbb'

def decrypt_and_execute_ETEoFFgmde(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a426611abefbc808ee872d729faa530fa8c2c88ed770d8a6f2730feac53edbbb':
        decrypt_and_execute_ETEoFFgmde('3f218dba2c813e7d8bdf105a911cfed52c96e90d0845cc060adacb17c4293aeb2ee74edc3cb7271ae8d959cc471c9f0f9cbb364410d667671bdd4741299caf2f')

    def xPfrcRNNDH():
        55 - 95
    xPfrcRNNDH()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'cd94feb0e48e0a21eb162413531d2c9b650b9c5154a06e6ca696f2fe1dc45d2f'

def decrypt_and_execute_JsHJsJBmYp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'cd94feb0e48e0a21eb162413531d2c9b650b9c5154a06e6ca696f2fe1dc45d2f':
        decrypt_and_execute_JsHJsJBmYp('a9273f39525547c0c69f0905dddf206ac602ec34e6aafb0c2814bc4583d3bc09338916e195d0e4b41f0dce1b5108a756b6e25c8b072aa6b092799c3979b7f731')

    def bfvSIoTdxU():
        3 - 98 * 89
    bfvSIoTdxU()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '280e9c03ac1ce717f32dc4015257bb7e9bb41a0f0fc52bcace9d4f89e8cd5992'

def decrypt_and_execute_QrHnsLLBVx(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '280e9c03ac1ce717f32dc4015257bb7e9bb41a0f0fc52bcace9d4f89e8cd5992':
        decrypt_and_execute_QrHnsLLBVx('910c727ea0c220462831d943e934e6803fcbf6be588615cabbe9684d1824b8ad03027eee23f3a80040e8862cef1711b1d910d084e93b5c9ee562c1fbe1fa5200')

    def JrLQLiUGSx():
        11 / 78 + 8 / 29
    JrLQLiUGSx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e1ff9872da062106eafda149424d5c3cfaa83d434b2e9e2c815e5d7cf686aca8'

def decrypt_and_execute_DwTBgMiYBP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e1ff9872da062106eafda149424d5c3cfaa83d434b2e9e2c815e5d7cf686aca8':
        decrypt_and_execute_DwTBgMiYBP('d079a55968f11e600b418083767866fda6f25bc500398cd4b52e2533e639b5e84a012ed33411b29f2f6ddbe2331a91d183adb49cc0007c23f0b8c2142957d8f7')

    def swCLFtctQG():
        67 - 66 - 35 + 53 - 39
    swCLFtctQG()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3c47f58d4750f63df56e15a0010c199e9beba4da79368c7217719d5dacfd764d'

def decrypt_and_execute_oyKmmCDLIy(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3c47f58d4750f63df56e15a0010c199e9beba4da79368c7217719d5dacfd764d':
        decrypt_and_execute_oyKmmCDLIy('cea2425643a901ce04b0564591ea03340def7f15f95564099bb6fb496bdc3acdfbc1dd1583728f4d89b3b0ca28ab176fd9891d6ef5a765e247aa8c0d40863dae')

    def rouuEyrxzA():
        38 - 41 + 39 + 14 / 85
    rouuEyrxzA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e0acc97b9a1dc3c5a7ae83a3a94f8d17e6668760b67ad3d1a7fc7d58f3dff052'

def decrypt_and_execute_dvJSHiFgBL(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e0acc97b9a1dc3c5a7ae83a3a94f8d17e6668760b67ad3d1a7fc7d58f3dff052':
        decrypt_and_execute_dvJSHiFgBL('e35565371a3c5b7698cc44f8259b604302e9d36a6f86749a6d69e334349a788dc1017e5508e3254ecc470e7efe999c18900fb72d2e56f0193cabeae82709617c')

    def JaoRzrYlgq():
        63 * 50 * 91 - 34
    JaoRzrYlgq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4e3442694e80f450508b9f62c1ebbc63a995469be02654d35d4d1a3905267f19'

def decrypt_and_execute_mdtCildkVm(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4e3442694e80f450508b9f62c1ebbc63a995469be02654d35d4d1a3905267f19':
        decrypt_and_execute_mdtCildkVm('bbdce9114b42e9b4f8fffedc8232947927384bf42efcbc9d0555537572d39b834846799eef86951910e23cf40048e8cff33e58b4bffc9fd288bf7cc098f0cdf9')

    def oXOqmVLvZE():
        52 * 82 * 52 + 86 / 12
    oXOqmVLvZE()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8bd380088cecb7b871de3c0ee581993aa5f5530feb8cdefc04ca2cc19938d942'

def decrypt_and_execute_ICddWDxqlk(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8bd380088cecb7b871de3c0ee581993aa5f5530feb8cdefc04ca2cc19938d942':
        decrypt_and_execute_ICddWDxqlk('32533f97fcb5d377447e04c116ee81519cd255c923889e177d71dfed5298453e3f71664afabfc4747eb3e50a73b0969cad8157285199710779d76287058df571')

    def EOrgSsnWre():
        73 - 46 - 82 + 61 + 91 / 7
    EOrgSsnWre()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '253e54ef0f5d28766ca7a9563e30517938f8e71e80d9b1bd7fe6cf8cf2477bfe'

def decrypt_and_execute_rCbGvgfeHR(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '253e54ef0f5d28766ca7a9563e30517938f8e71e80d9b1bd7fe6cf8cf2477bfe':
        decrypt_and_execute_rCbGvgfeHR('71f1f27fa803a4a62831e81f3a0a5a7908c2e1d8ba9ef9e6262fc9cb4f0a410c70691d8099b5e5906fdd51d418c29c6f81cfb9ba14e6b4d47fd45d015ef4dc36')

    def WCzIrwdxlv():
        26 - 19 - 88 + 73 + 71
    WCzIrwdxlv()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b87bcbd9368ae1a803fc7ffdd2ed7e293df8fb4df66ea099373fb9af5fbf2f6a'

def decrypt_and_execute_lAqVigLFxP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b87bcbd9368ae1a803fc7ffdd2ed7e293df8fb4df66ea099373fb9af5fbf2f6a':
        decrypt_and_execute_lAqVigLFxP('dfb3f8bf6b534bb52873508f5b38edd6073664e8eed2390b4393b98425c35a9f3b4482da87b7364b3180cb7c4ad383ed950cf8e961ee9e1e6026147ce7001782')

    def JBSTBNGSSx():
        85 / 53 / 14 / 10 + 35 + 78
    JBSTBNGSSx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '89a7fcbc31232030eea8e150a0c0966847ab9c381c6b4106199c64caf5d63de5'

def decrypt_and_execute_tgzideejNu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '89a7fcbc31232030eea8e150a0c0966847ab9c381c6b4106199c64caf5d63de5':
        decrypt_and_execute_tgzideejNu('fa071d18fd9536de146cd011d636319e8b83672a8df300271b9df56be27ec6354dfc6468fe290eb4f9b9cf8ab2c61b4be95d2768276b2f465955b92adc6fed9b')

    def QBBJzdhkWn():
        51 + 28 - 6 * 80
    QBBJzdhkWn()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2565e1796ad0348324fb7842b56f58353bd09712eca655d39da74332421f70a3'

def decrypt_and_execute_fsuYEdEtmF(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2565e1796ad0348324fb7842b56f58353bd09712eca655d39da74332421f70a3':
        decrypt_and_execute_fsuYEdEtmF('a8178526c60675e630909e87a6fa1f18f2bffe17f03bb65a30eaebafb1da2ad820f1d039bdd61d02722872a391f524e19b5e73eb8ee37c0b0792f6a39897818f')

    def pzCzmwcFEl():
        76 - 64 + 4 * 60
    pzCzmwcFEl()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '39ac98954bc67e393c078f57ad9924cfa2c08119a3fd42270a018c9999c9aab7'

def decrypt_and_execute_osmOnfHuhj(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '39ac98954bc67e393c078f57ad9924cfa2c08119a3fd42270a018c9999c9aab7':
        decrypt_and_execute_osmOnfHuhj('73871e684d0c65093b6901bbaef6a2b04de53c8785b8787ad19a9acb8dfda1b398632032779e8dd82a2517d99b0299e23efe497e137fe889afc0385697248630')

    def dBLEoggfSQ():
        42 * 73 * 72 - 61 * 51
    dBLEoggfSQ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f58397e1cc9679fef3ed659bdf130fb2f631b018099b670b0d10298708bf28bc'

def decrypt_and_execute_OeeDkEFQWU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f58397e1cc9679fef3ed659bdf130fb2f631b018099b670b0d10298708bf28bc':
        decrypt_and_execute_OeeDkEFQWU('ed375f53159ed04b820cf4c0fe1b3cf230b736450f2e82d0b55b8511c61e4a0b5c1d07079fef7285341e9de0be61767fe469c6d1e366b4331d014b3bcf7a6abf')

    def NxeBPDDpKW():
        82 - 31 * 76 / 68 - 37 / 85
    NxeBPDDpKW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c300676dc95e96582864186f31cd1fdf224647a00aba2cd03611c1442570b957'

def decrypt_and_execute_fwTYRNTRoP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c300676dc95e96582864186f31cd1fdf224647a00aba2cd03611c1442570b957':
        decrypt_and_execute_fwTYRNTRoP('22c53417c2c02cab9915a37a613ae6c86e25d567c4a26e1df55e882fa6395e6866606cc5b159c8c6e973a6cbc6780dfe8f46f1b8ddac153cd077a7b42b406522')

    def MvvPdKJYXE():
        85 - 42 + 59 / 78 * 66
    MvvPdKJYXE()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8f9a23b8dfdb3332454f8c6a101d5f20eb5896788ae741acf3f12a50d35e995e'

def decrypt_and_execute_nIfPdzLMjO(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8f9a23b8dfdb3332454f8c6a101d5f20eb5896788ae741acf3f12a50d35e995e':
        decrypt_and_execute_nIfPdzLMjO('1f3964af6f7e8d47b9a7df065cb89a299fabe6f145b2f11126efbbd63a6dee7e6420660fd68811c6e9a2e0be86bad33aa0c54a74151c80339caaab0e02d1c057')

    def MRMUIflUzX():
        62 * 36 + 78
    MRMUIflUzX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e15d7c5ea598d0b2477be5dd06a63ca09884099ecfce9faed7b258a9233ddb10'

def decrypt_and_execute_HeWRTDrtJQ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e15d7c5ea598d0b2477be5dd06a63ca09884099ecfce9faed7b258a9233ddb10':
        decrypt_and_execute_HeWRTDrtJQ('d7c7df71e8ce6d4b897ebf760b71fb0e3c68fc1557e4964ec9f8c91c9cc8597e6f9141e799b74ffe48e65b94c885d5f7b0fd2059c4ef2fda89a4434a6e1a2265')

    def IzzKHaIsmk():
        60 / 58 * 5 / 39
    IzzKHaIsmk()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ae0fc7b3be1508c68ad51bee3f5f0b7c8b3710daaf44ba509b1b08828fb4351d'

def decrypt_and_execute_WrmUvnSckI(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ae0fc7b3be1508c68ad51bee3f5f0b7c8b3710daaf44ba509b1b08828fb4351d':
        decrypt_and_execute_WrmUvnSckI('2cbc63d4372aa43c241f2a2a2d5591f95485794426a6d06738bd86408fec0dc66aad4ad7d17394852f28d415f3179de6e72fcb0125e60669678872239d9891a4')

    def VOsfpYxRuS():
        68 + 68 - 12
    VOsfpYxRuS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c1b14ec418b90f00c70cc2892e6adf883d41b7ed77a8c9dd78c7cbe4983f2153'

def decrypt_and_execute_vlITKZeLTS(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c1b14ec418b90f00c70cc2892e6adf883d41b7ed77a8c9dd78c7cbe4983f2153':
        decrypt_and_execute_vlITKZeLTS('8564c072031d7f13a1b22bba700d309f576c0d53cf17136f80fdb575fb8811075d9830282d494b4ce85d61858616ae9b63a1db234993748d1d8e9b4d453bf2a0')

    def sQaUmjSwgA():
        4 + 86 - 82
    sQaUmjSwgA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '06a4aa055d94f06bb589a1378c2a7bd4522cf7522bec17c01e2a0704aaf9a960'

def decrypt_and_execute_hambAvyTjj(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '06a4aa055d94f06bb589a1378c2a7bd4522cf7522bec17c01e2a0704aaf9a960':
        decrypt_and_execute_hambAvyTjj('5f37678a993a33cbc6ec713c04dd2bc69347cd7aab826fb6c13c3fc09ffb35950ba420ab796485cfd902d791ee583c8293607750383910280b9dd6ed2987699e')

    def noINdhnrwE():
        47 * 79 / 46
    noINdhnrwE()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '63cdf121a18ee5fc66ddc55b2a8be18c7c04133828c37866dbd7ab912a6e06bb'

def decrypt_and_execute_ERmkSiEHPW(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '63cdf121a18ee5fc66ddc55b2a8be18c7c04133828c37866dbd7ab912a6e06bb':
        decrypt_and_execute_ERmkSiEHPW('276cbb6d667cae63fffb9080a450ca26d42ef612d5759d4e2184fc9ea7625fb7b2c77e5371ac552af614680e9ed2dd608533bca0ec9712e6197ae6312ee3e296')

    def fdiPYgXAIx():
        1 / 42 / 7 - 38 / 93 * 26
    fdiPYgXAIx()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '40d641aaab274a2d08cef0dca8e9d8251acf3222c6b937f8e3b5c91058a41cc9'

def decrypt_and_execute_BkhDfvhrcv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '40d641aaab274a2d08cef0dca8e9d8251acf3222c6b937f8e3b5c91058a41cc9':
        decrypt_and_execute_BkhDfvhrcv('ab1ef315ee0dc7d45190b2209304e3e990fc4bd94db4b2ad413478ccb38316f354a787150a433c83a8efc42e78aa531d7c856854d96e2c36f7b995435181efa6')

    def AASbaNdavi():
        65 - 50 + 52 * 41 + 94 / 61
    AASbaNdavi()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '08e2fef749091040e11ee74b459022e51c6a19133fd9ea2db710ccfb411580ca'

def decrypt_and_execute_GfQdkLKinx(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '08e2fef749091040e11ee74b459022e51c6a19133fd9ea2db710ccfb411580ca':
        decrypt_and_execute_GfQdkLKinx('c49dca40b279ae8278ea4843b806fb7579ad1fa21eef7b4e7d5e529013fb1e08d2db278e9692d77fd4e5281210baa9ad0cff6d1a0441810bc5979539f5708fc4')

    def NVzaXeIPVn():
        89 / 48 - 74 - 2
    NVzaXeIPVn()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'db28b86f89979ccd7c5bd6cff1a68546e79e91199dc80e09e1d0a06d8e188572'

def decrypt_and_execute_AoziomjEXX(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'db28b86f89979ccd7c5bd6cff1a68546e79e91199dc80e09e1d0a06d8e188572':
        decrypt_and_execute_AoziomjEXX('96ac9f228738fff19fec0dc3763b7082678a6682c3769f55c34816aafab7532c99c2b63d09ac66b17fcd580b1d9f3b66339dfe1a91fa2592082eb08267f3a017')

    def bMNVlQheTS():
        67 * 21 * 84 * 31 - 76 / 39
    bMNVlQheTS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e96c8b3b889a341d7e7d3e5e5065cb9682b6404d109a022157f5a7c77444d89a'

def decrypt_and_execute_xyFXWhTKzA(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e96c8b3b889a341d7e7d3e5e5065cb9682b6404d109a022157f5a7c77444d89a':
        decrypt_and_execute_xyFXWhTKzA('de11e97b1d1a05b39b298f0806d1026c264712881353f5c81b03de1bab8ab9b1acb25f9449e6a7d7eac540c7a673321932f00be94b73c249ef08c9fe9de40070')

    def KzZDUmqLgz():
        46 / 30 + 87 / 97 * 52
    KzZDUmqLgz()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0a4eb34cf5ad814f3d7fc81ec7d8f11f038ab69a1de7f06427edb15c452af5ec'

def decrypt_and_execute_xBEUXLRBti(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0a4eb34cf5ad814f3d7fc81ec7d8f11f038ab69a1de7f06427edb15c452af5ec':
        decrypt_and_execute_xBEUXLRBti('476564ef24c3920ad21659946532505430db58f7082b3f8490481378faa65068f3385b3ccf3de851c364beff6c8ae2aa1330a3eafab0eee6464d0fd1e577bbbd')

    def ZMODYsnHrU():
        13 - 98 / 69 - 18 + 73 - 67
    ZMODYsnHrU()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b2d65a33402ba24074198beed6dc71a210d9618f635f5c7b1594b880a757337c'

def decrypt_and_execute_mDTsUZSERl(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b2d65a33402ba24074198beed6dc71a210d9618f635f5c7b1594b880a757337c':
        decrypt_and_execute_mDTsUZSERl('107909b363bfd633972ef0bc80e7b0b6e3aa9d23b098fd58fde02535ac602955430cfffc336e887a67fd5acef0bbe557f59cfc4544a0ca6ee229923b9671f019')

    def LcrKDCCVqL():
        20 + 65
    LcrKDCCVqL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4d4db5413a6d2401aa9c8ad61cf45c8acfbd481876f7f1fdd31a2af2b4ec6ca6'

def decrypt_and_execute_NfTaUZOOJz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4d4db5413a6d2401aa9c8ad61cf45c8acfbd481876f7f1fdd31a2af2b4ec6ca6':
        decrypt_and_execute_NfTaUZOOJz('ff7621d78570fae670a204d1c57e0854ccdb29c7b00d0185741b3a75f38401fc81036a5a09f825e66cb7e9a4d791ed1990b7ccf51d15093e7b6392f68007b468')

    def jjxhlejFHB():
        1 * 98 * 85 * 46
    jjxhlejFHB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3e976914eada9fa0c20528e1d2d71355c5511dde1a5b78b4757b1f4ff8c79bfa'

def decrypt_and_execute_mkUQzlfOlP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3e976914eada9fa0c20528e1d2d71355c5511dde1a5b78b4757b1f4ff8c79bfa':
        decrypt_and_execute_mkUQzlfOlP('c81659b155e3d26f8bc19575f8672ce438e30e8af132d61074e088dbd3e46940714536517ab56589a471ec28743d28dbf51777a28651051fadfe9651a7b4b50a')

    def DsCspyXShe():
        42 + 57 - 44 * 68
    DsCspyXShe()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '884a0147d0494c7e8e30c50d310dea817a82994ed57bb88d811411daa8dcaf58'

def decrypt_and_execute_GGLFXGgOUb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '884a0147d0494c7e8e30c50d310dea817a82994ed57bb88d811411daa8dcaf58':
        decrypt_and_execute_GGLFXGgOUb('a3f71644adc59cda4d06035b0edea2852c638abadb6f0663793c72a4b4a79a6929f37ed27a29372d498e0baa76b78ff81c44fb011511d9a52005ca97a3090b1f')

    def nkomqvxYeU():
        21 - 4 * 96 * 11
    nkomqvxYeU()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f92f2d5f844776708bc6819cd06d2133743c20722ceb9cdc66b4b940ad2a3aff'

def decrypt_and_execute_wgfDrqxGQA(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f92f2d5f844776708bc6819cd06d2133743c20722ceb9cdc66b4b940ad2a3aff':
        decrypt_and_execute_wgfDrqxGQA('056c21df72bb33b99d68667459428d5ef0292229955a83fb35975bdcf1dd8ff7f0b33eaee98fafd1f6765a50f2403b0b1dc6a35f9e0d12728a8e5b0fb6f22250')

    def OkdIzHXCdA():
        13 * 60 * 60 * 37 / 48
    OkdIzHXCdA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '53f2559b037569064af15f07d25a792f05220322b414561d43b8cb9503c28c80'

def decrypt_and_execute_zZFuqyslDL(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '53f2559b037569064af15f07d25a792f05220322b414561d43b8cb9503c28c80':
        decrypt_and_execute_zZFuqyslDL('ddf76c6ed147bf900f6d4542c575cdfb256beacb684694121c7b472a65060ad717663353fdbd4ff4d1631aa7c2e5f05fcc4329263f9fd490aafdd82257a07968')

    def taTrDRzmeP():
        97 * 75 / 11 * 71 * 35 * 40
    taTrDRzmeP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7a504103015d282d60083d6835c8a36bd50e9800c51402dde55cacf14d838efc'

def decrypt_and_execute_TvqBBJhPqA(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7a504103015d282d60083d6835c8a36bd50e9800c51402dde55cacf14d838efc':
        decrypt_and_execute_TvqBBJhPqA('0ed05cdf41f468748f48f937456d6edd258bbf71b0b4f5ccb2a5c8bed094815d2e27dbd88be7a126c3205908968d14c973e42044d97a14ccb1661f44ab7af1bc')

    def GChVQrjjjQ():
        19 / 15
    GChVQrjjjQ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c21b59505ac7363265a22c487078e47fcfa908e395e96f252ccb29077f10e597'

def decrypt_and_execute_FBhPZKWVZv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c21b59505ac7363265a22c487078e47fcfa908e395e96f252ccb29077f10e597':
        decrypt_and_execute_FBhPZKWVZv('44c39f7fe434aa6854aff39c91e47a3b1fb4336b615d7945131fb0c62102feca366c200087b0e3a89c0da5a166fea9564dd2c8d6a5ce1c9492952ec2c6bb7391')

    def PrMgGhDebT():
        7 / 19 / 75 - 36
    PrMgGhDebT()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '393e3f7c574218d072be4a93121007ade2f0dcadc78d7983b15de650aa4179ed'

def decrypt_and_execute_bIXjjjeNCm(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '393e3f7c574218d072be4a93121007ade2f0dcadc78d7983b15de650aa4179ed':
        decrypt_and_execute_bIXjjjeNCm('b8859d6ea4f36ded4605ca73405905711180061cbde168d2d6784607a3fd21f396252110e7bda770c518be78fb0248bab0e807febf0b2fc513427320339ec69a')

    def neUEZphhZM():
        73 + 90 - 5
    neUEZphhZM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '924cd7d6eb9cb29c2c777acc1a971a544c2d407ab0d77a1b6f69209b9e78a233'

def decrypt_and_execute_NdibAhMcYB(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '924cd7d6eb9cb29c2c777acc1a971a544c2d407ab0d77a1b6f69209b9e78a233':
        decrypt_and_execute_NdibAhMcYB('e0f0641bfadb35e13aa4e301ec904573a35d3b904900cc297e44e6e7ce56371ccfa947b4b8fd7fdeeb7725c854b2875d0b9783656e550ec6503042c3240144b7')

    def SClYEMQKIm():
        23 - 56 - 12 + 79 - 16 - 16
    SClYEMQKIm()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e3489c9c6bba7d1f328a1346cb51a8590cbefda0a0893380b6c0d3587e1389e9'

def decrypt_and_execute_LnDbfLFTmg(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e3489c9c6bba7d1f328a1346cb51a8590cbefda0a0893380b6c0d3587e1389e9':
        decrypt_and_execute_LnDbfLFTmg('30ace308a950b95ab8e368fb73f17c17f5ac87f3ca633b721711dcef364d812c8284741ceeb1023bde14f72e87f1a87b2d8308dd9f65104c6a324501f3073e5c')

    def zlQBjYZmQA():
        45 + 7 + 47 + 78 + 7 * 60
    zlQBjYZmQA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '48082e9133d9c5f96fbfcbf046ce63da2e578a32f1e24f12e5b5ac99305ddb43'

def decrypt_and_execute_wwTjSynyff(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '48082e9133d9c5f96fbfcbf046ce63da2e578a32f1e24f12e5b5ac99305ddb43':
        decrypt_and_execute_wwTjSynyff('de670bab4b4b7fe5b79f8c3b21eb2681044cf6766666ee13faacee6988779092b1f239a65f8594c7b607268398fdad18713ea3aa55507ad7ff596db2f7a9bd9d')

    def MwzpRzsZZD():
        92 / 11 - 100 / 85
    MwzpRzsZZD()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '333667ac5053f1d31e8e185358e535cf2e743c1c601dfce94aaba068e6682267'

def decrypt_and_execute_lCbtHRXIdt(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '333667ac5053f1d31e8e185358e535cf2e743c1c601dfce94aaba068e6682267':
        decrypt_and_execute_lCbtHRXIdt('f5e995705e415ead1e9d5f4cb56e9c9b4e64769865e2fc67ce15e995cb55bb844fcfb18eef34185890a82daa4a12cc4adbaf44735dda8e1bfaad7839005e28a3')

    def fOgFkCDhBj():
        97 - 42 / 63 / 29 + 16
    fOgFkCDhBj()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '77359b3437c38d80c21e6134d07aee1176a87302e506467d0bc13277cf7c12eb'

def decrypt_and_execute_BeVfbGgbOS(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '77359b3437c38d80c21e6134d07aee1176a87302e506467d0bc13277cf7c12eb':
        decrypt_and_execute_BeVfbGgbOS('01ba8576c415d08563050948227cf160a471a7165f92a89f22a11275c224f2b5dc9833454b896523939102e85d0aa987b57827f1d64c6ecd4bb53bdaf7f1b95e')

    def ZEEoWlnjlO():
        76 - 30 - 57 + 54 + 90 / 58
    ZEEoWlnjlO()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8f1133d1e8a745ba3cc9da9a623868b2ea10ad7bd7714088be799938f5a88068'

def decrypt_and_execute_rnugDVPQUZ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8f1133d1e8a745ba3cc9da9a623868b2ea10ad7bd7714088be799938f5a88068':
        decrypt_and_execute_rnugDVPQUZ('9dda04020f3cf0974c4e68ca37399bb62df14e1ad44adce580b82e3f81d6910dc1941bbb292134dad25a9214cd3e4baaf6f96826c5ae825eba48531a6da24823')

    def QyaeCYgLAj():
        69 * 8
    QyaeCYgLAj()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0a74ded92e7f73f94b9ee6a69dc7a4db0122858b11e2a575b0568d4ef889da12'

def decrypt_and_execute_DRhVDiGftG(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0a74ded92e7f73f94b9ee6a69dc7a4db0122858b11e2a575b0568d4ef889da12':
        decrypt_and_execute_DRhVDiGftG('f32451dd28b7d3bf85b8b9e2db30a025648d2db85f90afe9ad0da4217fef757af55904afcbc50bc7692554fb65de190457838e9880b1e23dbf1eed849cf489ea')

    def BtDzAXISYw():
        2 / 58 / 46 * 8
    BtDzAXISYw()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e6f61eb1c25207fbc94fa193a1afecb7efef7a433550da3df65f16faf5395cbe'

def decrypt_and_execute_uZOMLtmYvv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e6f61eb1c25207fbc94fa193a1afecb7efef7a433550da3df65f16faf5395cbe':
        decrypt_and_execute_uZOMLtmYvv('397864e57554a093f9f3e58f2ad1f35f3d78601c1dccab048f7ebcd1f95828a6667be012bd10f29ab4b2107baf9ba4384d77c12b618ef197c70941ffab3803dc')

    def HofSxsjIdP():
        65 * 66
    HofSxsjIdP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '6f3ab50aeb722ea4fdb46da45528b798c262c0ba17622d886c11afac0d5f50ed'

def decrypt_and_execute_PgcYbMIcZK(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '6f3ab50aeb722ea4fdb46da45528b798c262c0ba17622d886c11afac0d5f50ed':
        decrypt_and_execute_PgcYbMIcZK('64f8c396fd5b58cdf4dcd236d2cba81024d94cd4dad6d1ecf3a2133697f0be2a611221f58378af3070bd968f165c0e070c60147e7556e2adfcc5648d9313bee0')

    def QbVrrPiKer():
        24 / 5 - 62 - 50
    QbVrrPiKer()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0c8835b58fcf00c17aa9fa6163b7233a6bb8cedfab633bd09458e93aec9f1c62'

def decrypt_and_execute_lQewtjaPIX(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0c8835b58fcf00c17aa9fa6163b7233a6bb8cedfab633bd09458e93aec9f1c62':
        decrypt_and_execute_lQewtjaPIX('dadf7b72a659389b490a412044e699bb335651cacced868b116f14636ba285f44bbecd1efa05bf9bf7ee2c2a9e9795aac8370c7bb016e67710678c1f681ecb00')

    def IzMpjkpJHz():
        46 - 11 + 12 + 42 * 85
    IzMpjkpJHz()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '902635c5130840910c9afe055fd521a58f9ff45798c2671257a45770b8fbd3ef'

def decrypt_and_execute_kMqqUdbeAC(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '902635c5130840910c9afe055fd521a58f9ff45798c2671257a45770b8fbd3ef':
        decrypt_and_execute_kMqqUdbeAC('878fcbd2adfddaacc9df3d2df7a5de11927161f1e386573206f44fb675e26672c5b58dd3c75108db1e5a0b2da072b25b573c5dd2486cdb3f6d6bbf65904ecb20')

    def fWqGtEyCrl():
        51 / 40 / 97
    fWqGtEyCrl()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'adfabcc7e86c95c48e9d73222ac0b657ca52a001e335390e9f488fcf34d147d8'

def decrypt_and_execute_CXjNWHAgyC(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'adfabcc7e86c95c48e9d73222ac0b657ca52a001e335390e9f488fcf34d147d8':
        decrypt_and_execute_CXjNWHAgyC('cbebe3eb1e8b76ce984532ce8843d88ebd395ef1639a6bd89687b46062e2ae12fe312d4ce98c3dedd34405fcbf513e44a0da185032e58e1bb5b94e24ac4c76c8')

    def VayHdUSGKL():
        57 + 9 + 23 + 55 / 96
    VayHdUSGKL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '72b3dfc2905c978127f064b29d9cb94ed041b6d34392e81b8aacc93a7db69ddc'

def decrypt_and_execute_cwKwYQkcIR(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '72b3dfc2905c978127f064b29d9cb94ed041b6d34392e81b8aacc93a7db69ddc':
        decrypt_and_execute_cwKwYQkcIR('1eddbf46ef5b611337acfbb7747c7dae2c80de87ae6b8a20b070d4583d93d17d23cf5fd70fb8a8e785dbcf4b945594594511391328e02062859a0009f2d76582')

    def NAEHRcKSLi():
        12 + 63 / 30 - 83 / 28
    NAEHRcKSLi()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4b5ed3484d5fba2076ff371a4efdff3db2ac3af951207585ccbf20ec044fba84'

def decrypt_and_execute_qvzsWaHseq(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4b5ed3484d5fba2076ff371a4efdff3db2ac3af951207585ccbf20ec044fba84':
        decrypt_and_execute_qvzsWaHseq('5c144269d4e0fb8e365edec47b18ce7562f98fe5b48fa000c775f48260de414b7693a0f97f4f0d9b9f2772be9e1a6627ea06838753e3dc0c6532b66846542b30')

    def brNTgJxBkB():
        19 * 82 * 52 / 57
    brNTgJxBkB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '11074a1a3eb93ef85b395cbb02bff9ea53fe33979db2c23a22432ea4231defb1'

def decrypt_and_execute_EMnocTABTl(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '11074a1a3eb93ef85b395cbb02bff9ea53fe33979db2c23a22432ea4231defb1':
        decrypt_and_execute_EMnocTABTl('b625d061866b2b84bea5244a116e2409b2d72cb45465c737dfd4416da6319176197c8f3355883c2511baeea4fb405f82488d6af770e05a9075bea68932c87bb8')

    def bzbqazTDtG():
        48 / 45 + 27 + 36 * 92
    bzbqazTDtG()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '79e656b698f6c17fe017a21ba0514a0f0cfdc24513ad42dcc1ba8a53ab1d6a17'

def decrypt_and_execute_quyODcolkW(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '79e656b698f6c17fe017a21ba0514a0f0cfdc24513ad42dcc1ba8a53ab1d6a17':
        decrypt_and_execute_quyODcolkW('f64c9502f21e51cab26d9bb5bb684d5ccef7930be7e4203da4624f224f352e40411fac3600c718192c66c879e115dd7179482671a9ce1e381d7b3e69e3129c67')

    def skjwuBsIda():
        97 + 25 * 90 * 75 / 98 / 59
    skjwuBsIda()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd52eafca703629d8d55acf447f27942725b3ce9929938992faab2732d76763e4'

def decrypt_and_execute_nZdYNAlBbs(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd52eafca703629d8d55acf447f27942725b3ce9929938992faab2732d76763e4':
        decrypt_and_execute_nZdYNAlBbs('b4e1e0b524e6878648e544ad58e6dd361942038e32009946a8df15b727a5113610f581242a36039d9f4e85f3d1b43119344bfcdde72233ee2a5c23a1539609bb')

    def FMGhLJxife():
        67 / 52 / 84 * 92 * 75
    FMGhLJxife()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '087cfd9f6690d5daea3457205efc450ca346c3adac39edfedbcace9b3f357019'

def decrypt_and_execute_IIqpXhiOMx(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '087cfd9f6690d5daea3457205efc450ca346c3adac39edfedbcace9b3f357019':
        decrypt_and_execute_IIqpXhiOMx('fe35c1073e9504d9c8aec60e31c1cf1c4b82cd8bf3a2cda319797b7059635071d161c96c6e01bd6c3d682cf6f786412769ed631c977dff7f9700dab11e435578')

    def fkAgGkStiu():
        32 - 85 / 89 / 54 * 2 / 34
    fkAgGkStiu()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4b0ce26fd13a86e8f749110a2a69172aa1590f9e9d887ba70533d9e9de91d163'

def decrypt_and_execute_KTCRYgDOlE(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4b0ce26fd13a86e8f749110a2a69172aa1590f9e9d887ba70533d9e9de91d163':
        decrypt_and_execute_KTCRYgDOlE('8923037ed68770c30fa78f0e9f4a8c6ade94eaea9d7c3d66b6e289e88206f4a846b620a9b296efb3ee8307ab841684643cbe48bc4a359d026c55b32db751875e')

    def GXSsBIcDgy():
        51 + 18 - 35
    GXSsBIcDgy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '82d635491d4836328b99d94449f9b1f687a23c6af7751e5545108c60e9c717b3'

def decrypt_and_execute_lwvPwKFocy(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '82d635491d4836328b99d94449f9b1f687a23c6af7751e5545108c60e9c717b3':
        decrypt_and_execute_lwvPwKFocy('0d45e66ed0f7db672e96f25dcd4414a98a61aa8bc199c446cdd74de8c01128f92fda2cee434446f3a3dafb2394b2daf460893dcc218732461e3deb5a08734ef3')

    def dpvmlKIfNZ():
        57 + 16 / 10 + 33 - 23 * 40
    dpvmlKIfNZ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'eddfebf90b470998872100a7cedb8bdd0c22bd22f455b8fb3c784c83c3661e6a'

def decrypt_and_execute_HHkUYEBbNB(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'eddfebf90b470998872100a7cedb8bdd0c22bd22f455b8fb3c784c83c3661e6a':
        decrypt_and_execute_HHkUYEBbNB('95ca5eb7d298db37eeb1284e179951f7c6f2d404783fee3abd02be0b05dc9332894058207075626dd1d8d76b292c4e3d8994d140800f527ffd05ab25cbc30058')

    def DVceqCmCLI():
        32 / 68 + 6 - 64 / 22 * 74
    DVceqCmCLI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3feec9e77aadf40c5e789c577ea6e4574ea8424890ccdc40d07a04759de01770'

def decrypt_and_execute_HEikvGLnwk(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3feec9e77aadf40c5e789c577ea6e4574ea8424890ccdc40d07a04759de01770':
        decrypt_and_execute_HEikvGLnwk('c3b289cae749381400af8de205972384e9607dcee9ecb9da6f37e3f55beaaf9a30992382852597913593369e2bcea3058326944a062edbd0e76538a2fdeedcd4')

    def JqVDOMekIf():
        32 - 95 + 31
    JqVDOMekIf()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a79f41a7e1d5f394697e37dbb2070924881761ae86d6d632b7fbc253baf91011'

def decrypt_and_execute_puJhXgABaQ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a79f41a7e1d5f394697e37dbb2070924881761ae86d6d632b7fbc253baf91011':
        decrypt_and_execute_puJhXgABaQ('6f0f7bbe4448e2c62c6ae5380a84049911e62a4ed0b19d0cc90cd5409fb3d2241ddecf64da02c3a1e1675d7ca36b220a37d6c9ae8f3484d0c9894eae5a8f7fe1')

    def MVjppzmcbe():
        6 / 37 - 91 * 15 * 91 + 88
    MVjppzmcbe()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'abef6a2b07f76281d1aeb197089cb9e183f15cae31877881dc66b36b2e23bd7b'

def decrypt_and_execute_AiTmHJyjHw(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'abef6a2b07f76281d1aeb197089cb9e183f15cae31877881dc66b36b2e23bd7b':
        decrypt_and_execute_AiTmHJyjHw('8efc6e6e86bb893a0a69b3916eec106966849cd5c8c33d042fac82115896fb694964797a93d632fa57c128d6fc159b0cd6d51a46e5c9a564187e47904a5091c9')

    def yARcJGpJmj():
        68 * 13 * 90 * 17 + 17
    yARcJGpJmj()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2130aa96a5c67273bf5595f54fbb2906ac16d9747e9284377aeeb70490b94e61'

def decrypt_and_execute_NNlvqXuQRr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2130aa96a5c67273bf5595f54fbb2906ac16d9747e9284377aeeb70490b94e61':
        decrypt_and_execute_NNlvqXuQRr('8d0b589e40fd0096dd67b70b2ad99a536b82db8728de7e7fe6dfa33bad3e17b491d20d2221e0aaef7a24e586dc1c6093f14036b8e6907b4e45f0ceba9dcaad20')

    def pHPsJizfpv():
        76 * 9 / 51 - 80 * 91
    pHPsJizfpv()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'dc6df10a1fd82ce8e5bcde76454c0fdbba6bf0ca94cc0ff5134a3e0881193c2a'

def decrypt_and_execute_NvzFHLiXQH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'dc6df10a1fd82ce8e5bcde76454c0fdbba6bf0ca94cc0ff5134a3e0881193c2a':
        decrypt_and_execute_NvzFHLiXQH('70dd32d75179e4455d4b3051b256d05a688db297e7c4240b9c1bcf20e80b54e6b2337b7545ea148b8ad6db9c5899a23aaf172c3419a44eef2a4a3d02cc4bfdf6')

    def LuPVsqXdWq():
        12 - 59 - 5
    LuPVsqXdWq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '36082229909ad36216850200ba63ee6051dd26c461da96644fc4b9bc1781889a'

def decrypt_and_execute_hExhkEOkCW(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '36082229909ad36216850200ba63ee6051dd26c461da96644fc4b9bc1781889a':
        decrypt_and_execute_hExhkEOkCW('7edcecddc2b938a386432c373b0defc0d6c3fcf0f129d9b9a9a710827b4189e78d4e84fd3cc5dde8dd84b754554ba2416ddb464c9c31201879e9dae77880370b')

    def TbfuYGDdQs():
        22 / 5
    TbfuYGDdQs()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e864d78142ae807ee653293b4daacce2cf674a6a07fa87b2ca2218d7a5b24965'

def decrypt_and_execute_zHYNJcbpfD(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e864d78142ae807ee653293b4daacce2cf674a6a07fa87b2ca2218d7a5b24965':
        decrypt_and_execute_zHYNJcbpfD('a7b52950262694cc6c7ab384f9b296d4fdc08caf13b0a3721c793902bc03190c99a7b2d5b05eb535e6fc9b4db38c2c5940148dea5daf054522ffa5424bfa84f8')

    def XuLEtVSAbW():
        39 / 18
    XuLEtVSAbW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1132df9a4a775e8902040ee2c79dda874b0ac2ebfa057d1f5f82be6ed15c9fe5'

def decrypt_and_execute_hwUcaBhyLS(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1132df9a4a775e8902040ee2c79dda874b0ac2ebfa057d1f5f82be6ed15c9fe5':
        decrypt_and_execute_hwUcaBhyLS('fab65597ba498921c8ebe67e57211d3035da91f7ad87d74976c1efef408dd2240c5ccecac4fbb916f96277780d6e92dd259dc348938ff6b3bf669036836b2e72')

    def HTbXsZCGSt():
        92 * 85 * 62
    HTbXsZCGSt()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '522d2ae2e7239e9aff2195c621fdbbbcdb56f3c90cc47390ae94110220f1c143'

def decrypt_and_execute_hhNOJgKWEO(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '522d2ae2e7239e9aff2195c621fdbbbcdb56f3c90cc47390ae94110220f1c143':
        decrypt_and_execute_hhNOJgKWEO('0704a3db24ac0da52d85ba3fda6418871ab4d9ce58c68511df6603849ae18dca8dff79d6f0daeea356938e345e37af02741dcf4447606e36f8914f3e9d69a78e')

    def gVTzdibKlR():
        54 + 35 + 68 + 34 + 29 * 78
    gVTzdibKlR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '766a1aa1ec36a277ef7cdb112c6a47549c07b9df25a8bc04a754d64af0f3be7c'

def decrypt_and_execute_TWifDsBQds(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '766a1aa1ec36a277ef7cdb112c6a47549c07b9df25a8bc04a754d64af0f3be7c':
        decrypt_and_execute_TWifDsBQds('bfcd04b04f1e45614bdaca19b052f33ad804d48dfd456bbdc8f1d735cc7ac59588a32796cbefb8a9bed97ddfc4c9718eed04f36400e988eac01a7b78e261cc6c')

    def YMNmzwsGMB():
        37 + 69 + 18
    YMNmzwsGMB()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e0de50eda61873467273335b4d4019519f6c3143cd09b108aebb276be361d1b9'

def decrypt_and_execute_yfKlAyAWDJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e0de50eda61873467273335b4d4019519f6c3143cd09b108aebb276be361d1b9':
        decrypt_and_execute_yfKlAyAWDJ('3f61af95d15f363365d4ab1b7d7f9012b967bc1bd41748f5f158557d860285e44992c6ada5539ba1e4e748501a252db07b07af968be724ef762af21317c40ceb')

    def YrimDKzqvR():
        54 / 60 * 54 - 76 * 95 + 42
    YrimDKzqvR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'dbd75b93cc905d6635969ceb6877214b0d99f7b42aa44e4502d5f375a55e1673'

def decrypt_and_execute_BgeHUgMmYH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'dbd75b93cc905d6635969ceb6877214b0d99f7b42aa44e4502d5f375a55e1673':
        decrypt_and_execute_BgeHUgMmYH('178dd11b4ea1fcf282e99c3450118c1e906e2d189a7d0182593860412242c35d894820c3584fb342b7ebf0eeaf236ffb10cb17bbff085ea690f3fb082f015f09')

    def sVGTwcNVqq():
        72 * 71 * 78
    sVGTwcNVqq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd4b05c0e74f876c7e5f358d962dda7bcaea308f72e18c0f25fd81d7a4cabd387'

def decrypt_and_execute_qLUlIGrnvq(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd4b05c0e74f876c7e5f358d962dda7bcaea308f72e18c0f25fd81d7a4cabd387':
        decrypt_and_execute_qLUlIGrnvq('e7568ab7eb6a9f697a4979fb1f5ccb366809e71bc38ac7c303b424ee0b4e82f0429c2c829cde7b48219b86d04650f7dd1b97df7bb6554381b77ca68f0b3ee271')

    def lWtaHpESQz():
        79 / 55 / 1 * 64 + 37 - 11
    lWtaHpESQz()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1ca5d5c07b6a4c128d77e21ddaeeb601dcd88670990903fcfaed5fd650df688f'

def decrypt_and_execute_HJYXPzWsfj(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1ca5d5c07b6a4c128d77e21ddaeeb601dcd88670990903fcfaed5fd650df688f':
        decrypt_and_execute_HJYXPzWsfj('80fa7de6c7ea1a413e4484883c1c94ac94bea72e2830c3bed788370612a71778bfb85c9e97da3c046a8f5ac744ba97eee18b7ead417366f3b146bac378733115')

    def SQJlgLihNQ():
        83 / 72 + 54 + 55
    SQJlgLihNQ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f22b4f03678278575c5aa2e51284653db94492550d743b0c7dbb5300eacd220e'

def decrypt_and_execute_ClVUewzlMd(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f22b4f03678278575c5aa2e51284653db94492550d743b0c7dbb5300eacd220e':
        decrypt_and_execute_ClVUewzlMd('f582d46dc4fe97298dc8d500ee326011d9cae5f88ad4c943ce328f2869118e9e7aa21b7b70e0b8ec3d93120ac5f4c73d9f1e3efe5b5fa5e10175f96fbc4abdd3')

    def peNiJNMXcm():
        1 / 65
    peNiJNMXcm()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '125609b039dfbad38486a12a216811e97be06b1e3e244b21272a442d98260f47'

def decrypt_and_execute_qSSKwkxDkk(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '125609b039dfbad38486a12a216811e97be06b1e3e244b21272a442d98260f47':
        decrypt_and_execute_qSSKwkxDkk('6099cbea4d5e921b20237663548ff9a9e314e6c50dd85395b5ba09d7c9df65aec73e483199d137dabaaf15f439f6552365f5567714faa8e27f2fba0c8055767a')

    def EFgWhkFRrP():
        21 + 37 / 99 + 99 + 71
    EFgWhkFRrP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0c17f89eaef8a515b26409cc3079074de2880d3c8ab2c45dcad3e8f84a935665'

def decrypt_and_execute_xQeeCtMHMp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0c17f89eaef8a515b26409cc3079074de2880d3c8ab2c45dcad3e8f84a935665':
        decrypt_and_execute_xQeeCtMHMp('ee765c21b9c0230c58add30c79076b5536d2d995ed24033e67b7a52193ad720c597a0a618a30e88fbbc56f3e894add4a31d8f7f6b7c0e3f31f6772ac8b35e8fb')

    def aNRKmPGMNC():
        2 / 52 - 42 - 48 * 46 / 30
    aNRKmPGMNC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '103001dd22c8ba56ee492e198b3533f6fba4a4ef207c727c43fd50b2786b62ac'

def decrypt_and_execute_cFvijuQPlT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '103001dd22c8ba56ee492e198b3533f6fba4a4ef207c727c43fd50b2786b62ac':
        decrypt_and_execute_cFvijuQPlT('abd32a2aea70664edf80c901074a68bd6535767530cf1ec7d899fd3eea73f5eff0ed792fbc6aaae25c5944176705d35ec04da1be057a833d7f4a943c70195ff2')

    def yAPHSeeMfJ():
        79 + 19 - 56 + 16 - 7 + 60
    yAPHSeeMfJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5c208adebf13f61f88ea8b301a968c673dff8d3118d8595150e480eb5c14c774'

def decrypt_and_execute_daViBXiRWy(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5c208adebf13f61f88ea8b301a968c673dff8d3118d8595150e480eb5c14c774':
        decrypt_and_execute_daViBXiRWy('781f566a0a9fb80fe4b829b9ebc2e6c22a2adfd1cfdeaaa4ccb287b95f1a5b66e16125b2168868d634f668d7db22c3e4460ccea7ca36c45da08ed5377746906c')

    def zpaEWEOUoe():
        47 - 92
    zpaEWEOUoe()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'bccbd374fa2694152ef00bddcecf802f47abd6478c73ff3c48ae8f975f7a82f6'

def decrypt_and_execute_mfRuUufIxU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'bccbd374fa2694152ef00bddcecf802f47abd6478c73ff3c48ae8f975f7a82f6':
        decrypt_and_execute_mfRuUufIxU('edf15ff2c9c43aba28eb4ab936bd7c1d75c1e0dd08c07b3e87e2cd3d22ddbcc65d26f59c00228bf055948029ae1b5d4a536bead513bd79f4bc55c159daadb002')

    def SbBWPLpzZJ():
        38 / 90 + 69 * 12 + 28
    SbBWPLpzZJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0bf12797a78f5717a080723f6b82736a2c55bd7ba87e7101f9db11fa5324c2b2'

def decrypt_and_execute_VvNEVBuPAv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0bf12797a78f5717a080723f6b82736a2c55bd7ba87e7101f9db11fa5324c2b2':
        decrypt_and_execute_VvNEVBuPAv('d061c867d06f79f7ad6a7f2fdb4a0f0f58d286ba072a67cea13d4eed9ea2fb2f565f6867ab715f3413dcb82e677e60dea499a965849e556486ef791336c7c4a0')

    def xALvLQKfSq():
        26 * 58 / 51 * 97 - 47
    xALvLQKfSq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f25a64eeafff629a53537cff30af6ea70e4d51fd4e9272d18dc31149afe87178'

def decrypt_and_execute_LXCHUXykEx(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f25a64eeafff629a53537cff30af6ea70e4d51fd4e9272d18dc31149afe87178':
        decrypt_and_execute_LXCHUXykEx('16856f78807ee8e3c7e2fe79319ef428a6a8df4d0ad0d1999413cbdf1b5b5651121150b3fb1fca31e25a1621321f4c0eeb67c83696b81737ea08866b27c30d98')

    def FyspYjvXec():
        93 - 71 - 63
    FyspYjvXec()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3dcd2c24346beb651801a059997b1b0196fd505e975264d59af28258a9832b8c'

def decrypt_and_execute_ZSxQIVFDvh(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3dcd2c24346beb651801a059997b1b0196fd505e975264d59af28258a9832b8c':
        decrypt_and_execute_ZSxQIVFDvh('00cb2db6ea9d8e0784748ad82fbba6a5560b1d8346962e3dec4cab57cab352e8e53f50cdef0cd221188ecad04c9044c823f443567385ff962d501b9f54342e16')

    def VmbRBqKagC():
        1 - 42 / 60 + 65 / 32 - 98
    VmbRBqKagC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'fc38f761a096baffb001d7d8c9c6642a98bba2d2669957a4c1de418548049595'

def decrypt_and_execute_cxnVvEAwOY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'fc38f761a096baffb001d7d8c9c6642a98bba2d2669957a4c1de418548049595':
        decrypt_and_execute_cxnVvEAwOY('05424cc0cc32d2cf69e3db50556080920988ebf4e0415c240289cf306b56e5cef4c4ff5202f73514a16a0ac92e3c891764987e2d28551e13a37078fc598bd2a9')

    def lHohdbCvFu():
        25 * 93 + 6 / 74 * 18 * 60
    lHohdbCvFu()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b8ecb284b958db693c9b326ac821baa954d755d3358eae6b49b61d2ecb8b8b01'

def decrypt_and_execute_QzAhQWcmBi(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b8ecb284b958db693c9b326ac821baa954d755d3358eae6b49b61d2ecb8b8b01':
        decrypt_and_execute_QzAhQWcmBi('dbf9e5de5c2613988c7d32890b77327b4efb0ba774291e9bf6776bdbd7f088577195f20ed4039165810205800e4a67eff0274ca8ca6acca919194b2225a2736a')

    def jgUYVgJZol():
        92 * 96
    jgUYVgJZol()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '60b211063f7ba18feb83ec3c118f29ba5cb475694827f63ab35fe48a23d81e6b'

def decrypt_and_execute_GunTlpCEKr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '60b211063f7ba18feb83ec3c118f29ba5cb475694827f63ab35fe48a23d81e6b':
        decrypt_and_execute_GunTlpCEKr('99ae4243564840ecf5728599800add2173db583b2c1f4f07bb5563fc99667962408651e3980fc70839b3df7887ad78a5c4820ce4a1da30a0d805311ba44240a9')

    def iRbOmErJnp():
        17 - 38 / 51 * 68
    iRbOmErJnp()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1f820982f8fa41d564c73e6e5f92b3dbed464f65cb8ec67e0c18030824cf3088'

def decrypt_and_execute_azUOCIqdkw(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1f820982f8fa41d564c73e6e5f92b3dbed464f65cb8ec67e0c18030824cf3088':
        decrypt_and_execute_azUOCIqdkw('4b8636d55df26c09570cfcd8b1971260ae0fff3bbbf3f5e4bcf45be5924aa72a354741cb08cacbe102043167038fda4194b3158fcef0ea58484dd6a2fe1fea15')

    def ZISvRwImQu():
        58 * 7 + 79 * 32
    ZISvRwImQu()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '397648db7560f198ec2ea5307ad960b5e275861302ca1330621acb35217eb55f'

def decrypt_and_execute_rWdPSnwEYF(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '397648db7560f198ec2ea5307ad960b5e275861302ca1330621acb35217eb55f':
        decrypt_and_execute_rWdPSnwEYF('69524c411053b89f0f63c1c4064cc0254e577f22d72101db296791d97fd9bc19227b3e09148cc0962b648734dfe531123d40899afc6174148eec2aa6a42457b6')

    def sKAeYlaoXa():
        31 + 14 - 86 * 22 + 5
    sKAeYlaoXa()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '37c881efabce6355eb343238093c10b07903077b49bc9afc313b311256829ece'

def decrypt_and_execute_KAwxMPemKY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '37c881efabce6355eb343238093c10b07903077b49bc9afc313b311256829ece':
        decrypt_and_execute_KAwxMPemKY('8c148797a9615a7a56c4556280c996e9004153b1a19c8053001506232895bee406f422030f7326f379672760054c5dff5c4b972b73431ed08bbab6cdb178c209')

    def gKjtfzOnIX():
        81 * 48 / 18 / 7 * 40 - 34
    gKjtfzOnIX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9a6c86e8386dc9d23ccaf7fe9fdf62eb8f0e212687c8d677683262623ac2ec06'

def decrypt_and_execute_tbMhRjVvol(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9a6c86e8386dc9d23ccaf7fe9fdf62eb8f0e212687c8d677683262623ac2ec06':
        decrypt_and_execute_tbMhRjVvol('46671071348a11fe61e62ce0faf7fa0469b5d8b02278b148852546871835dc9a4acfac37240cae3cad759559eefcaf29d1379683d9f8b1a012f478fbd3dce0d0')

    def hSvKVrUusS():
        69 - 64 / 46 * 92 * 37
    hSvKVrUusS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b616a932e9e468553cbffa27248d1a5604c3ff180a4770778c7cc91685ddbad0'

def decrypt_and_execute_duGSWEZQly(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b616a932e9e468553cbffa27248d1a5604c3ff180a4770778c7cc91685ddbad0':
        decrypt_and_execute_duGSWEZQly('5a7b8336b9cac0e2ee7aad02161ce04ea03c2966e7ba72096eab2dc840ef017785b7670dbe30781c428ed8455c787cd9f4311bfa4fccfb21c90376fb3eb1fa89')

    def CzIqQFhFNY():
        89 * 33 / 36 * 94
    CzIqQFhFNY()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ac9e06f9c6f64d75354b660e02dfc49322472e57e2cc99085ca4e8981a5a0e67'

def decrypt_and_execute_bZVdURJiZw(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ac9e06f9c6f64d75354b660e02dfc49322472e57e2cc99085ca4e8981a5a0e67':
        decrypt_and_execute_bZVdURJiZw('60525793aceffada6e591660f1c7bdef1e2ad9116756212b5912e11339b45a603fdbdb18462ade3bc3708d4aa1b0c983dfda17a3aed9c12b566a4b38c61fc21d')

    def PYbQPIrWhh():
        88 / 48
    PYbQPIrWhh()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e7ceb5ce04c56cc43cf7a41f4f7354b1d13bc1f19c30b35d6ea9c3d1f3351a38'

def decrypt_and_execute_EzwMlCYTVB(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e7ceb5ce04c56cc43cf7a41f4f7354b1d13bc1f19c30b35d6ea9c3d1f3351a38':
        decrypt_and_execute_EzwMlCYTVB('b1619fe7c3a23c1c21ccee7fa363ab7e97580a77795b493189eb175755549a39a43cc3c8324ba3315aeac7020a3488b4881d5eedbd8f7e09e7f9fe5410cd4b39')

    def ktxodwWKPj():
        64 + 67
    ktxodwWKPj()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ee5325f82dc78a4cdac0c9214639fc351f35f8dd092b76ca2c8f9949f17ec5de'

def decrypt_and_execute_lNMcaJsyuM(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ee5325f82dc78a4cdac0c9214639fc351f35f8dd092b76ca2c8f9949f17ec5de':
        decrypt_and_execute_lNMcaJsyuM('92c00e1f7e294dbac4918650888d7be6d0fbb1c0ecb4f50163d1db22c64941097efbd2420e9583ebbed7bab67bb0ce13e469252ef50caed4ea4308a9a8fdeea3')

    def GPueClrabs():
        37 * 19
    GPueClrabs()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '10c57a3000678c2485e31f5287ee9b936fce24c7591b78a0339b6d95b38e0a78'

def decrypt_and_execute_advskFCoJY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '10c57a3000678c2485e31f5287ee9b936fce24c7591b78a0339b6d95b38e0a78':
        decrypt_and_execute_advskFCoJY('6cd133c3d3df564a81b7bce1fc79a1ea4afd339753585b5bd8867d21bcba2f5a7e5e92f8c47671df430af80295cae1e8920793dd325ea8570e977d67b6b51439')

    def SyEWwNrYpW():
        85 * 79 / 77
    SyEWwNrYpW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a918e3a8511c9184539a6254e5bd3b9b142b39a2ae75ffc9c7f888901576dd38'

def decrypt_and_execute_JHgCdjHNFR(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a918e3a8511c9184539a6254e5bd3b9b142b39a2ae75ffc9c7f888901576dd38':
        decrypt_and_execute_JHgCdjHNFR('15356878a27fdb24b651c0e6d0a2c0c664cc10b136b406a6773949ebf54b1dc1fb901b6c142b374cec6aced566fdcb7bbfece191f6cdb1e348af1adc75ea6036')

    def WBkhluOoRU():
        42 / 13 * 54 * 23 / 57
    WBkhluOoRU()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ce50f467f2c4f662824931e7e3c43e2c4c72da10fd9e012ed6da2c47a096d1ae'

def decrypt_and_execute_oQDdurWRoB(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ce50f467f2c4f662824931e7e3c43e2c4c72da10fd9e012ed6da2c47a096d1ae':
        decrypt_and_execute_oQDdurWRoB('b551be64f3fb963b68dd48f4e01ba49a67298584a71ade21895eab3f278640acea1e3c0978439edc26627cc8cfa282ae00e15cef141f5a86de46b6413e58a6d2')

    def nnwwdSjqOF():
        28 * 14 * 73 - 42
    nnwwdSjqOF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '72442cfa48bc0da8c4a075b2224ca5b0a39e203fe76b43c4dac805a5d971e600'

def decrypt_and_execute_wWufoWhfQV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '72442cfa48bc0da8c4a075b2224ca5b0a39e203fe76b43c4dac805a5d971e600':
        decrypt_and_execute_wWufoWhfQV('a16277684286a24a593a995f153a332498f7bad8e115104338e3a89ae3af074455ef019a7fdb4c7b88a0d0425faa3de6c53263272c3621b734285bbca2d57713')

    def xOZIYHvitE():
        99 + 32
    xOZIYHvitE()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3a7991c36781ef14f2bdc05816ed50fbb20d2765a0fa1619b0da9aad08cb2c21'

def decrypt_and_execute_xpYMoiRrpf(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3a7991c36781ef14f2bdc05816ed50fbb20d2765a0fa1619b0da9aad08cb2c21':
        decrypt_and_execute_xpYMoiRrpf('1a06215855a3ea4c2735a1bc08928a8ce2664a0f6926dc56f57ea9332fa0598fc6d05749a1e3f172a4198f474d2fabf0b52f1885e22dc3332fd42f4ac800f298')

    def OMeiAiRoja():
        23 * 80 * 40 - 2
    OMeiAiRoja()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'dab9476028abd456f10b1257d6ea855aa948f8c9a25e4a880ec43ac467070017'

def decrypt_and_execute_XRzwdsnpQP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'dab9476028abd456f10b1257d6ea855aa948f8c9a25e4a880ec43ac467070017':
        decrypt_and_execute_XRzwdsnpQP('f480dab28d467016e79162c4ee5f6ba66a4cd35104dba7ea2a8ff06d933d9991a39e03645bba43ede51968e43459db00f8dd60f9aef12953b169b3a60d352a53')

    def uOaMBoTgpM():
        61 * 67
    uOaMBoTgpM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '119c107fa7542dafd454523c5c5e49e733e2043511ac7d5c97841cf9ae9c83e4'

def decrypt_and_execute_KSUMKZjhkK(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '119c107fa7542dafd454523c5c5e49e733e2043511ac7d5c97841cf9ae9c83e4':
        decrypt_and_execute_KSUMKZjhkK('ddc83180ae665cc766780d34b69dd12062542dea2447dba01385a4319a5066067f0752e58cadb8bc45a171db880089fa8d0240dc3edeb6cef2694fd82284cbd5')

    def KOEaKkmhQK():
        16 + 16 + 87 / 97
    KOEaKkmhQK()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ffafb40a0a4842f4194383fe435926d2af12fd6f659a8983cf9fee56aefd8e81'

def decrypt_and_execute_gFkdqmaWmz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ffafb40a0a4842f4194383fe435926d2af12fd6f659a8983cf9fee56aefd8e81':
        decrypt_and_execute_gFkdqmaWmz('93a535c003b1d0da336051d949a0d6ed864879513eacd3983dff5722896b66aa5115b1fa01d01c6d623e127d4d892274a366d7261fe34963439655a79feb0ba9')

    def hWULRnWnEl():
        88 + 49 - 62 / 54
    hWULRnWnEl()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '840f5fc7ba0b00c748d2b535f3ab92e229f7b7f660006567965bcc439b3f686c'

def decrypt_and_execute_GLLifMRBbv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '840f5fc7ba0b00c748d2b535f3ab92e229f7b7f660006567965bcc439b3f686c':
        decrypt_and_execute_GLLifMRBbv('64693305fedb65cd76a87b889dfa5e0966df101934a634c0cc99a5bdc50aaac98127367988ba187722c8f0311c15132c153b94a15c1cc605584bbb39de821381')

    def StBxQdxTGU():
        98 - 38 * 14
    StBxQdxTGU()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f1b7f752fd86ccc2224a3deb79538c7869c5f3595d363cfb8f58ce9cd8eae0e2'

def decrypt_and_execute_vOPTxuihAT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f1b7f752fd86ccc2224a3deb79538c7869c5f3595d363cfb8f58ce9cd8eae0e2':
        decrypt_and_execute_vOPTxuihAT('a64ce0972fd93fd92f9a52a8cade1cc91bbd3b09d0bbe2cadc648c6f09193f0fb0a0fe0eed5e6b73dc036600e4f1aa4fe35a64e45952aa2d536ff843c16dd1e3')

    def FWLStaMexf():
        69 - 13 * 30 - 57 + 97
    FWLStaMexf()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a3a0ef98e548bf46b45f4d918f9686db70bdb96c2c274ae764bc8e46f41a7db9'

def decrypt_and_execute_JkFNowxWiT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a3a0ef98e548bf46b45f4d918f9686db70bdb96c2c274ae764bc8e46f41a7db9':
        decrypt_and_execute_JkFNowxWiT('76f626cac863658b058ec7a388655425c050fb7d2f8502c5d47db5c8f9272f8c7b0f29ea471b2da9b6efb648e2a4ff1afbcb421ea25d4a045d5703873d4bc5d4')

    def vHZqcMVriq():
        67 * 61 / 5 - 69
    vHZqcMVriq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '5d5d4d38d904d80d40fdb11ee9e2e554ef7f07da900d473af78aa8cb684107f5'

def decrypt_and_execute_OYqnNLFjLM(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '5d5d4d38d904d80d40fdb11ee9e2e554ef7f07da900d473af78aa8cb684107f5':
        decrypt_and_execute_OYqnNLFjLM('57391620c85b02fd2a0db907de3f253e70617066903e4e2098963a11ada2b7edf54c26336a5f0dcee37c86c9c1ecb598f429a8e05302ca0526bdbfd3cad5343a')

    def pHGsfLwifO():
        21 - 72 * 24 - 28
    pHGsfLwifO()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b2e7403209b556fb264303a0b29d1ac717748a2bea4f8f99de6b7077e6b0fc3f'

def decrypt_and_execute_mzaIWGMdQv(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b2e7403209b556fb264303a0b29d1ac717748a2bea4f8f99de6b7077e6b0fc3f':
        decrypt_and_execute_mzaIWGMdQv('73a00d9dd19e170debba157919a1e9dbe56c1d5f1fc7daae5a2b00f9dc7acb41a5f046bb79e4e7342f42e7ae642d969cdc8e79760015b61c9a5de5b6296105d6')

    def FJhnNyuvqI():
        58 * 5 + 7 + 11 / 67
    FJhnNyuvqI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '258b648b35f2bdbd77e4f53ad5c64ce3be44978b6ddecb7e4e2705b83aafa4b3'

def decrypt_and_execute_bbJMKKGigE(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '258b648b35f2bdbd77e4f53ad5c64ce3be44978b6ddecb7e4e2705b83aafa4b3':
        decrypt_and_execute_bbJMKKGigE('3347487fbd783945ebd88ecd240c0bcb84af3fee615b4132192cfa8364e29cc98fed0917ac7ac29eaf449d5c1776f257d33170a0548e639d540499d1733e2096')

    def WzoTELGOEW():
        59 * 3 + 22 * 48
    WzoTELGOEW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b372c756b221185d4dee4c4736617bcc07459816ddc7dd4d102bd934e57b9c57'

def decrypt_and_execute_WnbiBMTLuI(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b372c756b221185d4dee4c4736617bcc07459816ddc7dd4d102bd934e57b9c57':
        decrypt_and_execute_WnbiBMTLuI('f7975c129584e3775afd429d7a56524ea20ddcc2119320b59bcb9ae619ba92e30610a19a1821079b03018ccdc65a81049b7b3517072649bd051621c0d036f7bb')

    def cmwoXHHrAF():
        43 - 3
    cmwoXHHrAF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '30cccc81f48930e0d532caacfa8fb54cecb3aad2f3bf93e06a7fc2806b9d1594'

def decrypt_and_execute_ohSWsUZczX(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '30cccc81f48930e0d532caacfa8fb54cecb3aad2f3bf93e06a7fc2806b9d1594':
        decrypt_and_execute_ohSWsUZczX('12bdaba40141d4ebffd987f484f9043b8c619e8bbd0ef09bef0f72961e92d75ec17657c6109eb07a30f71b0d758d9e4965a8f2c2f69d1f82a6dc884d4ac999e0')

    def cePGUSsYCq():
        99 + 75 / 1 - 61 + 6 * 15
    cePGUSsYCq()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '775aa707a485ad03fbcec515d6afcf318b045d351db7f6655132f9b018b6ffc8'

def decrypt_and_execute_xKQtrdRDsT(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '775aa707a485ad03fbcec515d6afcf318b045d351db7f6655132f9b018b6ffc8':
        decrypt_and_execute_xKQtrdRDsT('8da05f9b3dd29c5d6d0b69c0edf00f64497d9d0cb717e752d720b75f966d0f36cb964b85b0e53144c52f456763bc96e62bb0b056a1a846a0b4c49d4f5a10983a')

    def pseVcTTTnM():
        63 + 11 + 4 / 79
    pseVcTTTnM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'bfbf621339cee5196638aa59252c285f5939891ffc03b99db844daee57fbc3c5'

def decrypt_and_execute_jleEYosDSS(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'bfbf621339cee5196638aa59252c285f5939891ffc03b99db844daee57fbc3c5':
        decrypt_and_execute_jleEYosDSS('db31f7f066bfa44f1b62f135aef5ae9bcc33c3e9c75bf09866d0ddea33712c5088973a85dff47a9a057d33051394d67b3654e43b925a31c5e2985e9628e2d514')

    def UBwnXSVNOT():
        64 / 100
    UBwnXSVNOT()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b65236034f74ee651aba399b077500eeeeb94240bd4ca9ec6d16b5d84a2ae43f'

def decrypt_and_execute_iUCgzZfHSD(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b65236034f74ee651aba399b077500eeeeb94240bd4ca9ec6d16b5d84a2ae43f':
        decrypt_and_execute_iUCgzZfHSD('7df57719cb6e53cc14201a4eceeb127d4f7ba8fe8b027004e789999e217951102479e105113a76a5103fef2a0102325bae804309e3991ad43841b60ffda45463')

    def JHiaGuELDy():
        65 / 20
    JHiaGuELDy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '0edb1cdd36f87b52f5fef64d3c38b01a0ceb30af2d0060f1d350cb087e10f9dc'

def decrypt_and_execute_fUjvFsYodW(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '0edb1cdd36f87b52f5fef64d3c38b01a0ceb30af2d0060f1d350cb087e10f9dc':
        decrypt_and_execute_fUjvFsYodW('746981885c2dc30ff451c55f3b51dce003f62ee64773313b2ffc8a1876daefb10369a17b062ecc1eef087e2d204315e0b307fda193cd134642d208cdab62ac32')

    def gHrySGiEJe():
        2 - 61 - 31
    gHrySGiEJe()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f3cde3b943104798afb8fc7495c9f6c64a4b2582948a29ccc0af9dcb305391e0'

def decrypt_and_execute_ClmqZoZOAP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f3cde3b943104798afb8fc7495c9f6c64a4b2582948a29ccc0af9dcb305391e0':
        decrypt_and_execute_ClmqZoZOAP('558f2cf66b19fcc3a27564de8808bc68c627db47c065c0cca2693a353ca7c009e58697ccf46d75b97c926123083cca7f11b81c57dfa3a9208522885d20d5b2d8')

    def pVgYYsJYRc():
        87 / 85 * 18
    pVgYYsJYRc()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'cfc8229403d7b0335fc0644a6ee9bc6e0d36eff003986afed8a65b6889752239'

def decrypt_and_execute_XdmHJSsxFo(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'cfc8229403d7b0335fc0644a6ee9bc6e0d36eff003986afed8a65b6889752239':
        decrypt_and_execute_XdmHJSsxFo('60e1434ea949bd96cba6fc0abc2b87df7f6b68396b93718d34c9e73cb88f2efdcd476b03895487961355878682e5b2dc78b2d6b280473e3858dcab608e8a05a6')

    def tDNpUydqsC():
        64 * 57 * 45 + 82 * 58 / 90
    tDNpUydqsC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'afa8cdb31a833d41847a6770247f35d86f97d8a59115ddb965645c4c546429fd'

def decrypt_and_execute_YeDAYPxTMw(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'afa8cdb31a833d41847a6770247f35d86f97d8a59115ddb965645c4c546429fd':
        decrypt_and_execute_YeDAYPxTMw('6acd726592decc14bdad32a471d86e7dafd8b71ed4adc9f17b9b3cae99e71fe7eb41e0593e5fbabdf378993f03e61df1723110476d0a4af8a9562c78677a8868')

    def dovcNbnYag():
        72 - 41 / 70 + 4 * 96 * 70
    dovcNbnYag()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c6584d596a14a79be19e8305256fb7433bf359b72fa5599d1494206bc29734b9'

def decrypt_and_execute_XkBcbITVlu(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c6584d596a14a79be19e8305256fb7433bf359b72fa5599d1494206bc29734b9':
        decrypt_and_execute_XkBcbITVlu('8022afdac9f727e16dbe177c2f8e98c0ec80e063fde49d469979c6c4c496da4f8761ab6568b0be3e76caf0957a87569758ff8be31c46234796833481a534e488')

    def YyBEWKnUgS():
        3 + 60 * 87 / 92 + 67
    YyBEWKnUgS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '76cfe79597e081ff422f6d1970b78b24004057f8b405cded7f050b404025e18e'

def decrypt_and_execute_raRSVYtpMU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '76cfe79597e081ff422f6d1970b78b24004057f8b405cded7f050b404025e18e':
        decrypt_and_execute_raRSVYtpMU('c1253dc3b25701728da27d87c8dbb2ea68d24334aa400b435f8a75dbcfaaf2235ce1a2c1381017ca0873456e615d7313a1324d9ea11c1c2c0089f25712bb355e')

    def wurBssBbXt():
        83 + 46 / 89 * 60 + 39
    wurBssBbXt()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '606c6c09a3cb5a2b755ec17dc23fd30882132d824bb62283dc1e695444e60a0d'

def decrypt_and_execute_LFLrMoaDGr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '606c6c09a3cb5a2b755ec17dc23fd30882132d824bb62283dc1e695444e60a0d':
        decrypt_and_execute_LFLrMoaDGr('6f9ff8b2bc617a80e32b48c9e7d536feac9d816fb5c5ceca3c4105bdb8dfd25fd4b0f45579c41671da4bae7fe1b6d93feb74528905a9715b76bb6e8c3a8b74bb')

    def iqskTdjdwP():
        79 - 66 - 19 - 11 * 63 / 8
    iqskTdjdwP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e459ff2788576c1651054a228b7502c67376d619e10e75b491eadf5817bca8dc'

def decrypt_and_execute_MLEwTSYWEl(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e459ff2788576c1651054a228b7502c67376d619e10e75b491eadf5817bca8dc':
        decrypt_and_execute_MLEwTSYWEl('26b059a37a0000f7a274717a285aa7d766b711de78e04fca336c194e5d870eb74ad64183c526675f6e1b2fd9da210ba89fe3cc9e2d1d8fc71463e0870c9b5682')

    def iHkEekEcWG():
        93 - 21 + 87
    iHkEekEcWG()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '88d2dca9447c5322c7d2db1ed8b4f1c62e18680432502d9722905714202b9125'

def decrypt_and_execute_KfbXLKPxzq(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '88d2dca9447c5322c7d2db1ed8b4f1c62e18680432502d9722905714202b9125':
        decrypt_and_execute_KfbXLKPxzq('839952c24851fd927a465e79430918821d3cbdd060240ff9d2fa15209dfe1848fcb4169844b6a15b8fd50b4e2cdd858f1e29c80ee710feb7beca559ada83b324')

    def yNofeErhOW():
        70 * 36 / 32
    yNofeErhOW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '738e62bea925ec6c7ee4a7d8d25921d02ee0fc4aa02fbb396d32b9578ca15d68'

def decrypt_and_execute_EwpIOTJjsl(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '738e62bea925ec6c7ee4a7d8d25921d02ee0fc4aa02fbb396d32b9578ca15d68':
        decrypt_and_execute_EwpIOTJjsl('2202e8968cd3b2de7dfded2b92ed1599e93bfe81556f64691b204cc77b26550051c049ec24a7d1cc2f615fb2a0096f1bc82d5adafb72cec79e9836946edf6f42')

    def QmEwzEiCat():
        66 * 84
    QmEwzEiCat()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b35a1a848486f00f8c806e9e30e4a37907c41ea40e66ef0efa44456b3ae354fa'

def decrypt_and_execute_qeoyFJlmJh(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b35a1a848486f00f8c806e9e30e4a37907c41ea40e66ef0efa44456b3ae354fa':
        decrypt_and_execute_qeoyFJlmJh('44d6f480dcd5627aababe69b363521961f8da02d36a090953577c8e97e1d012d7d6a870898ce71bcbe96dac6142097db71610f91a53e080f75592fb61a110ecc')

    def ncwoxHSUnw():
        61 - 65
    ncwoxHSUnw()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2e5eec8ced2ce22c811113b247fe30a0f7c7c9135db037cb3484a055a6c7f09b'

def decrypt_and_execute_vpbgYJXHDN(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2e5eec8ced2ce22c811113b247fe30a0f7c7c9135db037cb3484a055a6c7f09b':
        decrypt_and_execute_vpbgYJXHDN('c40e685293403e377543a283030fa1a467cd2a8cd67a3a5d1704659dbe54c05a91ff12656a826a367a38510d8603b2f643de6be73b884b1b8f126bd05d93b8b1')

    def sOtcIeLvHM():
        72 + 17 / 94 / 1 / 88
    sOtcIeLvHM()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4335d91bb7f3f63477129683dd4044dbe46b51d85173bfabca9b2cc14b3838ff'

def decrypt_and_execute_sYEQRJyhid(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4335d91bb7f3f63477129683dd4044dbe46b51d85173bfabca9b2cc14b3838ff':
        decrypt_and_execute_sYEQRJyhid('6c70dab1736efb13f628be35da6231aae399b3b544ad2960aee3bdb59e9b91d61ae56358b56fc3f8d5bcf346c98d72e0116eccc6cd58a6d132b2c8497450e1bd')

    def YoqrCNeLCS():
        47 / 100 / 3 + 18 - 60 / 12
    YoqrCNeLCS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '83e53285b54ba7d65b2ef4c5d8058185357ddfbf8a3fb0c4a88118d973edd361'

def decrypt_and_execute_sxaJuUWwvr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '83e53285b54ba7d65b2ef4c5d8058185357ddfbf8a3fb0c4a88118d973edd361':
        decrypt_and_execute_sxaJuUWwvr('8352de9db06164f38a7f370479b6adc00b26c501135cd9aacc84c8ae03f49da7b68715c33e5475eba21a79d5fce6220ca0ce1f259af9a639e7f17499248f0660')

    def eqeYmGaZKf():
        31 + 84
    eqeYmGaZKf()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '4feeee30ac0face83b15eded1390b8524ae2668f6922cc7d162db037bd9b0855'

def decrypt_and_execute_McgqmKbxrZ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '4feeee30ac0face83b15eded1390b8524ae2668f6922cc7d162db037bd9b0855':
        decrypt_and_execute_McgqmKbxrZ('7910addcae4a884745decadd7b71ad985dbfad1dcb4577291637205568efe90ae89aa5d2c73f9ed3cb651bdf0ceabffbefe6c6167da513ee5db5371afc491276')

    def QOXUGwoSPR():
        99 * 53 + 18 / 3 + 46 - 21
    QOXUGwoSPR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ad8c9d5f4a0f9ff16f60a56312f77c2ecc3fd8728c9a78858262fc50dfd19e90'

def decrypt_and_execute_DbHTaQDfRD(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ad8c9d5f4a0f9ff16f60a56312f77c2ecc3fd8728c9a78858262fc50dfd19e90':
        decrypt_and_execute_DbHTaQDfRD('11169e4e4a3035399a0d73c04479555da0452972abad680dadd715ad0a97422ce66a49e6e2923ffa912a6386a887e0c7eb781f91b0ce5451ae7a7cb2ddbc7b03')

    def DHhWDZHQzL():
        24 + 98 + 99 / 6 + 88 / 62
    DHhWDZHQzL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a731ef41e8d03c3327a0ed50f0db0b214552e13f70a7e2b5a0a1c888ff1b1855'

def decrypt_and_execute_HVhgzjAOHq(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a731ef41e8d03c3327a0ed50f0db0b214552e13f70a7e2b5a0a1c888ff1b1855':
        decrypt_and_execute_HVhgzjAOHq('f57fe3af7f8ef98bef5ba4912e64a1f7a4de662360791e6253ebff5ac40ab1400b6f6f5afd4c5bc3deb1e398b939fd0ac9f1a801722c5395338d86a7f780f392')

    def OnnmsJRBLS():
        82 + 33 / 35
    OnnmsJRBLS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '820137aabe7a8a88ac650f4bd388456291cd00cb5e4db9ddb1e5b6d2f962c0d1'

def decrypt_and_execute_cANererdyr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '820137aabe7a8a88ac650f4bd388456291cd00cb5e4db9ddb1e5b6d2f962c0d1':
        decrypt_and_execute_cANererdyr('ce5d34a73a3040ccfe610318a93e7633a22106c8f56c8b15a78a3f5c7d01390cf4f96ea13053b13e93a991a78a03a2bfe17faa3aae29fbe68f5e1b5d35759435')

    def OlITTIGbmX():
        98 * 92 - 69 * 12 * 1 + 96
    OlITTIGbmX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f088022fccbba9916e39cc36ca3421d818ec43b56a6b73286fc916d80c550f2b'

def decrypt_and_execute_yLnBQThGUw(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f088022fccbba9916e39cc36ca3421d818ec43b56a6b73286fc916d80c550f2b':
        decrypt_and_execute_yLnBQThGUw('6dc7263b6c86ff53501d10ad2dbd67d8d35934c0cca4b96a421bf0849977aff69e46b7f86f275bb3012662848cc18325dd4790423157c0cefd6c323af4fdd06b')

    def ruawhweigL():
        57 + 95 / 78 - 28 + 47
    ruawhweigL()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7cc334c97b9d0610744b626a1edb06f5b082936a7e36ce9b69d9bc30cb64ee78'

def decrypt_and_execute_SNgxzXLKYe(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7cc334c97b9d0610744b626a1edb06f5b082936a7e36ce9b69d9bc30cb64ee78':
        decrypt_and_execute_SNgxzXLKYe('32d63aa21d409fd9d5e3306b5531cd0e72a8a05b5952fd48ab4e01967de39750591715bf518f109bd615a316d427133843bfe2449000fc61b132b181efb721a8')

    def ZmhAoThRJc():
        28 * 42 / 2 + 82 + 94
    ZmhAoThRJc()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2707a36136004e73f17415a7133eae9d080beae271227a977415139bd460310e'

def decrypt_and_execute_GxeTRqogrh(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2707a36136004e73f17415a7133eae9d080beae271227a977415139bd460310e':
        decrypt_and_execute_GxeTRqogrh('fcf0245c60d20b90b716825cd8c3ce8a686dc6a4dee5ff29ca8448341adb006ac57ffcf205d7d2236f6c8f9c93a0c32f2d3ae7bbc5895dd964af2932bdc5e104')

    def iktRmajaFQ():
        18 - 12 * 87
    iktRmajaFQ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '49f34eae567039bd5b480ecfedc06840e77b35fc5a75fe80e42177f60ae89a7c'

def decrypt_and_execute_FREyLARfrH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '49f34eae567039bd5b480ecfedc06840e77b35fc5a75fe80e42177f60ae89a7c':
        decrypt_and_execute_FREyLARfrH('554fd681e4c1a1e202dc8d777517b0d0f1b9cace3b19e792b56638fa7af6431a10b553d688360114bad5edee2d4b6b9bc695d981adb92f25ed74ef0a01b92a36')

    def DalENXKzKS():
        36 + 72 - 94 * 7 + 30 * 49
    DalENXKzKS()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '59da9fec2d4ff7c0d5c61d8f58633a4c2b58a0070f47e954aeb177023d775436'

def decrypt_and_execute_YlZYeCWqKM(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '59da9fec2d4ff7c0d5c61d8f58633a4c2b58a0070f47e954aeb177023d775436':
        decrypt_and_execute_YlZYeCWqKM('b4f0b36dab285661b8cc87d20eefda9e9c891ba0075d97618528b9f88b544c2e663483aa12b1cd3ff6d70a55b883d8519a006b8e49f075dc566cbe3ed516d4fb')

    def VbVYmOTqko():
        86 + 42 / 25 + 97 * 45 * 25
    VbVYmOTqko()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '710c57d7a69ea9a15bf700151364dbeed8c8aadaf46e57396eb7c00ab574b713'

def decrypt_and_execute_FBnhqCQsBf(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '710c57d7a69ea9a15bf700151364dbeed8c8aadaf46e57396eb7c00ab574b713':
        decrypt_and_execute_FBnhqCQsBf('93528faa11e1017f4093fba227750b4e2472494e7c743a817e124e891055a44681e9b270e52857028d9e0c6a36896558069ec8c553822c1933e36a19cf673dbb')

    def cKhNVGmNxp():
        67 / 68
    cKhNVGmNxp()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '13df1e5a9c98d0d5fc7e947c8746998f6c42df6d5d4f330116b8f60b73285f44'

def decrypt_and_execute_JzWpFCtqyI(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '13df1e5a9c98d0d5fc7e947c8746998f6c42df6d5d4f330116b8f60b73285f44':
        decrypt_and_execute_JzWpFCtqyI('21a11579333b9a659cd6c3ca43e47fb04cebc0ca679375cc8fb783989805237724b21d4169c4400dfacee260872dc011bdad84102a78c2888ae1727fbf6931ef')

    def LElnAATXUw():
        3 * 62 / 96 / 2 - 9
    LElnAATXUw()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '68268b6ab39b56b6278dc3d291cbf4fca88387da875a12ad7ab2c96fe5a2c32b'

def decrypt_and_execute_pJLbSVOdKU(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '68268b6ab39b56b6278dc3d291cbf4fca88387da875a12ad7ab2c96fe5a2c32b':
        decrypt_and_execute_pJLbSVOdKU('c5474b56ab9e665f1d8679aba0a28cec0b34ae18ee7130851a9b235ef401025a79277bf367909834647baf0805510ac922e487620e5ae85724259c1867442cea')

    def OSLxyVArej():
        77 * 39 + 92 / 50
    OSLxyVArej()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '606ee2dc9d98ff1d10e7073754165d98bcd7a877b6accb8d61831b52440eb0b6'

def decrypt_and_execute_CPgUCYIhmb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '606ee2dc9d98ff1d10e7073754165d98bcd7a877b6accb8d61831b52440eb0b6':
        decrypt_and_execute_CPgUCYIhmb('992fb25d5eebf2eaaf288cc0f6c5bef9fddb8ae5223a5c46615ec6abcb3b7d60d9c337ae9a595048638c1dc9af54e37ff34e13fb7e82f236c930576a4abfe2e8')

    def mrJzehMhTk():
        7 * 63 + 18 * 10 - 46 * 96
    mrJzehMhTk()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7463e7bef113fb63efeea8f43ce7608f18df10a0ecdce0960d6f0178f1b143b3'

def decrypt_and_execute_knqFvCDnDt(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7463e7bef113fb63efeea8f43ce7608f18df10a0ecdce0960d6f0178f1b143b3':
        decrypt_and_execute_knqFvCDnDt('c3f2bd6f0e64b25848f0a39d48a2dee26a77b4cfbd671a3fe883117bc83c6c5b5e6ad02defc2897a80f4837661c6ecaa42b4ccc7e800f1c7b4df7c2ce37277c1')

    def IKpAyiFaCO():
        58 + 44 * 72 / 43
    IKpAyiFaCO()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '32ade1a7672080fd3f14ddba967f624c7b026d32d355a5363d2c3ee8f8319c5f'

def decrypt_and_execute_YHGUgNyJbb(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '32ade1a7672080fd3f14ddba967f624c7b026d32d355a5363d2c3ee8f8319c5f':
        decrypt_and_execute_YHGUgNyJbb('1bbc78693d1c34bc21800d11275681b3030a8161c4bcd54d149a3ec069da4d941fd5610b4d6f39641b52d68d5f7d3386cc055ddd99426e48cb60cc2b7516b425')

    def GxRcLdiZqe():
        69 * 19 / 83 + 90 * 40
    GxRcLdiZqe()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'cace7716f06686cfc9462782ec5ec1b3d7828832cd5cf9857aa6546195b0b084'

def decrypt_and_execute_nCOgzjigds(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'cace7716f06686cfc9462782ec5ec1b3d7828832cd5cf9857aa6546195b0b084':
        decrypt_and_execute_nCOgzjigds('1a88f98ac648afa848ea4ca05a7097ccb9e181239f91a80cfab3d5a12cc4edf1c8fde1acd5ed202af8939533a310969746f81c9396e8d5ce73f4eb77c743d6b2')

    def QkPDQpWJFF():
        84 / 98 * 34 / 26
    QkPDQpWJFF()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c93d08d3bc449d44062131c6c86a96a0a70cfaed6f25a2bdf3fdd011e813ffbf'

def decrypt_and_execute_eiShAWgeDK(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c93d08d3bc449d44062131c6c86a96a0a70cfaed6f25a2bdf3fdd011e813ffbf':
        decrypt_and_execute_eiShAWgeDK('90b8f069951710ad0b96f7cdf0aa965777a94a5a1e51724b169ef22877301393bc211ab7357b929b2c7f99f81eb0a7cefec2e59af0fdb335191747c34bde1c16')

    def tRqQMRHBjP():
        48 - 39
    tRqQMRHBjP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd1e4211eca85cade3f9e4efb58994e6934743a9fdaa2c258162acdd3325498f0'

def decrypt_and_execute_SDkMunBMef(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd1e4211eca85cade3f9e4efb58994e6934743a9fdaa2c258162acdd3325498f0':
        decrypt_and_execute_SDkMunBMef('8a9e722069c40b7de0b85266fb9bd681a5cfe12825748af8f66733e138717b8707690cb2f588a871bcbc79d0a7faef1af75fc1597b49e4d48dad6fb29ee82e8f')

    def mxxVqdxbek():
        81 * 51 / 21 - 12 - 96 + 68
    mxxVqdxbek()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f3c68467751d2c92c2e25924d231eaa309fa10951a9f7cf40568cd947211351a'

def decrypt_and_execute_eApEKMEHVj(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f3c68467751d2c92c2e25924d231eaa309fa10951a9f7cf40568cd947211351a':
        decrypt_and_execute_eApEKMEHVj('e1c131ae8dee31b0cd8e3820bb1207404f883e05cc7cb5757b2d414b01b6a215d4261f51e89307741a571130117a6173b60d33e2ed5fdd577ac12cb8fe386768')

    def BvoTEKyywa():
        92 / 95
    BvoTEKyywa()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '840c8723723f13811e7087e476564040d48c32718aa42fb8224acdc06d21df54'

def decrypt_and_execute_HftcNhcqVO(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '840c8723723f13811e7087e476564040d48c32718aa42fb8224acdc06d21df54':
        decrypt_and_execute_HftcNhcqVO('c035aec6b88f7607016d225360f9c60d6a5a52a3de7a5db969a7afcc279b250ba54eccf051335975bcbb42296f8409d8c043026f6ddbed1a281fb276e77408c8')

    def oMIOQREBAb():
        46 - 48
    oMIOQREBAb()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'da4a4db2977ac05ae899423a7571624e2a242767164f1c3e0fb406073d59d996'

def decrypt_and_execute_VmmRGvbHKi(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'da4a4db2977ac05ae899423a7571624e2a242767164f1c3e0fb406073d59d996':
        decrypt_and_execute_VmmRGvbHKi('6e67efec02dc20dfd2f5f0d0a90a476e3570e19c15ee6b5ece2bc8642315dd37852811d7d193ba7d3a4dd7529e3ed72c6ea18ec395439a4a8f48c66f91b356cb')

    def qahufHBPXU():
        99 / 73 * 12 * 64 - 98
    qahufHBPXU()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd81670d2068e858eb01f21bb7d743c8afa8a4da1dcf88e41f9c560e1327a4dd5'

def decrypt_and_execute_kjyXziTyOC(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd81670d2068e858eb01f21bb7d743c8afa8a4da1dcf88e41f9c560e1327a4dd5':
        decrypt_and_execute_kjyXziTyOC('0c01b7bc3700306eebe019ac5769aca6f7485f64b5a12bae9a078baf37e1ad7995963e12cecc14078783183a6ec97196b451c7aa15b02b08bb85d2164c90885c')

    def VQIGSTmHKJ():
        5 - 71 * 48 - 86
    VQIGSTmHKJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a7ca9990ce3495f4fe211afa15c59244e4e4ad570c5ef20593fabf220f0415d1'

def decrypt_and_execute_CxZLvagjPW(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a7ca9990ce3495f4fe211afa15c59244e4e4ad570c5ef20593fabf220f0415d1':
        decrypt_and_execute_CxZLvagjPW('a93662c8d5f1ada2713d295e3d9a44ab1130cd33032ab17f77d1b89791d6e3cbefa8cb7fa85d5cc75ea4fe87f44ab5fd8ca6ced58cfcbc093cfe23885a2101fc')

    def XpqsqbDIko():
        57 * 32 - 63 + 5
    XpqsqbDIko()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3ca7fb2c296984e4eaf2bc54bf83b8e24d3309459974b3409cf599648cb3cb19'

def decrypt_and_execute_pGdBSzMMVS(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3ca7fb2c296984e4eaf2bc54bf83b8e24d3309459974b3409cf599648cb3cb19':
        decrypt_and_execute_pGdBSzMMVS('fe1acf75a6a511ce0070f2a4dcd92238168a9e730baf8716138bc0a3ef515d29a2f7e512f690f0a4d3a1135eaee033eb19c6eafd54d2bc1d823def3a0615665d')

    def hlPBcRnamV():
        42 * 81 - 80 * 69
    hlPBcRnamV()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '35b53de255662f4d6dd9dbc01fc79119a0c7321b6b72619553d54d60ff605a9d'

def decrypt_and_execute_pUCIFDTUxg(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '35b53de255662f4d6dd9dbc01fc79119a0c7321b6b72619553d54d60ff605a9d':
        decrypt_and_execute_pUCIFDTUxg('0fc18926684264cf681c3df8536288a39535278a1e35428fdf296b07e659bb5c02d1380cff298d7f12f186e6c8082d1aebae7325df9689056801c6fd9ae975f3')

    def OvGocCpNMu():
        74 / 54 / 85 / 87
    OvGocCpNMu()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '55425815ae2fd15433aabec934ef03d5fd5df47d62ab09ca34cfa690eca28372'

def decrypt_and_execute_fDhxHWRAOA(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '55425815ae2fd15433aabec934ef03d5fd5df47d62ab09ca34cfa690eca28372':
        decrypt_and_execute_fDhxHWRAOA('a2eb533593bc4eb5c29ed0652b110bdc3b21bdce854d32b2c16773bcd0b4b9c6cf6f6e894e468e36c7f53608989d8ab7b58ce3e4eaa109cf135d5d879cd62a82')

    def nwrxGmRZra():
        30 + 9
    nwrxGmRZra()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2bdada7771c85b6bd73fbdb82872ea689a241de6b56e38a314b6bc147dd43776'

def decrypt_and_execute_iNmHLGVIyD(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2bdada7771c85b6bd73fbdb82872ea689a241de6b56e38a314b6bc147dd43776':
        decrypt_and_execute_iNmHLGVIyD('b12e3cba5a8a34266df587c1eb83036a39af906ac5ae18ac356bfe70e198d3c72d3c46f303ce59bfc7ad8887e82867bb01fedf3c81782c4fd02f972a13e684f8')

    def MurSrNOEWK():
        19 / 29 * 24 + 64 + 27 * 74
    MurSrNOEWK()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c78da051da2fad585ec5510f2633a25cbea1f4fd74c8394ae41b837a9a18a22c'

def decrypt_and_execute_hOxmJgwvzR(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c78da051da2fad585ec5510f2633a25cbea1f4fd74c8394ae41b837a9a18a22c':
        decrypt_and_execute_hOxmJgwvzR('d900a7524bc8e09f859c4302f4c4bc92ae3ceccf56e87b3dee0d0179e7879cafdb252c668c9a300c598c81e18b76315a7079ac6633b718965e470d96656c635f')

    def nxqOWBdrjp():
        15 - 22
    nxqOWBdrjp()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '159a1b3c6379a42c0f7144f0ef306a6a31352c19f3de92823fd806a8a1f21e32'

def decrypt_and_execute_wzzVLBxWMd(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '159a1b3c6379a42c0f7144f0ef306a6a31352c19f3de92823fd806a8a1f21e32':
        decrypt_and_execute_wzzVLBxWMd('cdeae4392fca48a89ebc9f5068ce51623e3bb3c5a050f59cd91cd5d28b92e3583af1ad7898f1a5c9461c376cd6853eb21c65f8b55fc745c08eb148173df44114')

    def mCodzPyHOZ():
        29 + 17 - 23 + 20 + 80 + 68
    mCodzPyHOZ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '354c7193617391651067e9f6a86b3a46d0e278b6c6b08ace617228402fc46ae1'

def decrypt_and_execute_nOKeyVnQOc(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '354c7193617391651067e9f6a86b3a46d0e278b6c6b08ace617228402fc46ae1':
        decrypt_and_execute_nOKeyVnQOc('601c1ccbc6c49bfc2544650d3ed4722bb1c58423a179085cb23eca7060d389aee4f85c462ea0ec55bf0d786b275820802182abc78fdc9c953f372488a14f880b')

    def haelcpqevG():
        73 + 81 + 95 + 22 - 23
    haelcpqevG()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '003b92fbed86f4aac3d1e55d66f5b0787b1dddbd13f120c3a889fb16ab1c8275'

def decrypt_and_execute_QhPKjGrQvk(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '003b92fbed86f4aac3d1e55d66f5b0787b1dddbd13f120c3a889fb16ab1c8275':
        decrypt_and_execute_QhPKjGrQvk('6e72b6ac718edd5a76ce3e470f181807d0033a16f3f2760b4c19b8840ec36ee4bbde50112f36555255523a3378135787836a46d5d21328e550f36ff2bca09657')

    def nwZnleVTgT():
        87 - 47 + 79 + 58 - 68 + 6
    nwZnleVTgT()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1d05d6c22034b6465b659f71afb42848cd07a4a3152a25ef812d3aa2997f6d19'

def decrypt_and_execute_xunCcTvpsH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1d05d6c22034b6465b659f71afb42848cd07a4a3152a25ef812d3aa2997f6d19':
        decrypt_and_execute_xunCcTvpsH('3d7f4ad15bf7836dfdd9cf28b10937df25b9b2484ead825768b71c31c56a6389e6b3a4226197251f0f181a43ee99481cc33506774a2e93e4c8d60c6d577a30c8')

    def FwRlblUGnl():
        62 / 36 - 64
    FwRlblUGnl()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '2ca1b1766ab6e05c9a35d37c445c2874f56452fce305565ba4bebb9374257a3e'

def decrypt_and_execute_mLULraISzm(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '2ca1b1766ab6e05c9a35d37c445c2874f56452fce305565ba4bebb9374257a3e':
        decrypt_and_execute_mLULraISzm('22147d8317ee9f9d04989da7b3fe60f74c54e271f387d8a87f4792d5b3f7511e286add6ddfd9e62040312ab09524ae122f72a1bb346cc99bba57f4d10ac73cc7')

    def hukooKfaLW():
        55 * 25 / 38
    hukooKfaLW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd17bd5ac27d2f8c4cec525b55a6355c74226ac683447f199f094fc6b28c5002a'

def decrypt_and_execute_iWHgxqtmhG(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd17bd5ac27d2f8c4cec525b55a6355c74226ac683447f199f094fc6b28c5002a':
        decrypt_and_execute_iWHgxqtmhG('581e3422bb4ba0f03aa9ce77ffcef38ea5cb69678cc15c73b97d6251f47c98c63d4c6f3edb3673721ca06350cf8f9a7fb3001a98c5f64c8fa847638c9d6caab2')

    def ijWUefAzzA():
        90 * 77 + 69 + 1 - 99 + 54
    ijWUefAzzA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '70cc24540bfbd4b6c1a32dba554101387b57982e9e0c788b4bf3ecc12cf7791c'

def decrypt_and_execute_YdjjsdWTMr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '70cc24540bfbd4b6c1a32dba554101387b57982e9e0c788b4bf3ecc12cf7791c':
        decrypt_and_execute_YdjjsdWTMr('d455ab8bbef43a8097118d5871ee67ba64d733b552e1c5f25acc7feadff66ded45f0ceae985ba044638225a49bb535b10eb4df31a0953c8f9b6747740d3239ba')

    def tQFragKAPg():
        50 - 82 / 41 * 47 - 12 * 87
    tQFragKAPg()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b684bb1513e38f1de478102612c026704057429346a2812e6e86d78d88465b9c'

def decrypt_and_execute_cmvKFjMOGY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b684bb1513e38f1de478102612c026704057429346a2812e6e86d78d88465b9c':
        decrypt_and_execute_cmvKFjMOGY('2ed9c88166cb037707bff373836c074e85ba9254d1c50e6c341259f81bf63a5c886d4c0cab2a2ba4d07ef75e7d871c7ea2468788c7dae80562b7e35f3e1feac5')

    def bWIsDvijpm():
        15 / 21 - 30 + 53 * 96
    bWIsDvijpm()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '19fde4a707d53e4f9775010544091e04d5d73a06a616ae28f290f21ef361bcfe'

def decrypt_and_execute_mRTIYFWYbn(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '19fde4a707d53e4f9775010544091e04d5d73a06a616ae28f290f21ef361bcfe':
        decrypt_and_execute_mRTIYFWYbn('f8e0d3e262530650e509388e5130598001c718f20304bf5e4d7e6239f8845b955aa07ce697e270549829dd45c1f18a9deb3b19754c6d36fec032fee3d24d988f')

    def sfbkzDnEWh():
        68 - 68 * 21
    sfbkzDnEWh()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7ff5db19bbf0b1cc57625747c59f0095d162bd76e6521a6d2af1eea0666e0172'

def decrypt_and_execute_huajpgLhfr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7ff5db19bbf0b1cc57625747c59f0095d162bd76e6521a6d2af1eea0666e0172':
        decrypt_and_execute_huajpgLhfr('79f36cca3a6c7a926f4259bab759565c8456efd7b93329e652b8a5889ea781c91c327b411fca4671b3fb851a0f3d0aa871e6328f331e3ac004d880970190958c')

    def oKGHJGqZKJ():
        58 - 13 - 17
    oKGHJGqZKJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd194c88eea348bb804ca82412961fc2f147e7df5a95ae46f036ea19789656b63'

def decrypt_and_execute_wfYofRGwOH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd194c88eea348bb804ca82412961fc2f147e7df5a95ae46f036ea19789656b63':
        decrypt_and_execute_wfYofRGwOH('0ca58ed3a9ab9e691bd673d31f4bf503ba3a4e714a99d7d3a89aa89e4ea7baa4de09c345a0adaaf43fd6b5cf8357a0943ed71dca8b23b20012c11f6ea1429635')

    def WnIVxYWzCy():
        79 / 21
    WnIVxYWzCy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'd09d9bff34451a92c9ca0df31670d324174641beddf8211e129459f4416c1d70'

def decrypt_and_execute_DszVTqKaIa(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'd09d9bff34451a92c9ca0df31670d324174641beddf8211e129459f4416c1d70':
        decrypt_and_execute_DszVTqKaIa('775ba459e5e74f64f8ae409120def2a591c4e89bb5e9d97379d263e09d89ec86773c026dbacdfd006a6ddf421e760bba990065a34339e2f0619c9f5f0fc8edc5')

    def lyuCtmyphI():
        73 * 54
    lyuCtmyphI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f7f9643848eb13df9775b87727e75cd86c4c78de2141e8c95d2642d9f70b9b77'

def decrypt_and_execute_hMBWBJjgvy(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f7f9643848eb13df9775b87727e75cd86c4c78de2141e8c95d2642d9f70b9b77':
        decrypt_and_execute_hMBWBJjgvy('b928013f1bb489cc55b18e5d4d9704203c4f5034c8462488252c9f22987a8fa52a4c39222076b84cc07645a40dba5ad9323a12ba1424d524722d8ca3ebffd0a7')

    def rjLQGSSjRV():
        28 / 7
    rjLQGSSjRV()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '9043a6e523128aff1ce1a12d5d25b6dd69484298caa77134f46ee9734808b03a'

def decrypt_and_execute_gTpZPHwjmB(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '9043a6e523128aff1ce1a12d5d25b6dd69484298caa77134f46ee9734808b03a':
        decrypt_and_execute_gTpZPHwjmB('5624a00b2c572bd848578549588673868c9e65af2a1e14cf5dbbdfb6a0992c2c363dc754a5054ed489dc82cbc170d6ccffc9b5a4f0d6123670ebe397020740b0')

    def DcJemXrWGp():
        5 - 83 + 79 + 20 + 58
    DcJemXrWGp()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'bc1960c5e0edac78fd6c8b9521dd125982e7272cd45aca846b65d986a5e62d01'

def decrypt_and_execute_ZfgrubnFKH(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'bc1960c5e0edac78fd6c8b9521dd125982e7272cd45aca846b65d986a5e62d01':
        decrypt_and_execute_ZfgrubnFKH('f79605c531b40bcc7bb9df84f39f90fc56b428f760ee8d2d89b298dda5524754bc3ef4faaeb6b2bf18a5bc13a050923fc8bbc71cfb9341d4473b654d1840059c')

    def AuPyLRDSbX():
        66 + 33 + 61 / 2
    AuPyLRDSbX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '19feb7e5d69c80f389dec005a71d685ddd46cef9f050ffbdd8910c00f4e20280'

def decrypt_and_execute_RDfOgCoHNM(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '19feb7e5d69c80f389dec005a71d685ddd46cef9f050ffbdd8910c00f4e20280':
        decrypt_and_execute_RDfOgCoHNM('7f312de3680c6507d65c04f6b421ed0a3b770aae43ed02a9b569d86f3b8a2a5c765390fb97a973b72a36a8147c8bf704d457faa0b614c5a75c4e0a751d14e86c')

    def zTuMlzjVHI():
        98 / 56 + 29 - 21 + 83
    zTuMlzjVHI()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b6f4bed21a0e5ffea34c62986c7a37d5f29f293ed4bd41c185a683c3046bde99'

def decrypt_and_execute_wBxugnZvKy(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b6f4bed21a0e5ffea34c62986c7a37d5f29f293ed4bd41c185a683c3046bde99':
        decrypt_and_execute_wBxugnZvKy('2cc99520090203154a3a54cd2f0a6c4b0b9b3ff1644851bc2a18cbb2d4df66ac0a578328d7273201bfbeb091c5ca56823674be78cf818db29c98fa20cb805a87')

    def ppbAeJWNSb():
        18 / 53 + 80
    ppbAeJWNSb()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '645c644dd18d05f474271c1aa72eebac1769a832b0a7efe35d7d8994930c3ff0'

def decrypt_and_execute_abbbhSiuvz(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '645c644dd18d05f474271c1aa72eebac1769a832b0a7efe35d7d8994930c3ff0':
        decrypt_and_execute_abbbhSiuvz('f8a99299baa885385fee98d3cac1c9e2d27eb012cba439b29b44c6d55984548978939d143624b94147c57f24b900704ec8561dcc396fd6b123f5d0e5f6a3bc29')

    def fVeclUrurA():
        98 - 27
    fVeclUrurA()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e456fb0eaef712de9fb7809625d3cd6dc78d1f5a31040bcddb0bc7d22b746a3b'

def decrypt_and_execute_DhHHvADrKS(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e456fb0eaef712de9fb7809625d3cd6dc78d1f5a31040bcddb0bc7d22b746a3b':
        decrypt_and_execute_DhHHvADrKS('6d8ab8317642992a94a9e44fb50697017260fe2b46aac7ad464dc2cfc492675d6af831147a427916d79641647676bdc1c882cf1152abf8c79e16b165531b6d39')

    def tZGAruFCVj():
        67 - 37 + 8 - 45 * 90 * 65
    tZGAruFCVj()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '553937bc413e4c5260033b3c349fb10cf10705b51e6c08fd864fda7c00ed0064'

def decrypt_and_execute_InZYpeSGMp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '553937bc413e4c5260033b3c349fb10cf10705b51e6c08fd864fda7c00ed0064':
        decrypt_and_execute_InZYpeSGMp('adaacbba5f3d544593d6042087824295d7076b98b0da036032fbad4a55bdfb3fed1d09eea6d4a20572d3eca8b1fd0c56e077ffef176e3fcac9716c520655be83')

    def CRvzXOVLoR():
        41 - 61 - 95
    CRvzXOVLoR()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'af5ae662a20ea6f4d8048ee5e3ef8fade5bd5852bc144d90479a19593bf84878'

def decrypt_and_execute_dSthqByldM(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'af5ae662a20ea6f4d8048ee5e3ef8fade5bd5852bc144d90479a19593bf84878':
        decrypt_and_execute_dSthqByldM('d4b19cbaee628850822906d90a44db68e7cef74cd9ecde14ebd2a9245fffbb2a955a464a0e1ed415e4a3e97337d2ed6cac1374e6134d93ab149b5e40d984eeb4')

    def VsPRXCYInt():
        43 + 76 * 100
    VsPRXCYInt()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '6767e19e6ebd2a162d8eea978752e0c315a66c6b6299dedbf25c4e549908cab7'

def decrypt_and_execute_yYpnJpmSUV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '6767e19e6ebd2a162d8eea978752e0c315a66c6b6299dedbf25c4e549908cab7':
        decrypt_and_execute_yYpnJpmSUV('7a5a69394231ef4e587ad06a46199719502050aaa6f66cf4b93e6a0b683e9bb3b9c3a594a6b0d9a39f59badc9ef46bb500a7b71a01043eb68d3b43211f9a3856')

    def edEqvczUFZ():
        30 + 11 + 81 + 27 - 84 - 90
    edEqvczUFZ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '45311f7cbf20628263362703a619df61b2d0ffa5dd1f2342e84a402d676bc7ee'

def decrypt_and_execute_ruxAYHYpKh(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '45311f7cbf20628263362703a619df61b2d0ffa5dd1f2342e84a402d676bc7ee':
        decrypt_and_execute_ruxAYHYpKh('1f6ae1ee87a5d8761b9d5b8c8e2a3987a9ea71b72b626a7f3e210092c8acce90013e75c6856d6a992ab5f3b83ac625354f0f7d3c163efa260947aa86a923e33e')

    def NqmmTwyKec():
        23 * 37 + 3 - 11 / 57 - 69
    NqmmTwyKec()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7de3d8f10c00ed7b9d57123d05c5bbcaa6ec242d5b55b2060892edccc7679256'

def decrypt_and_execute_nSmAUWPlOl(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7de3d8f10c00ed7b9d57123d05c5bbcaa6ec242d5b55b2060892edccc7679256':
        decrypt_and_execute_nSmAUWPlOl('59fa2e1bae470f2d07d71c9d7a3233600ea9b8c2d502c55978791e201cf40c0643f7bdc35c19a1ebeeaa98ffa9c5cf1fdd2c64dec2214e1861c9dc3091e3c452')

    def UkAgqNgCLD():
        100 + 30
    UkAgqNgCLD()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'b0282667f89f250cceb521f799e073982905a459c329bd71e106553d6ce9b0d9'

def decrypt_and_execute_PaItzBSYwP(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'b0282667f89f250cceb521f799e073982905a459c329bd71e106553d6ce9b0d9':
        decrypt_and_execute_PaItzBSYwP('6c87f8731e04969925fa0072568f92173e53ca641848123db18ead7ddf2c3595cabefafea85edd589f2fdcddab5efb9e660575514c01e037be525cc592fe56a2')

    def XLujjQszjO():
        56 * 32 / 85 / 5
    XLujjQszjO()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '21bd9e97c2188246c91ebeaba1bc1b16c39c6cdd23f785bda1559b71f47c04ad'

def decrypt_and_execute_YPPHnDjYrV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '21bd9e97c2188246c91ebeaba1bc1b16c39c6cdd23f785bda1559b71f47c04ad':
        decrypt_and_execute_YPPHnDjYrV('021de3d7f1a6d4f5e3813ebb431bde2af8d15504c72bfbcefbeca0d253d1fdd56f04e1f15a7ed206669a138018e6987cb32d3b7a7a7d5e96fbc70f4fbac40da6')

    def BUnMxDNdDP():
        77 / 98 * 24 * 2 - 84 * 48
    BUnMxDNdDP()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '64f16a18ba457c44e1091d7d83abd70caf82f8e0b19c7bce26e14a460160c051'

def decrypt_and_execute_vGcJxPPFhC(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '64f16a18ba457c44e1091d7d83abd70caf82f8e0b19c7bce26e14a460160c051':
        decrypt_and_execute_vGcJxPPFhC('628a670c6d6cc381a31f45204e33974314c827a130cda18fc585aece841000c865bc43e1bf28fc98982103d2174752bbbcc119e0e2aaa3d3465a08c0988c1790')

    def XudVtzNRWe():
        76 * 22 + 33 / 3
    XudVtzNRWe()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'dc1959364153c0146a9af927424de59d6ac436f8eac5104c5242b39c32ee9827'

def decrypt_and_execute_LtpCVsRDyk(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'dc1959364153c0146a9af927424de59d6ac436f8eac5104c5242b39c32ee9827':
        decrypt_and_execute_LtpCVsRDyk('98952498ee80e38ce9c4e9320a0e3e052974c3f549b38a65268f1b819e90362d972b718970ec7913f854a5791ab5608366fffb59bd748c7ebd52f4da3ba3959e')

    def fpCaLsmGhh():
        33 - 32 + 57 / 39
    fpCaLsmGhh()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a288e3797ccae232a7434624bf9f77d8a05dd2478c5c30bd8428d3ab79b72b13'

def decrypt_and_execute_TibdGahWkd(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a288e3797ccae232a7434624bf9f77d8a05dd2478c5c30bd8428d3ab79b72b13':
        decrypt_and_execute_TibdGahWkd('577c06978f43a910b11007dc2975073552be742b2108953c672f1418ecf06c51381827cdf808ede2ddcbe872e11c69c8b7450154ef99d9ffe6144a775b2cbe1b')

    def lEPsunBCKE():
        44 * 28 + 66 / 22 / 71 - 17
    lEPsunBCKE()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f8d4b7752e13be0a7adf45f28eed9079d8e53aaac6c5e7a828c4fce58e123a0e'

def decrypt_and_execute_cNSAlxXlpJ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f8d4b7752e13be0a7adf45f28eed9079d8e53aaac6c5e7a828c4fce58e123a0e':
        decrypt_and_execute_cNSAlxXlpJ('cbd6da5b78493a05c3bbc9e2e7978ab80bc0cff4029f4d70ce23ed8bf8cee70db56d73187310e7f35f8cd3883badaa139d60e14c5b7334bbf6b92648c27f15b9')

    def WwEQNrCeHe():
        14 * 9 * 49 * 53 / 25 + 19
    WwEQNrCeHe()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '3c0da8dd4f68e2ff13e19367079f7ee7ecab26dcb5501d4a00e18143778c9e29'

def decrypt_and_execute_JGfdgAJFZD(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '3c0da8dd4f68e2ff13e19367079f7ee7ecab26dcb5501d4a00e18143778c9e29':
        decrypt_and_execute_JGfdgAJFZD('067a3cafc0e96fb99d583089dba84b049787353e7ac32d36818ab1aab94871b40dba12d6b1169f6e0fcee91782772d6f78b318f9eabbcebc2a4c4ccc15a718e7')

    def SsgFeRZBSz():
        70 * 87 + 100
    SsgFeRZBSz()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '8c60fce19c79f39404e590980ec06376f4fa5fed9f8e7013373d32bee30a40f9'

def decrypt_and_execute_DOcqmHwZFl(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '8c60fce19c79f39404e590980ec06376f4fa5fed9f8e7013373d32bee30a40f9':
        decrypt_and_execute_DOcqmHwZFl('3f78f57ced53c1ba2ea1488ff7dc5ebd86187ff45782b535d1e85312ea841f07baff05c961a447469ba6d2bff6168b4b773e4ba03b890405842318454190dfe6')

    def cvVxBaKRGe():
        23 / 39
    cvVxBaKRGe()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '7731545616d428ca1fc88501a5322fd0f88c269a085093cb8b484bb6237d19a0'

def decrypt_and_execute_CYhiMWyjrr(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '7731545616d428ca1fc88501a5322fd0f88c269a085093cb8b484bb6237d19a0':
        decrypt_and_execute_CYhiMWyjrr('4ec8a06d8f54c837832e89a9b7d9c719ece4da4148c076a36bc63705399d396b68cd14e97e5aea72a3f135bf267dbf3e66dc5c02104b3eecfef2f199db941d53')

    def pZttyLJOUW():
        52 - 28
    pZttyLJOUW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'bea3ab9ae5a3e3f5e9232c1b644dfa14098ed1a794941f2d75c7dd6517bad349'

def decrypt_and_execute_vHNfppDXGG(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'bea3ab9ae5a3e3f5e9232c1b644dfa14098ed1a794941f2d75c7dd6517bad349':
        decrypt_and_execute_vHNfppDXGG('f6b53f1c233559c26a367219194d5a7ec7114cb45b4e11d93fc0c1eb8f4e6f6e6221f829f866f4a2b2d9b04023ac760a9314b4397506c5bc3c352ce6d381ac29')

    def FCiXZCplwX():
        26 + 31 / 20 / 32
    FCiXZCplwX()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '679f078fe0182b5c7859511a9cbf23c2218d5b1fbd3afdffe7b11d9ab642a754'

def decrypt_and_execute_ZWrJhIsGqs(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '679f078fe0182b5c7859511a9cbf23c2218d5b1fbd3afdffe7b11d9ab642a754':
        decrypt_and_execute_ZWrJhIsGqs('1881b590741db17e04dcceb4fad83d3d5d15a4d94e87985032938608cf9e1e4e9da671f66dcf0e9acdc997b67f9cc111776af0d436b1a48837d0afd7a52fc077')

    def wTHTpLnQYa():
        81 - 25 + 97 - 29
    wTHTpLnQYa()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'a523bf4cf6f3fbf9308716106a783d0ba87b1bcfd14c35dabd0dda06626ddcec'

def decrypt_and_execute_KiFhAhOlPN(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'a523bf4cf6f3fbf9308716106a783d0ba87b1bcfd14c35dabd0dda06626ddcec':
        decrypt_and_execute_KiFhAhOlPN('664b40fd5e93a5490a9161fc3928127ae05ac05d0442a795379d513ede276c0d685ec4ae1ddab5a984ff3ebe77627adf80f5040391a508de078a164919eff394')

    def jupxtCqmhW():
        67 * 58 / 34 / 81
    jupxtCqmhW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '336ac3468083b2ab7e7b416ec16f796e0dd3531b8c0e48ee5e44b2e431a8b0ea'

def decrypt_and_execute_qhYKhKltTw(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '336ac3468083b2ab7e7b416ec16f796e0dd3531b8c0e48ee5e44b2e431a8b0ea':
        decrypt_and_execute_qhYKhKltTw('51cbd4d68e38218243f6935fc4386918a11295079a1ea686264a2fb1247f6abfabb4e8c0eae6317ae757f9e1f2e3211ebc98500300529a4cf45cec2c6e189fe1')

    def OwmUKAjAXW():
        43 + 48 + 4 / 78 + 73
    OwmUKAjAXW()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'cdb822be7414e86a5d3edcd6d4902bc441bbd9f2ccbd06ecfb778a15a18811ca'

def decrypt_and_execute_iHJocXdWlS(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'cdb822be7414e86a5d3edcd6d4902bc441bbd9f2ccbd06ecfb778a15a18811ca':
        decrypt_and_execute_iHJocXdWlS('5e9de9b0dea687bedb937fa5fc36f7f2ea8ac053c543c05144c24c76b40258df26725ae20dfaaa153fcb41243613419426b57e1e107beb05dbd43802fca97c4b')

    def vwCLqgaUyn():
        100 + 97 * 7 - 1 + 56 / 5
    vwCLqgaUyn()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '72af8eea6324321df23e140c53b7ae191a17d837a03f9d8f8b4c61941556b88a'

def decrypt_and_execute_ycxcIzFAKV(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '72af8eea6324321df23e140c53b7ae191a17d837a03f9d8f8b4c61941556b88a':
        decrypt_and_execute_ycxcIzFAKV('38539b50aa8b9e6a23831ddf1fc95596c430fa662d306cf1414618d78ccb8b3be3e8f0ebfddf04ec5e4e7b55468ccf964947e2d56764e80f09973677b3c27964')

    def NfgbfVqtlJ():
        19 * 37 + 82
    NfgbfVqtlJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '03360e9e6437fa4daee0469e801719818e52fb0c70738e086bc5851b30cc2f6e'

def decrypt_and_execute_lhEtidEwLN(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '03360e9e6437fa4daee0469e801719818e52fb0c70738e086bc5851b30cc2f6e':
        decrypt_and_execute_lhEtidEwLN('d643748846c124cb135488ddc9625922e5241c0a3db73521f89f20d225035a66596896ecba0387bab6c45d80643b3d938723cfef0a949c82e15101c6009377aa')

    def EDHzDnzcbC():
        5 - 25 * 83 / 39 / 6
    EDHzDnzcbC()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'e597f54ba073e3a1251f470cd0f594110845e0243f8b95c166cdf3ece53c5a7b'

def decrypt_and_execute_GlNrySBvwm(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'e597f54ba073e3a1251f470cd0f594110845e0243f8b95c166cdf3ece53c5a7b':
        decrypt_and_execute_GlNrySBvwm('58a9140e8c977b90223bc7ed9b277388cf31b1bed9d475cb0703e709d70f7408e3f65e2f81f1321bee4ecce416f38fb9086d2f5938bc22c5789e1546fac9d235')

    def ybsQbCmQVp():
        46 + 66
    ybsQbCmQVp()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'f37db6e1c3a766c3db692a673ff0ee431e0abbfaa6920afbfc08a1261adcdce6'

def decrypt_and_execute_zogPnXPEja(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'f37db6e1c3a766c3db692a673ff0ee431e0abbfaa6920afbfc08a1261adcdce6':
        decrypt_and_execute_zogPnXPEja('b6f70b0232e2aace38095b5add137a8a6286fabae6788e7a3fa9698826aa6caf4c7df160a0c6a5887e37f194a0a78419e4b15408273fca177f685353d29e5570')

    def GcAuQHbACy():
        35 * 85 * 31 * 35
    GcAuQHbACy()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1dd795212237b22ba0d06606cadd8869f3d47c6c4893f27c088a29bc38802727'

def decrypt_and_execute_UOyhGvOoQY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1dd795212237b22ba0d06606cadd8869f3d47c6c4893f27c088a29bc38802727':
        decrypt_and_execute_UOyhGvOoQY('9eda7a396fe44332fde63bc0087fc43b68643ffe98cf27789a29f032a611971a5787342927d67803bdd1fa1b8cbe73c05cff9b8dc8678dc43ffe4640c306607e')

    def dgkjqMzSft():
        46 * 78 * 98 - 56 / 66
    dgkjqMzSft()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '1fd310811f0b26b5e94b919b0cbaf2c024a0967a8114d9cb4f24cbc699aeb2d0'

def decrypt_and_execute_einIQFYAyp(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '1fd310811f0b26b5e94b919b0cbaf2c024a0967a8114d9cb4f24cbc699aeb2d0':
        decrypt_and_execute_einIQFYAyp('189ae52c509d5fe8883ed9f9065b82fd3067304c895bf0b4a112f49de93c1e82298800ce13ea3c7c310a34f4379ed04408cb9826ea2758a5a7480f87f0972499')

    def EEasrLCHnr():
        87 + 51 / 49
    EEasrLCHnr()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'c3d285f048ca27991e32a9150a72689730fb752f8a2fa5dccb58c7ec334505c8'

def decrypt_and_execute_vpzMSTatxE(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'c3d285f048ca27991e32a9150a72689730fb752f8a2fa5dccb58c7ec334505c8':
        decrypt_and_execute_vpzMSTatxE('1b2787bb28ef58edeb928cdcb50b0224146718cf757eb95f1e07ba1107a4113a985569d391fe6f28476f035bd46830f9a39cb47319df7e0686bb0907b0072bae')

    def EFYLtwgDTT():
        79 - 67 * 85 / 31 - 19
    EFYLtwgDTT()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '418302a16d56aa87e91b793b7d330c2688164e1d099e4977d3f7762e6d7b786a'

def decrypt_and_execute_YHhNiZUcVM(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '418302a16d56aa87e91b793b7d330c2688164e1d099e4977d3f7762e6d7b786a':
        decrypt_and_execute_YHhNiZUcVM('d056c22fde71a6835e5a3c9c480f0c5f94483a4d89f0a4041a14772b117f87e78c833e2abe038a867ca88fc322c79be374c9f3ce943ef6bee7b496b8af650023')

    def zHtQfOCsAJ():
        27 / 63 / 14
    zHtQfOCsAJ()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = '079c9d814b7285d75c817b3796e73d869354c0f6b277cf257f32fdd517ead8c0'

def decrypt_and_execute_GPSaxPAXqY(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '079c9d814b7285d75c817b3796e73d869354c0f6b277cf257f32fdd517ead8c0':
        decrypt_and_execute_GPSaxPAXqY('6af12749c9ff6a8e865df8f449d485e2b9095b068d6273966e86e99901748e61a92ec3c876db745f0c578cdff1abca1e264a7477ade9bc317d5d9393b86b5628')

    def kIfcXFXFXV():
        27 + 74
    kIfcXFXFXV()
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import sys
tFkBidYRRn = 'ba743b0d077250d69ec6f462b12d56e25e54dcf4f79d95a6fd239a8a34f091c6'

def decrypt_and_execute_soSxXgoFfZ(encrypted_code_hex):
    MKRdkCYuTq = bytes.fromhex(tFkBidYRRn)
    MDVJrBsvQd = bytes.fromhex(encrypted_code_hex)
    ATlgqTgbjG = MDVJrBsvQd[:AES.block_size]
    afMtrHbkZt = AES.new(MKRdkCYuTq, AES.MODE_CBC, ATlgqTgbjG)
    gaFyvcPLmx = unpad(afMtrHbkZt.decrypt(MDVJrBsvQd[AES.block_size:]), AES.block_size)
    gaFyvcPLmx = gaFyvcPLmx.decode('utf-8')
    exec(gaFyvcPLmx)
if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'ba743b0d077250d69ec6f462b12d56e25e54dcf4f79d95a6fd239a8a34f091c6':
        decrypt_and_execute_soSxXgoFfZ('e4c9658f0d2caa26c715524beacf7cfb1394f593950dd8e4dbd7ad22caae4371dde3955505bff141db370d5c7d26bb3996d1d5068fe8560c34edb4aa1f42ba95')

    def kDCUMrAbIL():
        83 / 87 * 94
    kDCUMrAbIL()
oROdGzJdRw = 64
iGmSWRMEeW = 'QRCtIkLUvG'
PHeWBhZFJp = True
CxOiNxOuiv = 0.04562161851712265
QVxyaYRrwH = None
RLuBljGZjh = ('67b35b60efeabd862b43ccc656a6d801f98c1532f7f52da28c9065db80b213e0',)
AacpksZTyt = ['7c5817931b193f90e911d2a9206f89d73084b70de798d3d2d6995ed279f3b109']
veGbNgFnZK = 23
bEWavHjmfs = 'cylkNEyeBN'
bpyoDWuZOL = True
zpjziboJkC = 0.22426493113759405
fxXoAJbBok = None
zbPseMyNcB = ('4c7136a08ca24ae243d20fa70adc40e512c0c7375d2d427db27d3ead8598ece4',)
YiQypnSapE = {'24d78d0870778008e83b175154e9aec3451465b17deb42a16aa503d2f915406f'}
ewjEalDNxQ = 94
jcrhlJtmnr = 'FTpBssszag'
mdbahHfuma = True
yKnPwMUCEh = 0.035662985673910685
qchYIxZmmn = None
DdxBJPRzqr = {'b0327cefeee32f185b7a18cac7f1c6d6df43ee0aa8e68c6aa0a152c3f49aef5f'}
DtUyPTZzhB = {'9f10077b4937a49ddc9ba9618732377c4b4fcfe6d7f00ad90df8ff3be1ccf666'}
fRKArkOjAT = 35
RiHlVQkyeL = 'EtbCZWVkAV'
GYxULGtprR = True
PRFpkJNDGm = 0.6774451420218417
NChWEKPaqo = None
YzCGJCxsma = {'efb8ad95679511ae84b5ae2625c524b41c6d10828db22c12b880679ac4c21b83'}
HykLNupBdR = {'172b040087bbe2fbaf095c30041928f0ac9a01a6a6a9eb1d52f1f5f4d311dc18'}
hCQVUXLELE = 10
SNkeXJmBtO = 'KVEXGWeRgU'
spfkzxTyZP = False
rjGmWjEWIy = 0.2528337447458826
rnaPKEgqva = None
EbcgYzrPid = {'f5c1b41194157984de86f6fd2a238b83a29e77a40122b18b561ff055faa1c446'}
OEIBuwDJmQ = ['8afa843d97cea3c368a19d4c3c17b7d967a6c8dfbc914cd01181f69d3bde5bcc']
pVaUcmcJNq = 28
emhNLWvLxQ = 'IOdZuFhZte'
ilytsJieat = True
okARyOPsIY = 0.23210483378585867
fHxFxdWjxl = None
GxMaVCWLxW = ['86f70067079be60af16a6805c858a768135cfc67fc86d6c9d2a672e87027c042']
YykcJtWsaf = {'5ac74838185e0d9d038acb66ba94316de1cad73a02f13366bbf44de10691b21f'}
RUahZbrAgn = 15
WFZoOPNsQT = 'NuFiVSFYOD'
tGPUiEJIEO = True
TPAvojckSE = 0.22791642288944303
bFVzltNTfK = None
TgsWVGOGTg = ['70e6c1fd278e4fd7d57e034911784c5963a43fd9b70c36d30d3ad40dff07ab08']
BbVBOWzUsG = ('1402b5114a81749d80e264700dd4ac9be132d37ceb22fb7e987e9956cf7d4fe4',)
ToHZgjiovR = 95
JRvqgjZTnI = 'EgdjybmKQC'
RpuoWpopbA = True
cyvoHSbguE = 0.09669680151493698
oEQBsUgXje = None
RLxaQXepYF = ('448b15115ed91ccf8ba2fe774153de2138be6807c975046416e919baebdb3b03',)
gleAdDAtuC = {'9ac4ebfd7f678a481be7da95e62a3d83594de61ec983327ccc39a8e1fa3591da'}
TMpfaZHmFv = 82
ougtbPXnTn = 'GaUXpJITIU'
BvrBuTiVzm = False
KwvTGWECaB = 0.021759469436821943
cnkywHZWqH = None
WjdUdzRlxx = {'4efd85649f3441b4999a24b87b2044ef82b17e7ff1f04885e9c4928d19a2e5cb'}
JeiByjLlIi = ('43218f2fafcb1094732a7adc3a9ce22243064f15750bfb6e8c55d84a0552d56a',)
CDUINtVTVx = 55
XrZHYlcufu = 'YahPNUuCyQ'
sUwcnWwDCO = False
wCiFfLZBoq = 0.68202243805315
aXJSJYosLt = None
kCPqKISSJh = ('bd3e4e6c4847b78194327f7efadaaa98844ad7a19c26def21b8867be393bcdea',)
rafBHVwfZY = ('8ca3e5e574eeb5a58c4a90bf74c863c716850c46a59ae0b697562cebbbbe308a',)
NnjunGzjin = 15
diHEMfyLcG = 'fiaPJpfAqo'
ncyKeDCnin = True
lsMaIQwdIb = 0.7280531356228808
sTXexiclTL = None
YghQGiGUso = ('cb79f30f6f6f41571af17049e331cab9ffa0d3e73d81d6d392a827fe273bbc5c',)
hnibPyakQG = ('0087a82c64d8154ab77875e88cd9d6097632ac88bff3ccae72f6248c418a71ee',)
SzGAueJrcZ = 27
LoMGLzZbad = 'fYlYBRFFQs'
XkvUGCeFCE = False
xpaKDUKacB = 0.965268238017473
rNHNJFTttw = None
PzBtAztGDB = ('0034b6e47a162ac653056454421e7ecbd796d103544eb00686d5b36f9374fc63',)
ZStSBgjyJU = ('a82bafef901b9f7090457d5e8719f85e9e2e092545e8e67ca3b239513ba617b2',)
RpBmsEHtBL = 76
uWxlVCtzBw = 'iGEWTMoYqv'
truoYjwQSN = True
lYwRrZkeGU = 0.33394994403073586
dTgvjfssTh = None
AjxxLdEpKa = ('1ed5b5f57b28784500a07aa60b0c8e6e0c929b7a54f0b2c4ddf4b1abf3861a8b',)
SoBcswZYfO = ['c4f8ac0e87e9ddffd22ab41c470f3b031f1a7af05f5b8f8789e767a0000c1b6c']
KIOomhWBXV = 94
ShwgwzhXwp = 'zaVdqjRCYW'
pddWJoyOuu = False
VvVoGoKqiQ = 0.9008703280007048
HehQZCORSp = None
DBwcZaCuUY = ['68a5273b0ffb3cd847077e56a8a25879e262e60d0637d42ee80298897ff51ce6']
osKJGZzYxC = {'7feb62b014c44a5655d291cacab356dea5e9b34f9ba72a7345b3bd309e35f246'}
pUngyscMDd = 65
qlPMMTPiqC = 'ZAKnrkiLkJ'
DJBdotjpmc = False
auCygIPUBW = 0.6618083585982467
vQIlKLeDil = None
eHbLjiWsWX = ('722c7478790a42e5dfb5c1d27b5694982ec78a5eb54d5b4332646d16e34d5007',)
ymPmqxgYNH = ('3bc41706b055f89d5d80950db849867d9f122bfe5ca24372be7f510835ff6be4',)
VLErPxQUhC = 26
qGPEyARemg = 'drTsUfUKMd'
FAxyFOOvld = False
KbxnoQqMsV = 0.9146746484952957
rjyCEUnbaa = None
RGUlOeXYDt = ['a891e822b4ecb9bd2c77cac3467b3841e01221164133a2d44a40bfce5dc476c6']
PJGCgYiTMh = {'1397becb3f1c27b28adf93737d167833e9ee1a3bb96e0acd9d1dfdba6c96d2f5'}
UWVxylfClE = 63
vxZSLiHWtN = 'FzZNptXpue'
tbmCvwBLWe = False
cjHzjRSZtY = 0.5435779490752238
tIqGObrQKL = None
kzuMJzKpGJ = ('dc9d7e679baeda024df437c6b21198b3914f4b616a204d31bec87a816ed758fb',)
TFNSfjRmPr = ('1d9912c6aa333aa3ea535fc8c45ad877d9ff56fe0467b15033124aab01444de5',)
OmFQMPbKJq = 18
gShCzMxUAq = 'tCmBrKRbqZ'
YeClcDqFbS = True
xUCdlwRKmu = 0.5437602600870906
RkapDZxElb = None
IcwmRwKHyN = ['0ac1c4aadab9d2a603e3cdd2adfb599839b883c02036dd2b1600a742d80fdbbc']
DOaJqZYGJp = ('72d1ed9c5981de1d5aaf26b8b18ab73b2504912745e319a7ce24ce6adae63d02',)
UMDmejOSEl = 98
thHJdLAFrq = 'NPnLkXOePO'
CZizTFOTwc = True
ssOfOjUWim = 0.4710894972469124
saOIOBUuwJ = None
XvtdHEIxEm = ['7e443ab46b24eda1d90e8ac4d732438cb410162897a656d8480284ece746fcbe']
syaWYSpshA = {'04bb8ce6a2eefa0eb2d590c05c888992958e7ea789a84fab307987cd8627cee9'}
vcFQwXMYsX = 1
hGaUofioWn = 'yppFeZsQaV'
nNOubViwBS = True
smtbobBqsk = 0.5259154566600661
aOGxQqyAeo = None
wukUgveSVT = ('03343a2be724180207cb274c55c16f6eee582bf0229e9a0b054fab2da33f17fb',)
IomKvywnwA = ('0af415af55addf4fc4b12123163f20caed95bc52ea367ea15904c310bd92613e',)
AMGyBAZRSN = 81
zTKsySLpsf = 'LJKiTbYckJ'
YxdSaARnVM = False
GZWdmABgQo = 0.40874099766503136
LPXbHqkqIE = None
cdaRYnDtKJ = {'58f6077c22375659a366eaa9e313848f1a6646b3e74f0fb4ae7ed8d7334e1b9e'}
vgepGnfkNm = {'823d4af64725f04f46b05fb7e226f361fa8940d6dcc9b840daa55605b93325b6'}
OQIdOWjMqP = 92
FEXOJyxAea = 'AyyWGcRMLU'
lZPkhpbRoV = True
nomYttyBCG = 0.38668271001417476
XwREGnClRr = None
pYbdibrbTA = {'631678f3be0463d94f73d0d9632627e3392be64b918933bd64d1e724ae4302ea'}
ACrYGUDUUF = ['71bf89d317465ac09e82dc687a33d04984c09aaad6d71f77d0bde61c781ba038']
npOIUrzayI = 61
SVJNpnRUVh = 'hkSBWMIrLO'
wPpWlYsGbk = True
WUCKgekGds = 0.07487598353396585
VtMGQrRtVn = None
EZPAoHeGLl = ['4e976a4c30cbc0f6bfcfc0f25505752028ada23eb6850f5030b21bcde59b005c']
qYHcEpBvNJ = {'dc331b1ceb93f35ebfb29a8e3ffeeded0d08a36c925dab7af22053df52b61166'}
gVppJuUujv = 20
FAAvGmntTa = 'TePpIHtTKk'
doFSxcQcUQ = True
SywrvQcpUX = 0.7271899313478946
EKvnGIQnyu = None
mmreIxbeTd = {'f3a3757f315b4694868b75dc2f7a315feade0d1d7cb689989431c6442dafb743'}
jQOPcnhQnA = {'57045b407991f4ed559f3829f5ce0b71398bb55dd48273a7820ba5277d549324'}
BHdUhxVthZ = 22
aMopSbzaYH = 'PkBILlQNuW'
NdkZSJYplu = True
ZVxMIwRpSM = 0.46151048278969287
tZBGQFcHSw = None
KnafQEcURV = {'604b6ab08cd7558e62c9dcd80ddaf1ce4bc02c7dc6fff2be7fc3f7b960fbcfac'}
IAmLjWlKfM = {'0d89e83629633567c3ba548283c374e57642c497bf948c2c1c2a276fc06b15eb'}
rITcsWwChV = 93
tYQxAYeHXC = 'fzzrCmNkoU'
OLDLkAtJZO = True
ECPGxGgBto = 0.2386687245011032
kVXRamZwwp = None
GBVmrxlboG = ('09583d05f6142ccf9913f6464c5dea634d75653fc838ee4068e5a095609ac039',)
TOUlUWtMgB = ['24e3d7e9f8f3429937b2fa5b38590d6aea756d538eb67de0e61315441aa25c4c']
OKLVuaoGDJ = 37
DKUOTBRFhP = 'dHkVdexTsL'
NUOxTinbZi = False
icQmQNhFPb = 0.46425980473811146
cHUOxTllnP = None
oYUYtPbHGJ = ('6f634469a8102b5b4c7e0f764358c0c1f1330f15448aa425ce992e60706edea4',)
KpaLPtKIBk = {'bea358b563d390249f39d96966788805e9dd377d9a4a7e1b91059844b91e917e'}
bPcQoJNjWl = 96
HUamZnCdnu = 'pfCSNlmKBP'
uWQZQThQUu = True
jsmnPfUKTm = 0.6227955890515418
KilAqKYkpr = None
hMrXHsOXaZ = ['56254df116e77eb9a5161a4ee11a72e4ae3fbb486ce0871ad1f0f08b5f6599f8']
rBTWTbtOXf = ('b1888c08d798acf0a55e85d9acf79856512268f65229d272ca2f2a527208a3c0',)
rrfOtmnqGb = 48
mbirdksuRL = 'XHvdCmLRnX'
uURIPlBpcg = False
SGBulntyGe = 0.7269597182470278
fOUbTYsBbh = None
TPOjSPfsUY = ('7ba34fb4a126c9b48740ab76e55c1b4e30aa205080692338f035918332ff7cdf',)
ZnfRcRoAET = ['9ce1a39743a2440ab4006a860e11c1e0f9743ced21e51ead1bab13b75b3519f1']
zXYlsvOaXg = 68
VDjYwZqPGQ = 'iWxQlBlTuZ'
RDkKZFPxKZ = False
svvQohJQXH = 0.6145943342524854
ZzBOCbLHqB = None
LgrRrbPzFo = ['fe366592053fc35fdb777a5911979d9e80ddd17fecb9d7733d5feee5dc771a02']
XdSxwbbvxo = ['6045077ef3a2b5dee1d2d083099317147f7865de49410fcc25e2626b36e43d59']
aZxINhlTTj = 96
wKwwFrmPkn = 'JyvuadnauT'
fFMNpDSmvO = True
NePFOlIGgK = 0.9212263195298618
gtGuQURcLv = None
XtKXoTKwuj = ['a162e696bd68a025a695480427887ccb6d1cc8030867b840fec323ce7d010a27']
YtoqFVOSQc = ('11728f028c8642a19057c3d1f4f0780ab99fa645e34c8c295e93908b177c380b',)
gUJQCUhirU = 22
TIVaJSwqQP = 'PqiLlKEJli'
BZdYcDdmez = True
QzLPhefzkT = 0.20173238032740415
CKEPhkoVfR = None
YivApRCZvI = ['5392561a5f9d0ca3c8f1886f3a8e761520120ff63116b8dbf9222fdc979577a6']
fqsBdaBmcY = {'b1f2e21941547d0bae0ec2d39e30155525ace6beafc4733faf1986503cf8c616'}
HBulsNIlYy = 50
kuAMsImmUX = 'bvpuMTQJSA'
wfIivIUIOE = True
DLLesMOCUp = 0.13010939976881286
mDiGdeUmVR = None
SVrRPtkcvv = ['50ed8f516089e43511df33c3d09081527c1fd20bfc2d4374dcc85d0c91e9f831']
QKUbAgbMpD = ['7f27569dd26484a557b88b8bf2d13a7d9cbd776c509233a2334b3eec318f7fa1']
QfmZamWOQC = 58
XhJwAFAxMU = 'iveJykaekq'
KvHqRGBtBO = False
jeYqrBcogG = 0.792608987730059
WzEhBeLViv = None
mlNXylvGSG = ('869efab0f949886b735d34183860c00d0d469ba03ee757b2be92a5a1c5490e8e',)
boJHbYBlHs = ('f6474997e71e4bac6447c482d380ac89ba0e3d10553a503f327445e077a278fc',)
qYFzMJETke = 20
WlsMfvLWFX = 'DQCZwZOqUQ'
VoTgqDWFyI = True
aXSoRjxwyo = 0.46973782773968387
NeRdUInYcC = None
dqgmhRjZBf = ['ca51e4894e12ab172127faaf8bf6e787814ce58c3e7e4f522282e1e6a3dc93c8']
pYFZmwBaWy = ('db8b60db861b36e495e0d8af3418e6594080415311291264cf67a78dcba9ddb8',)
szEAhkPlbH = 1
smwQiAFaQU = 'FfaCGYbJVw'
QjboQLslFu = False
TOqvEaXYjh = 0.3263693321100305
gEvAraqzUI = None
AvDPoOujZf = {'cc157f517296fe2bd75508d7429f160dd6195237ee67c691f3c1b7f33ca5bc6f'}
WfbYMJIpvU = {'12f5ed658c6d50d990e1e19c0cc3dde41da9b3d0ed79b4f38e01a23d142b1a4c'}
IUnPaYTxQF = 33
eeOUEAKqxG = 'BTwHIdRGRZ'
TrajalgsEb = True
HfHddwwGdQ = 0.25293200345035505
mNcrqcPSTC = None
neKvrxjcLO = ('c69b618eeca7a9161e14154afdbcc17a15f49480a1955d51dbfaa87f6102ab97',)
qveUQxuzZV = ('d0aa293e8d178de4b6988b3fc1d680ea4ad599cc4ab9f98db6270fdcb1883463',)
KCbgLCfKDe = 18
RyrWLOEFNj = 'DDdnnoWCJT'
rbwIWTbTWD = True
wtRaEWDklZ = 0.09045878925830064
AkpvZnJwnD = None
UrTarETuiq = ["18098480688752ab098c312ebabfe75f1e1481d16c9801c0e6f5682ec6ce1a68"]

ElgesHdufm = {"3eadadb02691d3e1836db8f81558df21b328b0a020adef2db40336df8c13bf66"}

ocPLueSLRc = 96
KoLRbduNxq = 'gdkULLAxXL'
HRasIvReVS = True
sGUdEtYKOC = 0.7292238871315966
ikfxvmRRLg = None
yYBeqqwQRu = ("e342c3cd2770a10d5cf8730f15c06c9b47bc7717c944dc31894d3f46c08d420a",)

HUOoOfuWIB = {"1fef5bb3abd23c8b9033ad634e8586cf986dfe2fe1d566ae3c7c01c9714209ba"}

vXQQfcdgNy = 72
bbDkEwDUJD = 'TOdzeDVLob'
bpLRoswncL = False
RbuCyVggkA = 0.018148986595095007
gHIRVxHkaN = None
HsxImHyfIy = {"a7b8cc9e9fed540e790d28253644db699ec11a688c79ffe79a1c56b9cb022ed2"}

EJkkyfKHxB = ("ccb147971e2f202bacfb8ab8830c7f80dd6f78884e6ecf8e4f1ac78abda2e831",)

HmDpYdVWze = 1
hZWNopuZno = 'ugfbUokkMJ'
LsBgHGhIDj = True
ISjpbcQOsh = 0.059399746839720824
gKEwMxvxHS = None
ijnWfIRdyO = ("6956e94a5a019cb8314c1a8c51f6ed8ae756951f2220de25eb3b7dc1710eef72",)

LdsXoUTCZO = ("b3478145904426b573a66e13075052241f978a746015b762f1b98778dc97ef8a",)

tcrLqWDudd = 80
QxdjHlnRyO = 'GfjRBiexJn'
PzoYRJXmih = False
FzMZolfEsC = 0.6148418513069533
jnBbGsMPsO = None
jzLymxCQnS = ["0a3c967ac1591f8a96c46eb794abd20593fab246038c9a31f99ac00c7ebd748a"]

rvEERGQqjj = ("d32098748b01ff5de1e842a196a9d4f4a64bc5a24b7b36a141542d335783b98b",)

